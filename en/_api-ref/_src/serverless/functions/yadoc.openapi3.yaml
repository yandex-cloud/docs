openapi: 3.0.0
info:
  title: Cloud Functions Service
  description: This API reference is organized by resource. Actions are performed
    by sending HTTP requests to resource URLs or making RPC calls. For more information
    about API architecture, see [API Concepts](/docs/api-design-guide/).
  version: v1
  x-y-docUri: functions/api-ref
  x-y-baseUrl: https://serverless-functions.api.cloud.yandex.net
paths:
  /functions/v1/functions/{functionId}:
    get:
      tags:
      - Function
      summary: Returns the specified function.
      description: To get the list of all available functions, make a [list](/docs/functions/functions/api-ref/Function/list)
        request.
      operationId: FunctionGet
      parameters:
      - name: functionId
        in: path
        description: |-
          Required.
          ID of the function to return.

          To get a function ID make a [list](/docs/functions/functions/api-ref/Function/list) request.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Function'
      x-y-navtitle: get
    delete:
      tags:
      - Function
      summary: Deletes the specified function.
      operationId: FunctionDelete
      parameters:
      - name: functionId
        in: path
        description: |-
          Required.
          ID of the function to delete.
          To get a function ID make a [list](/docs/functions/functions/api-ref/Function/list) request.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: delete
      x-y-operation-metadata:
        $ref: '#/components/schemas/DeleteFunctionMetadata'
      x-y-operation-response: Empty
    patch:
      tags:
      - Function
      summary: Updates the specified function.
      operationId: FunctionUpdate
      parameters:
      - name: functionId
        in: path
        description: |-
          Required.
          ID of the function to update.

          To get a function ID make a [list](/docs/functions/functions/api-ref/Function/list) request.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFunctionRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: update
      x-y-operation-metadata:
        $ref: '#/components/schemas/UpdateFunctionMetadata'
      x-y-operation-response: '[Function](/docs/functions/functions/api-ref/Function#representation)'
  /functions/v1/functions:
    get:
      tags:
      - Function
      summary: Retrieves the list of functions in the specified folder.
      operationId: FunctionList
      parameters:
      - name: folderId
        in: query
        description: |-
          Required.
          ID of the folder to list functions in.

          To get a folder ID make a [list](/docs/resource-manager/api-ref/Folder/list) request.
        schema:
          type: string
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page to return. If the number of available
          results is larger than `pageSize`, the service returns a [nextPageToken](/docs/functions/functions/api-ref/Function/list#responses)
          that can be used to get the next page of results in subsequent list requests.

          Default value: 100.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token. To get the next page of results, set `pageToken` to the
          [nextPageToken](/docs/functions/functions/api-ref/Function/list#responses) returned by a previous list request.
        schema:
          type: string
      - name: filter
        in: query
        description: |-
          A filter expression that filters functions listed in the response.

          The expression must specify:
          1. The field name. Currently filtering can only be applied to the [Function.name](/docs/functions/functions/api-ref/Function#representation) field.
          2. An `=` operator.
          3. The value in double quotes (`"`). Must be 3-63 characters long and match the regular expression `[a-z][-a-z0-9]{1,61}[a-z0-9]`.
          Example of a filter: `name="my-function"`.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFunctionsResponse'
      x-y-navtitle: list
    post:
      tags:
      - Function
      summary: Creates a function in the specified folder.
      operationId: FunctionCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFunctionRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: create
      x-y-operation-metadata:
        $ref: '#/components/schemas/CreateFunctionMetadata'
      x-y-operation-response: '[Function](/docs/functions/functions/api-ref/Function#representation)'
  /functions/v1/versions/{functionVersionId}:
    get:
      tags:
      - Function
      summary: Returns the specified version of a function.
      description: To get the list of available version, make a [listVersions](/docs/functions/functions/api-ref/Function/listVersions)
        request.
      operationId: FunctionGetVersion
      parameters:
      - name: functionVersionId
        in: path
        description: |-
          Required.
          ID of the version to return.

          To get a version ID make a [listVersions](/docs/functions/functions/api-ref/Function/listVersions) request.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
      x-y-navtitle: getVersion
  /functions/v1/versions:byTag:
    get:
      tags:
      - Function
      summary: Returns all versions with the specified tag.
      description: To get the list of all available versions, make a [listVersions](/docs/functions/functions/api-ref/Function/listVersions)
        request.
      operationId: FunctionGetVersionByTag
      parameters:
      - name: functionId
        in: query
        description: |-
          Required.
          ID of the function whose versions should be listed.

          To get a function ID use a [list](/docs/functions/functions/api-ref/Function/list) request.
        schema:
          type: string
      - name: tag
        in: query
        description: |-
          Version tag.

          To get the history of version tags make a [listTagHistory](/docs/functions/functions/api-ref/Function/listTagHistory) request.

          Value must match the regular expression `` [a-z][-_0-9a-z]*|[$]latest ``.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
      x-y-navtitle: getVersionByTag
  /functions/v1/versions:
    get:
      tags:
      - Function
      summary: |-
        Retrieves the list of versions for the specified function, or of all function versions
        in the specified folder.
      operationId: FunctionListVersions
      parameters:
      - name: folderId
        in: query
        description: |-
          ID of the folder to list function versions for.
          To get a folder ID make a [list](/docs/resource-manager/api-ref/Folder/list) request.
        schema:
          type: string
      - name: functionId
        in: query
        description: |-
          ID of the function to list versions for.
          To get a function ID use a [list](/docs/functions/functions/api-ref/Function/list) request.
        schema:
          type: string
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page to return. If the number of available results
          is larger than `pageSize`, the service returns a [nextPageToken](/docs/functions/functions/api-ref/Function/listVersions#responses)
          that can be used to get the next page of results in subsequent list requests.

          Default value: 100.

          Acceptable values are 0 to 1000, inclusive.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token. To get the next page of results, set `pageToken` to the
          [nextPageToken](/docs/functions/functions/api-ref/Function/listVersions#responses) returned by a previous list request.

          The maximum string length in characters is 100.
        schema:
          type: string
      - name: filter
        in: query
        description: |-
          A filter expression that filters resources listed in the response.

          The expression must specify:
          1. The field name. Currently filtering can only be applied to the `status` and `runtime` fields.
          2. An `=` operator.
          3. The value in double quotes (`"`). Must be 3-63 characters long and match the regular expression `[a-z][-a-z0-9]{1,61}[a-z0-9]`.
          Example of a filter: `status="ACTIVE"`.

          The maximum string length in characters is 1000.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFunctionsVersionsResponse'
      x-y-navtitle: listVersions
    post:
      tags:
      - Function
      summary: Creates a version for the specified function.
      operationId: FunctionCreateVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFunctionVersionRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: createVersion
      x-y-operation-metadata:
        $ref: '#/components/schemas/CreateFunctionVersionMetadata'
      x-y-operation-response: '`Version`'
  /functions/v1/versions/{functionVersionId}:setTag:
    post:
      tags:
      - Function
      summary: Set a tag for the specified version of a function.
      operationId: FunctionSetTag
      parameters:
      - name: functionVersionId
        in: path
        description: |-
          Required.
          ID of the version to set the tag for.

          To get a version ID make a [listVersions](/docs/functions/functions/api-ref/Function/listVersions) request.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetFunctionTagRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: setTag
      x-y-operation-metadata:
        $ref: '#/components/schemas/SetFunctionTagMetadata'
      x-y-operation-response: '`Version`'
  /functions/v1/versions/{functionVersionId}:removeTag:
    post:
      tags:
      - Function
      summary: Remove a tag from the specified version of a function.
      operationId: FunctionRemoveTag
      parameters:
      - name: functionVersionId
        in: path
        description: |-
          Required.
          ID of the version to remove a tag from.

          To get the a version ID make a [listVersions](/docs/functions/functions/api-ref/Function/listVersions) request.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveFunctionTagRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: removeTag
      x-y-operation-metadata:
        $ref: '#/components/schemas/RemoveFunctionTagMetadata'
      x-y-operation-response: '`Version`'
  /functions/v1/functions/{functionId}:tagHistory:
    get:
      tags:
      - Function
      summary: Returns the log of tags assigned to versions of the specified function.
      operationId: FunctionListTagHistory
      parameters:
      - name: functionId
        in: path
        description: |-
          Required.
          ID of the function to retrieve tag history for.

          To get a function ID, make a [list](/docs/functions/functions/api-ref/Function/list) request.
        required: true
        schema:
          type: string
      - name: tag
        in: query
        description: |-
          Specific tag that history should be limited to.

          Value must match the regular expression `` [a-z][-_0-9a-z]*|[$]latest ``.
        schema:
          type: string
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page that should be returned. If the number of available
          results is larger than `pageSize`, the service returns a [nextPageToken](/docs/functions/functions/api-ref/Function/listOperations#responses)
          that can be used to get the next page of results in subsequent list requests.
          Default value: 100.

          Acceptable values are 0 to 1000, inclusive.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token. To get the next page of results, set `pageToken` to the
          [nextPageToken](/docs/functions/functions/api-ref/Function/listOperations#responses) returned by a previous list request.

          The maximum string length in characters is 100.
        schema:
          type: string
      - name: filter
        in: query
        description: |-
          A filter expression that filters resources listed in the response.

          The expression must specify:
          1. The field name. Currently filtering can only be applied to the [FunctionTagHistoryRecord.effective_from] and [FunctionTagHistoryRecord.effective_to] fields.
          2. An `=` or `>` or `<` operator.
          3. The value in double quotes (`"`). Must be 3-63 characters long and match the regular expression `[a-z][-a-z0-9]{1,61}[a-z0-9]`.
          For example, `effective_to>2021-01-01T12:00:00Z`.

          The maximum string length in characters is 1000.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFunctionTagHistoryResponse'
      x-y-navtitle: listTagHistory
  /functions/v1/runtimes:
    get:
      tags:
      - Function
      summary: Lists available runtime environments for the specified function.
      operationId: FunctionListRuntimes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRuntimesResponse'
      x-y-navtitle: listRuntimes
  /functions/v1/functions/{functionId}/operations:
    get:
      tags:
      - Function
      summary: Lists operations for the specified function.
      operationId: FunctionListOperations
      parameters:
      - name: functionId
        in: path
        description: |-
          Required.
          ID of the function to list operations for.
        required: true
        schema:
          type: string
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page that should be returned. If the number of available
          results is larger than `pageSize`, the service returns a [nextPageToken](/docs/functions/functions/api-ref/Function/listOperations#responses)
          that can be used to get the next page of results in subsequent list requests.

          Default value: 100.

          Acceptable values are 0 to 1000, inclusive.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token. To get the next page of results, set `pageToken` to the
          [nextPageToken](/docs/functions/functions/api-ref/Function/listOperations#responses) returned by a previous list request.

          The maximum string length in characters is 100.
        schema:
          type: string
      - name: filter
        in: query
        description: |-
          A filter expression that filters resources listed in the response.

          The expression must specify:
          1. The field name. Currently filtering can be applied to the [Operation.done](/docs/operation/api-ref/Operation#representation), [Operation.createdBy](/docs/operation/api-ref/Operation#representation) field.
          2. An `=` operator.
          3. The value in double quotes (`"`). Must be 3-63 characters long and match the regular expression `[a-z][-a-z0-9]{1,61}[a-z0-9]`.
          Examples of a filter: `done=false`, `created_by='John.Doe'`.

          The maximum string length in characters is 1000.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFunctionOperationsResponse'
      x-y-navtitle: listOperations
  /functions/v1/functions/{resourceId}:listAccessBindings:
    get:
      tags:
      - Function
      summary: Lists existing access bindings for the specified function.
      operationId: FunctionListAccessBindings
      parameters:
      - name: resourceId
        in: path
        description: |-
          Required.
          ID of the resource to list access bindings for.

          To get the resource ID, use a corresponding List request.
          For example, use the [list](/docs/resource-manager/api-ref/Cloud/list) request to get the Cloud resource ID.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page that should be returned. If the number of available
          results is larger than [page_size],
          the service returns a nextPageToken
          that can be used to get the next page of results in subsequent list requests.
          Default value: 100.

          The maximum value is 1000.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token. Set [page_token]
          to the nextPageToken
          returned by a previous list request to get the next page of results.

          The maximum string length in characters is 100.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAccessBindingsResponse'
      x-y-navtitle: listAccessBindings
  /functions/v1/functions/{resourceId}:setAccessBindings:
    post:
      tags:
      - Function
      summary: Sets access bindings for the function.
      operationId: FunctionSetAccessBindings
      parameters:
      - name: resourceId
        in: path
        description: |-
          Required.
          ID of the resource for which access bindings are being set.

          To get the resource ID, use a corresponding List request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetAccessBindingsRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: setAccessBindings
      x-y-operation-metadata:
        $ref: '#/components/schemas/SetAccessBindingsMetadata'
      x-y-operation-response: Empty
  /functions/v1/functions/{resourceId}:updateAccessBindings:
    post:
      tags:
      - Function
      summary: Updates access bindings for the specified function.
      operationId: FunctionUpdateAccessBindings
      parameters:
      - name: resourceId
        in: path
        description: |-
          Required.
          ID of the resource for which access bindings are being updated.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccessBindingsRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: updateAccessBindings
      x-y-operation-metadata:
        $ref: '#/components/schemas/UpdateAccessBindingsMetadata'
      x-y-operation-response: Empty
  /functions/v1/functions/{functionId}/scalingPolicies:
    get:
      tags:
      - Function
      summary: Lists existing scaling policies for specified function
      operationId: FunctionListScalingPolicies
      parameters:
      - name: functionId
        in: path
        description: |-
          Required.
          ID of the function to retrieve scaling policies for.

          To get a function ID, make a [list](/docs/functions/functions/api-ref/Function/list) request.
        required: true
        schema:
          type: string
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page that should be returned. If the number of available
          results is larger than `pageSize`, the service returns a [nextPageToken](/docs/functions/functions/api-ref/Function/listScalingPolicies#responses)
          that can be used to get the next page of results in subsequent list requests.

          Default value: 100.

          Acceptable values are 0 to 1000, inclusive.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token. To get the next page of results, set `pageToken` to the
          [nextPageToken](/docs/functions/functions/api-ref/Function/listScalingPolicies#responses) returned by a previous list request.

          The maximum string length in characters is 100.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListScalingPoliciesResponse'
      x-y-navtitle: listScalingPolicies
  /functions/v1/functions/{functionId}:setScalingPolicy:
    post:
      tags:
      - Function
      summary: Set scaling policy for specified function and tag
      operationId: FunctionSetScalingPolicy
      parameters:
      - name: functionId
        in: path
        description: |-
          Required.
          ID of the function to retrieve scaling policies for.

          To get a function ID, make a [list](/docs/functions/functions/api-ref/Function/list) request.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetScalingPolicyRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: setScalingPolicy
      x-y-operation-metadata:
        $ref: '#/components/schemas/SetScalingPolicyMetadata'
      x-y-operation-response: '`ScalingPolicy`'
  /functions/v1/functions/{functionId}:removeScalingPolicy:
    post:
      tags:
      - Function
      summary: Remove scaling policy for specified function and tag
      operationId: FunctionRemoveScalingPolicy
      parameters:
      - name: functionId
        in: path
        description: |-
          Required.
          ID of the function to remove scaling policies for.

          To get a function ID, make a [list](/docs/functions/functions/api-ref/Function/list) request.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveScalingPolicyRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: removeScalingPolicy
      x-y-operation-metadata:
        $ref: '#/components/schemas/RemoveScalingPolicyMetadata'
      x-y-operation-response: Empty
components:
  schemas:
    AccessBinding:
      type: object
      properties:
        roleId:
          description: |-
            Required.
            ID of the [Role](/docs/iam/api-ref/Role#representation) that is assigned to the `subject`.

            The maximum string length in characters is 50.
          type: string
        subject:
          $ref: '#/components/schemas/Subject_in_AccessBinding_subject'
    AccessBindingAction:
      description: |2-
         - ADD: Addition of an access binding.
         - REMOVE: Removal of an access binding.
      type: string
      enum:
      - ADD
      - REMOVE
    AccessBindingDelta:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/AccessBindingAction_in_AccessBindingDelta_action'
        accessBinding:
          $ref: '#/components/schemas/AccessBinding_in_AccessBindingDelta_accessBinding'
    Connectivity:
      description: Version connectivity specification.
      type: object
      properties:
        networkId:
          description: |-
            Network the version will have access to.
            It's essential to specify network with subnets in all availability zones.
          type: string
        subnetId:
          description: |-
            Complete list of subnets (from the same network) the version can be attached to.
            It's essential to specify at least one subnet for each availability zones.
          type: array
          items:
            type: string
    CreateFunctionMetadata:
      type: object
      properties:
        functionId:
          description: ID of the function that is being created.
          type: string
    CreateFunctionRequest:
      type: object
      properties:
        folderId:
          description: |-
            Required.
            ID of the folder to create a function in.

            To get a folder ID make a [list](/docs/resource-manager/api-ref/Folder/list) request.
          type: string
        name:
          description: |-
            Name of the function.
            The name must be unique within the folder.

            Value must match the regular expression `` |[a-z][-a-z0-9]{1,61}[a-z0-9] ``.
          type: string
        description:
          description: |-
            Description of the function.

            The maximum string length in characters is 256.
          type: string
        labels:
          description: |-
            Resource labels as `key:value` pairs.

            No more than 64 per resource.
            The string length in characters for each key must be 1-63.
            Each key must match the regular expression `` [a-z][-_0-9a-z]* ``.
            The maximum string length in characters for each value is 63.
            Each value must match the regular expression `` [-_0-9a-z]* ``.
          type: object
          additionalProperties:
            type: string
    CreateFunctionVersionMetadata:
      type: object
      properties:
        functionVersionId:
          description: ID of the version that is being created.
          type: string
    CreateFunctionVersionRequest:
      type: object
      allOf:
      - type: object
        properties:
          functionId:
            description: |-
              Required.
              ID of the function to create a version for.

              To get a function ID, make a [list](/docs/functions/functions/api-ref/Function/list) request.
            type: string
          runtime:
            description: |-
              Required.
              Runtime environment for the version.
            type: string
          description:
            description: |-
              Description of the version

              The string length in characters must be 0-256.
            type: string
          entrypoint:
            description: |-
              Required.
              Entrypoint of the version.
            type: string
          resources:
            $ref: '#/components/schemas/Resources'
            description: |-
              Required.
              Resources allocated to the version.
          executionTimeout:
            description: |-
              Required.
              Timeout for the execution of the version.

              If the timeout is exceeded, Cloud Functions responds with a 504 HTTP code.
            type: string
          serviceAccountId:
            description: ID of the service account to associate with the version.
            type: string
          environment:
            description: |-
              Environment settings for the version.

              Each key must match the regular expression `` [a-zA-Z][a-zA-Z0-9_]* ``.
              The maximum string length in characters for each value is 4096.
            type: object
            additionalProperties:
              type: string
          tag:
            description: |-
              Function version tags. For details, see [Version tag](/docs/functions/concepts/function#tag).

              Each value must match the regular expression `` [a-z][-_0-9a-z]* ``.
            type: array
            items:
              type: string
          connectivity:
            $ref: '#/components/schemas/Connectivity'
            description: Function version connectivity. If specified the version will
              be attached to specified network/subnet(s).
          namedServiceAccounts:
            description: Additional service accounts to be used by the version.
            type: object
            additionalProperties:
              type: string
          secrets:
            description: Lockbox secrets to be used by the version
            type: array
            items:
              $ref: '#/components/schemas/Secret'
      - title: package_source
        type: object
        maxProperties: 1
        properties:
          package:
            $ref: '#/components/schemas/Package'
            description: Functions deployment package.
          content:
            description: |-
              Content of the deployment package.

              The maximum string length in characters is 52428800.
            type: string
            format: byte
          versionId:
            description: |-
              ID of the version to be copied from. Source version must belong to the same folder as the created version
              and the user must have read permissions to the source version.
            type: string
    DeleteFunctionMetadata:
      type: object
      properties:
        functionId:
          description: ID of the function that is being deleted.
          type: string
    Empty:
      description: Empty JSON object `` {} ``.
      type: object
      maxProperties: 0
    FieldMask:
      description: |-
        A comma-separated names off ALL fields to be updated.
        Оnly the specified fields will be changed. The others will be left untouched.
        If the field is specified in `` updateMask `` and no value for that field was sent in the request,
        the field's value will be reset to the default. The default value for most fields is null or 0.

        If `` updateMask `` is not sent in the request, all fields' values will be updated.
        Fields specified in the request will be updated to provided values.
        The rest of the fields will be reset to the default.
      type: string
    Function:
      description: A serverless function. For details about the concept, see [Functions](/docs/functions/concepts/function).
      type: object
      properties:
        id:
          description: ID of the function. Generated at creation time.
          type: string
        folderId:
          description: ID of the folder that the function belongs to.
          type: string
        createdAt:
          description: |-
            Creation timestamp for the function.

            String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
          type: string
          format: date-time
        name:
          description: |-
            Name of the function. The name is unique within the folder.

            The string length in characters must be 3-63.
          type: string
        description:
          description: |-
            Description of the function.

            The string length in characters must be 0-256.
          type: string
        labels:
          description: |-
            Function labels as `key:value` pairs.

            No more than 64 per resource.
          type: object
          additionalProperties:
            type: string
        logGroupId:
          description: ID of the log group for the function.
          type: string
        httpInvokeUrl:
          description: URL that needs to be requested to invoke the function.
          type: string
        status:
          $ref: '#/components/schemas/FunctionStatus_in_Function_status'
    FunctionStatus:
      description: |2-
         - CREATING: Function is being created.
         - ACTIVE: Function is ready to be invoked.
         - DELETING: Function is being deleted.
         - ERROR: Function failed.
      type: string
      enum:
      - CREATING
      - ACTIVE
      - DELETING
      - ERROR
    ListAccessBindingsResponse:
      type: object
      properties:
        accessBindings:
          description: List of access bindings for the specified resource.
          type: array
          items:
            $ref: '#/components/schemas/AccessBinding'
        nextPageToken:
          description: |-
            This token allows you to get the next page of results for list requests. If the number of results
            is larger than [ListAccessBindingsRequest.page_size], use
            the nextPageToken as the value
            for the [ListAccessBindingsRequest.page_token] query parameter
            in the next list request. Each subsequent list request will have its own
            nextPageToken to continue paging through the results.
          type: string
    ListFunctionOperationsResponse:
      type: object
      properties:
        operations:
          description: List of operations for the specified function.
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        nextPageToken:
          description: |-
            Token for getting the next page of the list. If the number of results is greater than
            the specified [pageSize](/docs/functions/functions/api-ref/Function/listOperations#query_params), use `nextPageToken` as the value
            for the [pageToken](/docs/functions/functions/api-ref/Function/listOperations#query_params) parameter in the next list request.

            Each subsequent page will have its own `nextPageToken` to continue paging through the results.
          type: string
    ListFunctionTagHistoryResponse:
      type: object
      properties:
        functionTagHistoryRecord:
          description: Set of relevant tag history records.
          type: array
          items:
            $ref: '#/components/schemas/ListFunctionTagHistoryResponseFunctionTagHistoryRecord'
        nextPageToken:
          description: |-
            Token for getting the next page of the list. If the number of results is greater than
            the specified [pageSize](/docs/functions/functions/api-ref/Function/listTagHistory#query_params), use `nextPageToken` as the value
            for the [pageToken](/docs/functions/functions/api-ref/Function/listTagHistory#query_params) parameter in the next list request.

            Each subsequent page will have its own `nextPageToken` to continue paging through the results.
          type: string
    ListFunctionTagHistoryResponseFunctionTagHistoryRecord:
      description: A record in the tag history.
      type: object
      properties:
        functionId:
          description: ID of the function that the record is about.
          type: string
        functionVersionId:
          description: ID of the function version that the record is about.
          type: string
        tag:
          description: Tag that was set for the version at some point.
          type: string
        effectiveFrom:
          description: |-
            Timestamp when the tag started being active for the function.

            String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
          type: string
          format: date-time
        effectiveTo:
          description: |-
            Timestamp when the tag stopped being active for the function.

            String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
          type: string
          format: date-time
    ListFunctionsResponse:
      type: object
      properties:
        functions:
          description: List of functions in the specified folder.
          type: array
          items:
            $ref: '#/components/schemas/Function'
        nextPageToken:
          description: |-
            Token for getting the next page of the list. If the number of results is greater than
            the specified [pageSize](/docs/functions/functions/api-ref/Function/list#query_params), use `nextPageToken` as the value
            for the [pageToken](/docs/functions/functions/api-ref/Function/list#query_params) parameter in the next list request.

            Each subsequent page will have its own `nextPageToken` to continue paging through the results.
          type: string
    ListFunctionsVersionsResponse:
      type: object
      properties:
        versions:
          description: List of versions for the specified folder or function.
          type: array
          items:
            $ref: '#/components/schemas/Version'
        nextPageToken:
          description: |-
            Token for getting the next page of the list. If the number of results is greater than
            the specified [pageSize](/docs/functions/functions/api-ref/Function/listVersions#query_params), use `nextPageToken` as the value
            for the [pageToken](/docs/functions/functions/api-ref/Function/listVersions#query_params) parameter in the next list request.

            Each subsequent page will have its own `nextPageToken` to continue paging through the results.
          type: string
    ListRuntimesResponse:
      type: object
      properties:
        runtimes:
          description: Runtime environments available for the specified function.
          type: array
          items:
            type: string
    ListScalingPoliciesResponse:
      type: object
      properties:
        scalingPolicies:
          description: Set of relevant scaling policies.
          type: array
          items:
            $ref: '#/components/schemas/ScalingPolicy'
        nextPageToken:
          description: |-
            Token for getting the next page of the list. If the number of results is greater than
            the specified [pageSize](/docs/functions/functions/api-ref/Function/listScalingPolicies#query_params), use `nextPageToken` as the value
            for the [pageToken](/docs/functions/functions/api-ref/Function/listScalingPolicies#query_params) parameter in the next list request.

            Each subsequent page will have its own `nextPageToken` to continue paging through the results.
          type: string
    Operation:
      description: An Operation resource. For more information, see [Operation](/docs/api-design-guide/concepts/operation).
      type: object
      allOf:
      - type: object
        properties:
          id:
            description: ID of the operation.
            type: string
          description:
            description: Description of the operation. 0-256 characters long.
            type: string
          createdAt:
            description: |-
              Creation timestamp.

              String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
            type: string
            format: date-time
          createdBy:
            description: ID of the user or service account who initiated the operation.
            type: string
          modifiedAt:
            description: |-
              The time when the Operation resource was last modified.

              String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
            type: string
            format: date-time
          done:
            description: |-
              If the value is `false`, it means the operation is still in progress.
              If `true`, the operation is completed, and either `error` or `response` is available.
            type: boolean
            format: boolean
          metadata:
            description: |-
              Service-specific metadata associated with the operation.
              It typically contains the ID of the target resource that the operation is performed on.
              Any method that returns a long-running operation should document the metadata type, if any.
            type: object
      - title: result
        type: object
        maxProperties: 1
        properties:
          error:
            $ref: '#/components/schemas/rpcStatus'
            description: The error result of the operation in case of failure or cancellation.
          response:
            description: |-
              The normal response of the operation in case of success.
              If the original method returns no data on success, such as Delete,
              the response is [google.protobuf.Empty](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty).
              If the original method is the standard Create/Update,
              the response should be the target resource of the operation.
              Any method that returns a long-running operation should document the response type, if any.
            type: object
    Package:
      description: Version deployment package.
      type: object
      properties:
        bucketName:
          description: |-
            Required.
            Name of the bucket that stores the code for the version.
          type: string
        objectName:
          description: |-
            Required.
            Name of the object in the bucket that stores the code for the version.
          type: string
        sha256:
          description: SHA256 hash of the version deployment package.
          type: string
    RemoveFunctionTagMetadata:
      type: object
      properties:
        functionVersionId:
          description: ID of the function versions that is being untagged.
          type: string
    RemoveFunctionTagRequest:
      type: object
      properties:
        tag:
          description: |-
            Tag to remove from the specified version.

            Value must match the regular expression `` [a-z][-_0-9a-z]* ``.
          type: string
    RemoveScalingPolicyMetadata:
      type: object
      properties:
        functionId:
          description: ID of the function for which scaling policy was removed.
          type: string
    RemoveScalingPolicyRequest:
      type: object
      properties:
        tag:
          description: |-
            Required.
            Version tag.

            To get the history of version tags make a [listTagHistory](/docs/functions/functions/api-ref/Function/listTagHistory) request.

            Value must match the regular expression `` [a-z][-_0-9a-z]*|[$]latest ``.
          type: string
    Resources:
      description: Resources allocated to a version.
      type: object
      properties:
        memory:
          description: |-
            Amount of memory available to the version, specified in bytes.

            Acceptable values are 134217728 to 4294967296, inclusive.
          type: string
          format: int64
    ScalingPolicy:
      type: object
      properties:
        functionId:
          description: ID of the function that the scaling policy belongs to.
          type: string
        tag:
          description: Tag of the version that the scaling policy belongs to. For
            details, see [Version tag](/docs/functions/concepts/function#tag).
          type: string
        createdAt:
          description: |-
            Creation timestamp for the scaling policy

            String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
          type: string
          format: date-time
        modifiedAt:
          description: |-
            Modification timestamp for the scaling policy

            String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
          type: string
          format: date-time
        provisionedInstancesCount:
          description: |-
            Minimum guaranteed provisioned instances count for all zones in total.
            Billed separately.
          type: string
          format: int64
        zoneInstancesLimit:
          description: |-
            Upper limit for instance count in each zone.
            0 means no limit.
          type: string
          format: int64
        zoneRequestsLimit:
          description: |-
            Upper limit of requests count in each zone.
            0 means no limit.
          type: string
          format: int64
    Secret:
      description: Secret for serverless function
      type: object
      allOf:
      - type: object
        properties:
          id:
            description: ID of lockbox secret
            type: string
          versionId:
            description: ID of secret version
            type: string
          key:
            description: Key in secret's payload, which value to be delivered into
              function environment
            type: string
      - title: reference
        type: object
        maxProperties: 1
        properties:
          environmentVariable:
            description: environment variable in which secret's value to be delivered
            type: string
    SetAccessBindingsMetadata:
      type: object
      properties:
        resourceId:
          description: ID of the resource for which access bindings are being set.
          type: string
    SetAccessBindingsRequest:
      type: object
      properties:
        accessBindings:
          description: |-
            Access bindings to be set. For more information, see [Access Bindings](/docs/iam/concepts/access-control/#access-bindings).

            The maximum number of elements is 1000.
          type: array
          items:
            $ref: '#/components/schemas/AccessBinding'
    SetFunctionTagMetadata:
      type: object
      properties:
        functionVersionId:
          description: ID of the function versions that is being tagged.
          type: string
    SetFunctionTagRequest:
      type: object
      properties:
        tag:
          description: |-
            Tag to set for the version.

            Value must match the regular expression `` [a-z][-_0-9a-z]* ``.
          type: string
    SetScalingPolicyMetadata:
      type: object
      properties:
        functionId:
          description: ID of the function for which scaling policy was set.
          type: string
    SetScalingPolicyRequest:
      type: object
      properties:
        tag:
          description: |-
            Required.
            Version tag.

            To get the history of version tags make a [listTagHistory](/docs/functions/functions/api-ref/Function/listTagHistory) request.

            Value must match the regular expression `` [a-z][-_0-9a-z]*|[$]latest ``.
          type: string
        provisionedInstancesCount:
          description: |-
            Minimum guaranteed provisioned instances count for all zones in total.
            Billed separately.

            Acceptable values are 0 to 1000, inclusive.
          type: string
          format: int64
        zoneInstancesLimit:
          description: |-
            Upper limit for instance count in each zone.
            0 means no limit.

            Acceptable values are 0 to 1000, inclusive.
          type: string
          format: int64
        zoneRequestsLimit:
          description: |-
            Upper limit of requests count in each zone.
            0 means no limit.

            Acceptable values are 0 to 1000, inclusive.
          type: string
          format: int64
    Subject:
      type: object
      properties:
        id:
          description: |-
            Required.
            ID of the subject.

            It can contain one of the following values:
            * `allAuthenticatedUsers`: A special system identifier that represents anyone
               who is authenticated. It can be used only if the `type` is `system`.
            * `allUsers`: A special system identifier that represents anyone. No authentication is required.
               For example, you don't need to specify the IAM token in an API query.
            * `<cloud generated id>`: An identifier that represents a user account.
               It can be used only if the `type` is `userAccount`, `federatedUser` or `serviceAccount`.

            The maximum string length in characters is 50.
          type: string
        type:
          description: |-
            Required.
            Type of the subject.

            It can contain one of the following values:
            * `userAccount`: An account on Yandex or Yandex Connect, added to Yandex Cloud.
            * `serviceAccount`: A service account. This type represents the [ServiceAccount](/docs/iam/api-ref/ServiceAccount#representation) resource.
            * `federatedUser`: A federated account. This type represents a user from an identity federation, like Active Directory.
            * `system`: System group. This type represents several accounts with a common system identifier.

            For more information, see [Subject to which the role is assigned](/docs/iam/concepts/access-control/#subject).

            The maximum string length in characters is 100.
          type: string
    UpdateAccessBindingsMetadata:
      type: object
      properties:
        resourceId:
          description: ID of the resource for which access bindings are being updated.
          type: string
    UpdateAccessBindingsRequest:
      type: object
      properties:
        accessBindingDeltas:
          description: |-
            Required.
            Updates to access bindings.

            The number of elements must be in the range 1-1000.
          type: array
          items:
            $ref: '#/components/schemas/AccessBindingDelta'
    UpdateFunctionMetadata:
      type: object
      properties:
        functionId:
          description: ID of the function that is being updated.
          type: string
    UpdateFunctionRequest:
      type: object
      properties:
        updateMask:
          $ref: '#/components/schemas/FieldMask_in_UpdateFunctionRequest_updateMask'
        name:
          description: |-
            New name for the function.
            The name must be unique within the folder.

            Value must match the regular expression `` |[a-z][-a-z0-9]{1,61}[a-z0-9] ``.
          type: string
        description:
          description: |-
            New description for the function.

            The maximum string length in characters is 256.
          type: string
        labels:
          description: |-
            Function labels as `key:value` pairs.

            Existing set of labels is completely replaced by the provided set, so if you just want
            to add or remove a label, request the current set of labels with a [get](/docs/functions/functions/api-ref/Function/get) request.

            No more than 64 per resource.
            The string length in characters for each key must be 1-63.
            Each key must match the regular expression `` [a-z][-_0-9a-z]* ``.
            The maximum string length in characters for each value is 63.
            Each value must match the regular expression `` [-_0-9a-z]* ``.
          type: object
          additionalProperties:
            type: string
    Version:
      description: Version of a function. For details about the concept, see [Function
        versions](/docs/functions/concepts/function#version).
      type: object
      properties:
        id:
          description: ID of the version.
          type: string
        functionId:
          description: ID of the function that the version belongs to.
          type: string
        description:
          description: |-
            Description of the version.

            The string length in characters must be 0-256.
          type: string
        createdAt:
          description: |-
            Creation timestamp for the version.

            String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
          type: string
          format: date-time
        runtime:
          description: |-
            ID of the runtime environment for the function.

            Supported environments and their identifiers are listed in the [Runtime environments](/docs/functions/concepts/runtime).
          type: string
        entrypoint:
          description: |-
            Entrypoint for the function: the name of the function to be called as the handler.

            Specified in the format `<function file name>.<handler name>`, for example, `index.myFunction`.
          type: string
        resources:
          $ref: '#/components/schemas/Resources_in_Version_resources'
        executionTimeout:
          description: |-
            Timeout for the execution of the version.

            If the timeout is exceeded, Cloud Functions responds with a 504 HTTP code.
          type: string
        serviceAccountId:
          description: ID of the service account associated with the version.
          type: string
        imageSize:
          description: Final size of the deployment package after unpacking.
          type: string
          format: int64
        status:
          $ref: '#/components/schemas/VersionStatus_in_Version_status'
        tags:
          description: Version tags. For details, see [Version tag](/docs/functions/concepts/function#tag).
          type: array
          items:
            type: string
        logGroupId:
          description: ID of the log group for the version.
          type: string
        environment:
          description: Environment settings for the version.
          type: object
          additionalProperties:
            type: string
        connectivity:
          $ref: '#/components/schemas/Connectivity_in_Version_connectivity'
        namedServiceAccounts:
          description: Additional service accounts to be used by the version.
          type: object
          additionalProperties:
            type: string
        secrets:
          description: Lockbox secrets to be used by the version
          type: array
          items:
            $ref: '#/components/schemas/Secret'
    VersionStatus:
      description: |2-
         - CREATING: Version is being created.
         - ACTIVE: Version is ready to use.
      type: string
      enum:
      - CREATING
      - ACTIVE
    rpcStatus:
      description: The error result of the operation in case of failure or cancellation.
      type: object
      properties:
        code:
          description: Error code. An enum value of [google.rpc.Code](https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto).
          type: integer
          format: int32
        message:
          description: An error message.
          type: string
        details:
          description: A list of messages that carry the error details.
          type: array
          items:
            type: object
    Subject_in_AccessBinding_subject:
      description: |-
        Required.
        Identity for which access binding is being created.
        It can represent an account with a unique ID or several accounts with a system identifier.
      type: object
      properties:
        id:
          description: |-
            Required.
            ID of the subject.

            It can contain one of the following values:
            * `allAuthenticatedUsers`: A special system identifier that represents anyone
               who is authenticated. It can be used only if the `type` is `system`.
            * `allUsers`: A special system identifier that represents anyone. No authentication is required.
               For example, you don't need to specify the IAM token in an API query.
            * `<cloud generated id>`: An identifier that represents a user account.
               It can be used only if the `type` is `userAccount`, `federatedUser` or `serviceAccount`.

            The maximum string length in characters is 50.
          type: string
        type:
          description: |-
            Required.
            Type of the subject.

            It can contain one of the following values:
            * `userAccount`: An account on Yandex or Yandex Connect, added to Yandex Cloud.
            * `serviceAccount`: A service account. This type represents the [ServiceAccount](/docs/iam/api-ref/ServiceAccount#representation) resource.
            * `federatedUser`: A federated account. This type represents a user from an identity federation, like Active Directory.
            * `system`: System group. This type represents several accounts with a common system identifier.

            For more information, see [Subject to which the role is assigned](/docs/iam/concepts/access-control/#subject).

            The maximum string length in characters is 100.
          type: string
    AccessBindingAction_in_AccessBindingDelta_action:
      description: |-
        Required.
        The action that is being performed on an access binding.

         - ADD: Addition of an access binding.
         - REMOVE: Removal of an access binding.
      type: string
      enum:
      - ADD
      - REMOVE
    AccessBinding_in_AccessBindingDelta_accessBinding:
      description: |-
        Required.
        Access binding. For more information, see [Access Bindings](/docs/iam/concepts/access-control/#access-bindings).
      type: object
      properties:
        roleId:
          description: |-
            Required.
            ID of the [Role](/docs/iam/api-ref/Role#representation) that is assigned to the `subject`.

            The maximum string length in characters is 50.
          type: string
        subject:
          $ref: '#/components/schemas/Subject_in_AccessBinding_subject'
    FunctionStatus_in_Function_status:
      description: |-
        Status of the function.

         - CREATING: Function is being created.
         - ACTIVE: Function is ready to be invoked.
         - DELETING: Function is being deleted.
         - ERROR: Function failed.
      type: string
      enum:
      - CREATING
      - ACTIVE
      - DELETING
      - ERROR
    FieldMask_in_UpdateFunctionRequest_updateMask:
      description: |-
        Field mask that specifies which attributes of the function should be updated.

        A comma-separated names off ALL fields to be updated.
        Оnly the specified fields will be changed. The others will be left untouched.
        If the field is specified in `` updateMask `` and no value for that field was sent in the request,
        the field's value will be reset to the default. The default value for most fields is null or 0.

        If `` updateMask `` is not sent in the request, all fields' values will be updated.
        Fields specified in the request will be updated to provided values.
        The rest of the fields will be reset to the default.
      type: string
    Resources_in_Version_resources:
      description: |-
        Resources allocated to the version.

        Resources allocated to a version.
      type: object
      properties:
        memory:
          description: |-
            Amount of memory available to the version, specified in bytes.

            Acceptable values are 134217728 to 4294967296, inclusive.
          type: string
          format: int64
    VersionStatus_in_Version_status:
      description: |-
        Status of the version.

         - CREATING: Version is being created.
         - ACTIVE: Version is ready to use.
      type: string
      enum:
      - CREATING
      - ACTIVE
    Connectivity_in_Version_connectivity:
      description: |-
        Network access. If specified the version will be attached to specified network/subnet(s).

        Version connectivity specification.
      type: object
      properties:
        networkId:
          description: |-
            Network the version will have access to.
            It's essential to specify network with subnets in all availability zones.
          type: string
        subnetId:
          description: |-
            Complete list of subnets (from the same network) the version can be attached to.
            It's essential to specify at least one subnet for each availability zones.
          type: array
          items:
            type: string
tags:
- name: Function
  description: A set of methods for managing serverless functions.
