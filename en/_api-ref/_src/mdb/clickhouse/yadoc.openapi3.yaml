openapi: 3.0.0
info:
  title: Managed Service for ClickHouse API
  description: This API reference is organized by resource. Actions are performed
    by sending HTTP requests to resource URLs or making RPC calls. For more information
    about API architecture, see [API Concepts](/docs/api-design-guide/).
  version: v1
  x-y-docUri: api-ref
  x-y-baseUrl: https://mdb.api.cloud.yandex.net
paths:
  /managed-clickhouse/v1/backups/{backupId}:
    get:
      tags:
      - Backup
      summary: Returns the specified ClickHouse Backup resource.
      description: To get the list of available ClickHouse Backup resources, make
        a [list](/docs/managed-clickhouse/api-ref/Backup/list) request.
      operationId: BackupGet
      parameters:
      - name: backupId
        in: path
        description: |-
          Required.
          ID of the backup to return information about.
          To get the backup ID, use a [listBackups](/docs/managed-clickhouse/api-ref/Cluster/listBackups) request.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Backup'
      x-y-navtitle: get
  /managed-clickhouse/v1/backups:
    get:
      tags:
      - Backup
      summary: Retrieves the list of Backup resources available for the specified
        folder.
      operationId: BackupList
      parameters:
      - name: folderId
        in: query
        description: |-
          Required.
          ID of the folder to list backups in.
          To get the folder ID, use a [list](/docs/resource-manager/api-ref/Folder/list) request.

          The maximum string length in characters is 50.
        schema:
          type: string
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page to return. If the number of available
          results is larger than [pageSize](/docs/managed-clickhouse/api-ref/Backup/list#query_params), the service returns a [nextPageToken](/docs/managed-clickhouse/api-ref/Backup/list#responses)
          that can be used to get the next page of results in subsequent list requests.

          The maximum value is 1000.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token. To get the next page of results, set [pageToken](/docs/managed-clickhouse/api-ref/Backup/list#query_params) to the [nextPageToken](/docs/managed-clickhouse/api-ref/Backup/list#responses)
          returned by the previous list request.

          The maximum string length in characters is 100.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBackupsResponse'
      x-y-navtitle: list
  /managed-clickhouse/v1/clusters/{clusterId}:
    get:
      tags:
      - Cluster
      summary: Returns the specified ClickHouse cluster.
      description: To get the list of available ClickHouse clusters, make a [list](/docs/managed-clickhouse/api-ref/Cluster/list)
        request.
      operationId: ClusterGet
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse Cluster resource to return.
          To get the cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
      x-y-navtitle: get
    delete:
      tags:
      - Cluster
      summary: Deletes the specified ClickHouse cluster.
      operationId: ClusterDelete
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to delete.
          To get the ClickHouse cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: delete
      x-y-operation-metadata:
        $ref: '#/components/schemas/DeleteClusterMetadata'
      x-y-operation-response: Empty
    patch:
      tags:
      - Cluster
      summary: Updates the specified ClickHouse cluster.
      operationId: ClusterUpdate
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse Cluster resource to update.
          To get the ClickHouse cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClusterRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: update
      x-y-operation-metadata:
        $ref: '#/components/schemas/UpdateClusterMetadata'
      x-y-operation-response: '[Cluster](/docs/managed-clickhouse/api-ref/Cluster#representation)'
  /managed-clickhouse/v1/clusters:
    get:
      tags:
      - Cluster
      summary: |-
        Retrieves a list of ClickHouse clusters that belong
        to the specified folder.
      operationId: ClusterList
      parameters:
      - name: folderId
        in: query
        description: |-
          Required.
          ID of the folder to list ClickHouse clusters in.
          To get the folder ID, use a [list](/docs/resource-manager/api-ref/Folder/list) request.

          The maximum string length in characters is 50.
        schema:
          type: string
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page to return. If the number of available
          results is larger than [pageSize](/docs/managed-clickhouse/api-ref/Cluster/list#query_params), the service returns a [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/list#responses)
          that can be used to get the next page of results in subsequent list requests.

          The maximum value is 1000.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token. To get the next page of results, set [pageToken](/docs/managed-clickhouse/api-ref/Cluster/list#query_params) to the [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/list#responses)
          returned by the previous list request.

          The maximum string length in characters is 100.
        schema:
          type: string
      - name: filter
        in: query
        description: |-
          A filter expression that filters resources listed in the response.
          The expression must specify:
          1. The field name. Currently you can only use filtering with the [Cluster.name](/docs/managed-clickhouse/api-ref/Cluster#representation) field.
          2. An `=` operator.
          3. The value in double quotes (`"`). Must be 1-63 characters long and match the regular expression `[a-zA-Z0-9_-]+`.

          The maximum string length in characters is 1000.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClustersResponse'
      x-y-navtitle: list
    post:
      tags:
      - Cluster
      summary: Creates a ClickHouse cluster in the specified folder.
      operationId: ClusterCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClusterRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: create
      x-y-operation-metadata:
        $ref: '#/components/schemas/CreateClusterMetadata'
      x-y-operation-response: '[Cluster](/docs/managed-clickhouse/api-ref/Cluster#representation)'
  /managed-clickhouse/v1/clusters/{clusterId}:start:
    post:
      tags:
      - Cluster
      summary: Starts the specified ClickHouse cluster.
      operationId: ClusterStart
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to start.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: start
      x-y-operation-metadata:
        $ref: '#/components/schemas/StartClusterMetadata'
      x-y-operation-response: '[Cluster](/docs/managed-clickhouse/api-ref/Cluster#representation)'
  /managed-clickhouse/v1/clusters/{clusterId}:stop:
    post:
      tags:
      - Cluster
      summary: Stops the specified ClickHouse cluster.
      operationId: ClusterStop
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to stop.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: stop
      x-y-operation-metadata:
        $ref: '#/components/schemas/StopClusterMetadata'
      x-y-operation-response: '[Cluster](/docs/managed-clickhouse/api-ref/Cluster#representation)'
  /managed-clickhouse/v1/clusters/{clusterId}:move:
    post:
      tags:
      - Cluster
      summary: Moves a ClickHouse cluster to the specified folder.
      operationId: ClusterMove
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to move.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveClusterRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: move
      x-y-operation-metadata:
        $ref: '#/components/schemas/MoveClusterMetadata'
      x-y-operation-response: '[Cluster](/docs/managed-clickhouse/api-ref/Cluster#representation)'
  /managed-clickhouse/v1/clusters/{clusterId}:addZookeeper:
    post:
      tags:
      - Cluster
      summary: Adds a ZooKeeper subcluster to the specified ClickHouse cluster.
      operationId: ClusterAddZookeeper
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to modify.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddClusterZookeeperRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: addZookeeper
      x-y-operation-metadata:
        $ref: '#/components/schemas/AddClusterZookeeperMetadata'
      x-y-operation-response: '[Cluster](/docs/managed-clickhouse/api-ref/Cluster#representation)'
  /managed-clickhouse/v1/clusters/{clusterId}:backup:
    post:
      tags:
      - Cluster
      summary: Creates a backup for the specified ClickHouse cluster.
      operationId: ClusterBackup
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to back up.
          To get the ClickHouse cluster ID use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: backup
      x-y-operation-metadata:
        $ref: '#/components/schemas/BackupClusterMetadata'
      x-y-operation-response: '[Cluster](/docs/managed-clickhouse/api-ref/Cluster#representation)'
  /managed-clickhouse/v1/clusters:restore:
    post:
      tags:
      - Cluster
      summary: Creates a new ClickHouse cluster using the specified backup.
      operationId: ClusterRestore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreClusterRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: restore
      x-y-operation-metadata:
        $ref: '#/components/schemas/RestoreClusterMetadata'
      x-y-operation-response: '[Cluster](/docs/managed-clickhouse/api-ref/Cluster#representation)'
  /managed-clickhouse/v1/clusters/{clusterId}:rescheduleMaintenance:
    post:
      tags:
      - Cluster
      summary: Reschedules planned maintenance operation.
      operationId: ClusterRescheduleMaintenance
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to reschedule the maintenance operation for.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RescheduleMaintenanceRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: rescheduleMaintenance
      x-y-operation-metadata:
        $ref: '#/components/schemas/RescheduleMaintenanceMetadata'
      x-y-operation-response: '[Cluster](/docs/managed-clickhouse/api-ref/Cluster#representation)'
  /managed-clickhouse/v1/clusters/{clusterId}:logs:
    get:
      tags:
      - Cluster
      summary: Retrieves logs for the specified ClickHouse cluster.
      operationId: ClusterListLogs
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to request logs for.
          To get the ClickHouse cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: columnFilter
        in: query
        description: |-
          Columns from logs table to request.
          If no columns are specified, entire log records are returned.
        schema:
          type: array
          items:
            type: string
      - name: serviceType
        in: query
        description: Type of the service to request logs about.
        schema:
          $ref: '#/components/schemas/ListClusterLogsRequestServiceType'
      - name: fromTime
        in: query
        description: |-
          Start timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

          String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
        schema:
          type: string
          format: date-time
      - name: toTime
        in: query
        description: |-
          End timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

          String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
        schema:
          type: string
          format: date-time
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page to return. If the number of available
          results is larger than [pageSize](/docs/managed-clickhouse/api-ref/Cluster/listLogs#query_params), the service returns a [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listLogs#responses)
          that can be used to get the next page of results in subsequent list requests.

          The maximum value is 1000.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token.  To get the next page of results, set [pageToken](/docs/managed-clickhouse/api-ref/Cluster/listLogs#query_params) to the [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listLogs#responses)
          returned by the previous list request.

          The maximum string length in characters is 100.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClusterLogsResponse'
      x-y-navtitle: listLogs
  /managed-clickhouse/v1/clusters/{clusterId}:stream_logs:
    get:
      tags:
      - Cluster
      summary: Same as ListLogs but using server-side streaming. Also allows for `tail
        -f` semantics.
      operationId: ClusterStreamLogs
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          Required. ID of the ClickHouse cluster.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: columnFilter
        in: query
        description: Columns from logs table to get in the response.
        schema:
          type: array
          items:
            type: string
      - name: serviceType
        in: query
        schema:
          $ref: '#/components/schemas/StreamClusterLogsRequestServiceType'
      - name: fromTime
        in: query
        description: |-
          Start timestamp for the logs request.

          String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
        schema:
          type: string
          format: date-time
      - name: toTime
        in: query
        description: |-
          End timestamp for the logs request.
          If this field is not set, all existing logs will be sent and then the new ones as
          they appear. In essence it has `tail -f` semantics.

          String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
        schema:
          type: string
          format: date-time
      - name: recordToken
        in: query
        description: |-
          Record token. Set [recordToken](/docs/managed-clickhouse/api-ref/Cluster/streamLogs#query_params) to the `nextRecordToken` returned by a previous StreamLogs
          request to start streaming from next log record.

          The maximum string length in characters is 100.
        schema:
          type: string
      - name: filter
        in: query
        description: |-
          A filter expression that filters resources listed in the response.
          The expression must specify:
          1. The field name. Currently filtering can be applied to the [LogRecord.logs.message.hostname], [LogRecord.logs.message.severity] fields.
          2. An `=` operator.
          3. The value in double quotes (`"`). Must be 1-63 characters long and match the regular expression `[a-z0-9.-]{1,61}`.
          Examples of a filter:
          - `message.hostname='node1.db.cloud.yandex.net'`
          - `message.severity IN ('Error', 'Fatal') AND message.hostname != 'node2.db.cloud.yandex.net'`.

          The maximum string length in characters is 1000.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamLogRecord'
      x-y-navtitle: streamLogs
  /managed-clickhouse/v1/clusters/{clusterId}/operations:
    get:
      tags:
      - Cluster
      summary: Retrieves the list of Operation resources for the specified cluster.
      operationId: ClusterListOperations
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse Cluster resource to list operations for.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page to return. If the number of available
          results is larger than [pageSize](/docs/managed-clickhouse/api-ref/Cluster/listOperations#query_params), the service returns a [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listOperations#responses)
          that can be used to get the next page of results in subsequent list requests.

          The maximum value is 1000.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token.  To get the next page of results, set [pageToken](/docs/managed-clickhouse/api-ref/Cluster/listOperations#query_params) to the [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listOperations#responses)
          returned by the previous list request.

          The maximum string length in characters is 100.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClusterOperationsResponse'
      x-y-navtitle: listOperations
  /managed-clickhouse/v1/clusters/{clusterId}/backups:
    get:
      tags:
      - Cluster
      summary: Retrieves the list of available backups for the specified ClickHouse
        cluster.
      operationId: ClusterListBackups
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster.
          To get the ClickHouse cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page to return. If the number of available
          results is larger than [pageSize](/docs/managed-clickhouse/api-ref/Cluster/listBackups#query_params), the service returns a [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listBackups#responses)
          that can be used to get the next page of results in subsequent list requests.

          The maximum value is 1000.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token. To get the next page of results, set [pageToken](/docs/managed-clickhouse/api-ref/Cluster/listBackups#query_params) to the
          [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listBackups#responses) returned by the previous list request.

          The maximum string length in characters is 100.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClusterBackupsResponse'
      x-y-navtitle: listBackups
  /managed-clickhouse/v1/clusters/{clusterId}/hosts:
    get:
      tags:
      - Cluster
      summary: Retrieves a list of hosts for the specified cluster.
      operationId: ClusterListHosts
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster.
          To get the ClickHouse cluster ID use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page to return. If the number of available
          results is larger than [pageSize](/docs/managed-clickhouse/api-ref/Cluster/listHosts#query_params), the service returns a [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listHosts#responses)
          that can be used to get the next page of results in subsequent list requests.

          The maximum value is 1000.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token.  To get the next page of results, set [pageToken](/docs/managed-clickhouse/api-ref/Cluster/listHosts#query_params) to the [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listHosts#responses)
          returned by the previous list request.

          The maximum string length in characters is 100.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClusterHostsResponse'
      x-y-navtitle: listHosts
  /managed-clickhouse/v1/clusters/{clusterId}/hosts:batchCreate:
    post:
      tags:
      - Cluster
      summary: Creates new hosts for a cluster.
      operationId: ClusterAddHosts
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to add hosts to.
          To get the ClickHouse cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddClusterHostsRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: addHosts
      x-y-operation-metadata:
        $ref: '#/components/schemas/AddClusterHostsMetadata'
      x-y-operation-response: Empty
  /managed-clickhouse/v1/clusters/{clusterId}/hosts:batchUpdate:
    post:
      tags:
      - Cluster
      summary: Updates the specified hosts.
      operationId: ClusterUpdateHosts
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to update hosts in.
          To get the ClickHouse cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClusterHostsRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: updateHosts
      x-y-operation-metadata:
        $ref: '#/components/schemas/UpdateClusterHostsMetadata'
      x-y-operation-response: Empty
  /managed-clickhouse/v1/clusters/{clusterId}/hosts:batchDelete:
    post:
      tags:
      - Cluster
      summary: Deletes the specified hosts for a cluster.
      operationId: ClusterDeleteHosts
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to remove hosts from.
          To get the ClickHouse cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteClusterHostsRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: deleteHosts
      x-y-operation-metadata:
        $ref: '#/components/schemas/DeleteClusterHostsMetadata'
      x-y-operation-response: Empty
  /managed-clickhouse/v1/clusters/{clusterId}/shards/{shardName}:
    get:
      tags:
      - Cluster
      summary: Returns the specified shard.
      operationId: ClusterGetShard
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the cluster that the shard belongs to.
          To get the cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.
          To get the name of the database, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: shardName
        in: path
        description: |-
          Required.
          Name of the shard to request information about.
          To get the name of a shard, use a [listShards](/docs/managed-clickhouse/api-ref/Cluster/listShards) request.

          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shard'
      x-y-navtitle: getShard
    delete:
      tags:
      - Cluster
      summary: Deletes the specified shard.
      operationId: ClusterDeleteShard
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster the shard belongs to.
          To get the cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: shardName
        in: path
        description: |-
          Required.
          Name of the shard to be deleted.
          To get the name of a shard, use a [listShards](/docs/managed-clickhouse/api-ref/Cluster/listShards) request.

          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: deleteShard
      x-y-operation-metadata:
        $ref: '#/components/schemas/DeleteClusterShardMetadata'
      x-y-operation-response: Empty
    patch:
      tags:
      - Cluster
      summary: Modifies the specified shard.
      operationId: ClusterUpdateShard
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster the shard belongs to.
          To get the cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: shardName
        in: path
        description: |-
          Required.
          Name of the shard to be updated.
          To get the name of a shard, use a [listShards](/docs/managed-clickhouse/api-ref/Cluster/listShards) request.

          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClusterShardRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: updateShard
      x-y-operation-metadata:
        $ref: '#/components/schemas/UpdateClusterShardMetadata'
      x-y-operation-response: '`Shard`'
  /managed-clickhouse/v1/clusters/{clusterId}/shards:
    get:
      tags:
      - Cluster
      summary: Retrieves a list of shards that belong to the specified cluster.
      operationId: ClusterListShards
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to list shards in.
          To get the cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page to return. If the number of available
          results is larger than [pageSize](/docs/managed-clickhouse/api-ref/Cluster/listShards#query_params), the service returns a [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listShards#responses)
          that can be used to get the next page of results in subsequent list requests.

          Acceptable values are 0 to 1000, inclusive.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token.  to get the next page of results, set [pageToken](/docs/managed-clickhouse/api-ref/Cluster/listShards#query_params) to the [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listShards#responses)
          returned by the previous list request.

          The maximum string length in characters is 100.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClusterShardsResponse'
      x-y-navtitle: listShards
    post:
      tags:
      - Cluster
      summary: Creates a new shard in the specified cluster.
      operationId: ClusterAddShard
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to add a shard to.
          To get the ClickHouse cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddClusterShardRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: addShard
      x-y-operation-metadata:
        $ref: '#/components/schemas/AddClusterShardMetadata'
      x-y-operation-response: '`Shard`'
  /managed-clickhouse/v1/clusters/{clusterId}/shardGroups/{shardGroupName}:
    get:
      tags:
      - Cluster
      summary: Returns the specified shard group.
      operationId: ClusterGetShardGroup
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the cluster that the shard group belongs to.

          To get the cluster ID, make a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: shardGroupName
        in: path
        description: |-
          Required.
          Name of the shard group to request information about.

          To get the name of a shard group, make a [listShardGroups](/docs/managed-clickhouse/api-ref/Cluster/listShardGroups) request.

          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShardGroup'
      x-y-navtitle: getShardGroup
    delete:
      tags:
      - Cluster
      summary: Deletes the specified shard group.
      operationId: ClusterDeleteShardGroup
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster that contains the shard group to delete.

          To get the cluster ID, make a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: shardGroupName
        in: path
        description: |-
          Required.
          Name of the shard group that should be deleted.

          To get the name, make a [listShardGroups](/docs/managed-clickhouse/api-ref/Cluster/listShardGroups) request.

          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: deleteShardGroup
      x-y-operation-metadata:
        $ref: '#/components/schemas/DeleteClusterShardGroupMetadata'
      x-y-operation-response: Empty
    patch:
      tags:
      - Cluster
      summary: Updates the specified shard group.
      operationId: ClusterUpdateShardGroup
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster that contains the shard group to update.

          To get the cluster ID, make a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: shardGroupName
        in: path
        description: |-
          Required.
          Name of the shard group that should be updated.

          To get the name, make a [listShardGroups](/docs/managed-clickhouse/api-ref/Cluster/listShardGroups) request.

          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClusterShardGroupRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: updateShardGroup
      x-y-operation-metadata:
        $ref: '#/components/schemas/UpdateClusterShardGroupMetadata'
      x-y-operation-response: '`ShardGroup`'
  /managed-clickhouse/v1/clusters/{clusterId}/shardGroups:
    get:
      tags:
      - Cluster
      summary: Retrieves a list of shard groups that belong to specified cluster.
      operationId: ClusterListShardGroups
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the cluster that the shard group belongs to.

          To get the cluster ID, make a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page to return.

          If the number of available results is larger than [pageSize](/docs/managed-clickhouse/api-ref/Cluster/listShardGroups#query_params), the service returns a [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listShardGroups#responses) that can be used to get the next page of results in subsequent list requests.

          Acceptable values are 0 to 1000, inclusive.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token.

          To get the next page of results, set [pageToken](/docs/managed-clickhouse/api-ref/Cluster/listShardGroups#query_params) to the [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listShardGroups#responses) returned by the previous list request.

          The maximum string length in characters is 100.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClusterShardGroupsResponse'
      x-y-navtitle: listShardGroups
    post:
      tags:
      - Cluster
      summary: Creates a new shard group in the specified cluster.
      operationId: ClusterCreateShardGroup
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to add a shard group to.

          To get the cluster ID, make a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClusterShardGroupRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: createShardGroup
      x-y-operation-metadata:
        $ref: '#/components/schemas/CreateClusterShardGroupMetadata'
      x-y-operation-response: '`ShardGroup`'
  /managed-clickhouse/v1/clusters/{clusterId}:createExternalDictionary:
    post:
      tags:
      - Cluster
      summary: Creates an external dictionary for the specified ClickHouse cluster.
      operationId: ClusterCreateExternalDictionary
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to create the external dictionary for.
          To get the cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClusterExternalDictionaryRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: createExternalDictionary
      x-y-operation-metadata:
        $ref: '#/components/schemas/CreateClusterExternalDictionaryMetadata'
      x-y-operation-response: '[Cluster](/docs/managed-clickhouse/api-ref/Cluster#representation)'
  /managed-clickhouse/v1/clusters/{clusterId}:deleteExternalDictionary:
    post:
      tags:
      - Cluster
      summary: Deletes the specified external dictionary.
      operationId: ClusterDeleteExternalDictionary
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to delete the external dictionary from.
          To get the cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteClusterExternalDictionaryRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: deleteExternalDictionary
      x-y-operation-metadata:
        $ref: '#/components/schemas/DeleteClusterExternalDictionaryMetadata'
      x-y-operation-response: '[Cluster](/docs/managed-clickhouse/api-ref/Cluster#representation)'
  /managed-clickhouse/v1/clusters/{clusterId}/databases/{databaseName}:
    get:
      tags:
      - Database
      summary: Returns the specified ClickHouse Database resource.
      description: To get the list of available ClickHouse Database resources, make
        a [list](/docs/managed-clickhouse/api-ref/Database/list) request.
      operationId: DatabaseGet
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster that the database belongs to.
          To get the cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: databaseName
        in: path
        description: |-
          Required.
          Name of the ClickHouse Database resource to return.
          To get the name of the database, use a [list](/docs/managed-clickhouse/api-ref/Database/list) request.

          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
      x-y-navtitle: get
    delete:
      tags:
      - Database
      summary: Deletes the specified ClickHouse database.
      operationId: DatabaseDelete
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to delete a database in.
          To get the cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: databaseName
        in: path
        description: |-
          Required.
          Name of the database to delete.
          To get the name of the database, use a [list](/docs/managed-clickhouse/api-ref/Database/list) request.

          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: delete
      x-y-operation-metadata:
        $ref: '#/components/schemas/DeleteDatabaseMetadata'
      x-y-operation-response: Empty
  /managed-clickhouse/v1/clusters/{clusterId}/databases:
    get:
      tags:
      - Database
      summary: Retrieves the list of ClickHouse Database resources in the specified
        cluster.
      operationId: DatabaseList
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to list databases in.
          To get the cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page to return. If the number of available
          results is larger than [pageSize](/docs/managed-clickhouse/api-ref/Database/list#query_params), the service returns a [nextPageToken](/docs/managed-clickhouse/api-ref/Database/list#responses)
          that can be used to get the next page of results in subsequent list requests.

          The maximum value is 1000.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token.  to get the next page of results, set [pageToken](/docs/managed-clickhouse/api-ref/Database/list#query_params) to the [nextPageToken](/docs/managed-clickhouse/api-ref/Database/list#responses)
          returned by the previous list request.

          The maximum string length in characters is 100.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDatabasesResponse'
      x-y-navtitle: list
    post:
      tags:
      - Database
      summary: Creates a new ClickHouse database in the specified cluster.
      operationId: DatabaseCreate
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to create a database in.
          To get the cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatabaseRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: create
      x-y-operation-metadata:
        $ref: '#/components/schemas/CreateDatabaseMetadata'
      x-y-operation-response: '[Database](/docs/managed-clickhouse/api-ref/Database#representation)'
  /managed-clickhouse/v1/clusters/{clusterId}/formatSchemas/{formatSchemaName}:
    get:
      tags:
      - FormatSchema
      operationId: FormatSchemaGet
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: formatSchemaName
        in: path
        description: |-
          Required.
          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormatSchema'
      x-y-navtitle: get
    delete:
      tags:
      - FormatSchema
      operationId: FormatSchemaDelete
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: formatSchemaName
        in: path
        description: |-
          Required.
          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: delete
      x-y-operation-metadata:
        $ref: '#/components/schemas/DeleteFormatSchemaMetadata'
      x-y-operation-response: Empty
    patch:
      tags:
      - FormatSchema
      operationId: FormatSchemaUpdate
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: formatSchemaName
        in: path
        description: |-
          Required.
          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFormatSchemaRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: update
      x-y-operation-metadata:
        $ref: '#/components/schemas/UpdateFormatSchemaMetadata'
      x-y-operation-response: '[FormatSchema](/docs/managed-clickhouse/api-ref/FormatSchema#representation)'
  /managed-clickhouse/v1/clusters/{clusterId}/formatSchemas:
    get:
      tags:
      - FormatSchema
      operationId: FormatSchemaList
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: pageSize
        in: query
        description: The maximum value is 1000.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: The maximum string length in characters is 100.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFormatSchemasResponse'
      x-y-navtitle: list
    post:
      tags:
      - FormatSchema
      operationId: FormatSchemaCreate
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFormatSchemaRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: create
      x-y-operation-metadata:
        $ref: '#/components/schemas/CreateFormatSchemaMetadata'
      x-y-operation-response: '[FormatSchema](/docs/managed-clickhouse/api-ref/FormatSchema#representation)'
  /managed-clickhouse/v1/clusters/{clusterId}/mlModels/{mlModelName}:
    get:
      tags:
      - MlModel
      summary: Returns the specified machine learning model.
      description: To get the list of all available models, make a [list](/docs/managed-clickhouse/api-ref/MlModel/list)
        request.
      operationId: MlModelGet
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the cluster that the model belongs to.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: mlModelName
        in: path
        description: |-
          Required.
          Name of the model to return.

          To get a model name make a [list](/docs/managed-clickhouse/api-ref/MlModel/list) request.

          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MlModel'
      x-y-navtitle: get
    delete:
      tags:
      - MlModel
      summary: Deletes the specified machine learning model.
      operationId: MlModelDelete
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the cluster to delete the model in.

          To get a cluster ID make a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: mlModelName
        in: path
        description: |-
          Required.
          Name of the the model to delete.

          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: delete
      x-y-operation-metadata:
        $ref: '#/components/schemas/DeleteMlModelMetadata'
      x-y-operation-response: Empty
    patch:
      tags:
      - MlModel
      summary: Updates the specified machine learning model.
      operationId: MlModelUpdate
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the cluster to update the model in.

          To get a cluster ID make a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: mlModelName
        in: path
        description: |-
          Required.
          Name of the the model to update.

          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMlModelRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: update
      x-y-operation-metadata:
        $ref: '#/components/schemas/UpdateMlModelMetadata'
      x-y-operation-response: '[MlModel](/docs/managed-clickhouse/api-ref/MlModel#representation)'
  /managed-clickhouse/v1/clusters/{clusterId}/mlModels:
    get:
      tags:
      - MlModel
      summary: Retrieves the list of machine learning models in the specified cluster.
      operationId: MlModelList
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the cluster that models belongs to.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page to return. If the number of available
          results is larger than `page_size`, the service returns a [nextPageToken](/docs/managed-clickhouse/api-ref/MlModel/list#responses)
          that can be used to get the next page of results in subsequent list requests.
          Default value: 100.

          The maximum value is 1000.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token. To get the next page of results, set `page_token` to the
          [nextPageToken](/docs/managed-clickhouse/api-ref/MlModel/list#responses) returned by the previous list request.

          The maximum string length in characters is 100.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMlModelsResponse'
      x-y-navtitle: list
    post:
      tags:
      - MlModel
      summary: Creates a machine learning model in the specified cluster.
      operationId: MlModelCreate
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the cluster to create a model in.

          To get a cluster ID make a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMlModelRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: create
      x-y-operation-metadata:
        $ref: '#/components/schemas/CreateMlModelMetadata'
      x-y-operation-response: '[MlModel](/docs/managed-clickhouse/api-ref/MlModel#representation)'
  /managed-clickhouse/v1/resourcePresets/{resourcePresetId}:
    get:
      tags:
      - ResourcePreset
      summary: Returns the specified ResourcePreset resource.
      description: To get the list of available ResourcePreset resources, make a [list](/docs/managed-clickhouse/api-ref/ResourcePreset/list)
        request.
      operationId: ResourcePresetGet
      parameters:
      - name: resourcePresetId
        in: path
        description: |-
          Required.
          ID of the resource preset to return.
          To get the resource preset ID, use a [list](/docs/managed-clickhouse/api-ref/ResourcePreset/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcePreset'
      x-y-navtitle: get
  /managed-clickhouse/v1/resourcePresets:
    get:
      tags:
      - ResourcePreset
      summary: Retrieves the list of available ResourcePreset resources.
      operationId: ResourcePresetList
      parameters:
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page to return. If the number of available
          results is larger than [pageSize](/docs/managed-clickhouse/api-ref/ResourcePreset/list#query_params), the service returns a [nextPageToken](/docs/managed-clickhouse/api-ref/ResourcePreset/list#responses)
          that can be used to get the next page of results in subsequent list requests.

          The maximum value is 1000.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token. To get the next page of results, Set [pageToken](/docs/managed-clickhouse/api-ref/ResourcePreset/list#query_params) to the [nextPageToken](/docs/managed-clickhouse/api-ref/ResourcePreset/list#responses)
          returned by the previous list request.

          The maximum string length in characters is 100.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResourcePresetsResponse'
      x-y-navtitle: list
  /managed-clickhouse/v1/clusters/{clusterId}/users/{userName}:
    get:
      tags:
      - User
      summary: Returns the specified ClickHouse User resource.
      description: To get the list of available ClickHouse User resources, make a
        [list](/docs/managed-clickhouse/api-ref/User/list) request.
      operationId: UserGet
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster the user belongs to.
          To get the cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: userName
        in: path
        description: |-
          Required.
          Name of the ClickHouse User resource to return.
          To get the name of the user, use a [list](/docs/managed-clickhouse/api-ref/User/list) request.

          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_]* ``.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      x-y-navtitle: get
    delete:
      tags:
      - User
      summary: Deletes the specified ClickHouse user.
      operationId: UserDelete
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster the user belongs to.
          To get the cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: userName
        in: path
        description: |-
          Required.
          Name of the user to delete.
          To get the name of the user, use a [list](/docs/managed-clickhouse/api-ref/User/list) request.

          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_]* ``.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: delete
      x-y-operation-metadata:
        $ref: '#/components/schemas/DeleteUserMetadata'
      x-y-operation-response: Empty
    patch:
      tags:
      - User
      summary: Updates the specified ClickHouse user.
      operationId: UserUpdate
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster the user belongs to.
          To get the cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: userName
        in: path
        description: |-
          Required.
          Name of the user to be updated.
          To get the name of the user, use a [list](/docs/managed-clickhouse/api-ref/User/list) request.

          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_]* ``.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: update
      x-y-operation-metadata:
        $ref: '#/components/schemas/UpdateUserMetadata'
      x-y-operation-response: '[User](/docs/managed-clickhouse/api-ref/User#representation)'
  /managed-clickhouse/v1/clusters/{clusterId}/users:
    get:
      tags:
      - User
      summary: Retrieves the list of ClickHouse User resources in the specified cluster.
      operationId: UserList
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the cluster to list ClickHouse users in.
          To get the cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page to return. If the number of available
          results is larger than [pageSize](/docs/managed-clickhouse/api-ref/User/list#query_params), the service returns a [nextPageToken](/docs/managed-clickhouse/api-ref/User/list#responses)
          that can be used to get the next page of results in subsequent list requests.

          The maximum value is 1000.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token.  To get the next page of results, set [pageToken](/docs/managed-clickhouse/api-ref/User/list#query_params) to the [nextPageToken](/docs/managed-clickhouse/api-ref/User/list#responses)
          returned by the previous list request.

          The maximum string length in characters is 100.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
      x-y-navtitle: list
    post:
      tags:
      - User
      summary: Creates a ClickHouse user in the specified cluster.
      operationId: UserCreate
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster to create a user in.
          To get the cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: create
      x-y-operation-metadata:
        $ref: '#/components/schemas/CreateUserMetadata'
      x-y-operation-response: '[User](/docs/managed-clickhouse/api-ref/User#representation)'
  /managed-clickhouse/v1/clusters/{clusterId}/users/{userName}:grantPermission:
    post:
      tags:
      - User
      summary: Grants a permission to the specified ClickHouse user.
      operationId: UserGrantPermission
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster the user belongs to.
          To get the cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: userName
        in: path
        description: |-
          Required.
          Name of the user to grant the permission to.
          To get the name of the user, use a [list](/docs/managed-clickhouse/api-ref/User/list) request.

          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_]* ``.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantUserPermissionRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: grantPermission
      x-y-operation-metadata:
        $ref: '#/components/schemas/GrantUserPermissionMetadata'
      x-y-operation-response: '[User](/docs/managed-clickhouse/api-ref/User#representation)'
  /managed-clickhouse/v1/clusters/{clusterId}/users/{userName}:revokePermission:
    post:
      tags:
      - User
      summary: Revokes a permission from the specified ClickHouse user.
      operationId: UserRevokePermission
      parameters:
      - name: clusterId
        in: path
        description: |-
          Required.
          ID of the ClickHouse cluster the user belongs to.
          To get the cluster ID, use a [list](/docs/managed-clickhouse/api-ref/Cluster/list) request.

          The maximum string length in characters is 50.
        required: true
        schema:
          type: string
      - name: userName
        in: path
        description: |-
          Required.
          Name of the user to revoke a permission from.
          To get the name of the user, use a [list](/docs/managed-clickhouse/api-ref/User/list) request.

          The maximum string length in characters is 63.
          Value must match the regular expression `` [a-zA-Z0-9_]* ``.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeUserPermissionRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      x-y-navtitle: revokePermission
      x-y-operation-metadata:
        $ref: '#/components/schemas/RevokeUserPermissionMetadata'
      x-y-operation-response: '[User](/docs/managed-clickhouse/api-ref/User#representation)'
  /managed-clickhouse/v1/versions:
    get:
      tags:
      - Versions
      summary: Returns list of available ClickHouse versions.
      operationId: VersionsList
      parameters:
      - name: pageSize
        in: query
        description: |-
          The maximum number of results per page that should be returned. If the number of available
          results is larger than [pageSize](/docs/managed-clickhouse/api-ref/Versions/list#query_params), the service returns a [nextPageToken](/docs/managed-clickhouse/api-ref/Versions/list#responses) that can be used
          to get the next page of results in subsequent ListVersions requests.
          Default value: 100.

          Acceptable values are 0 to 1000, inclusive.
        schema:
          type: string
          format: int64
      - name: pageToken
        in: query
        description: |-
          Page token. Set [pageToken](/docs/managed-clickhouse/api-ref/Versions/list#query_params) to the [nextPageToken](/docs/managed-clickhouse/api-ref/Versions/list#responses) returned by a previous ListVersions
          request to get the next page of results.

          The maximum string length in characters is 100.
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVersionsResponse'
      x-y-navtitle: list
components:
  schemas:
    Access:
      type: object
      properties:
        dataLens:
          description: Allow to export data from the cluster to DataLens.
          type: boolean
          format: boolean
        webSql:
          description: |-
            Allow SQL queries to the cluster databases from the management console.

            See [SQL queries in the management console](/docs/managed-clickhouse/operations/web-sql-query) for more details.
          type: boolean
          format: boolean
        metrika:
          description: |-
            Allow to import data from Yandex Metrica and AppMetrica to the cluster.

            See [AppMetrica documentation](https://appmetrica.yandex.com/docs/cloud/index.html) for more details.
          type: boolean
          format: boolean
        serverless:
          description: Allow access to cluster for Serverless.
          type: boolean
          format: boolean
        dataTransfer:
          description: Allow access for DataTransfer
          type: boolean
          format: boolean
        yandexQuery:
          description: Allow access for Query
          type: boolean
          format: boolean
    AddClusterHostsMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the ClickHouse cluster to which the hosts are being added.
          type: string
        hostNames:
          description: Names of hosts that are being added to the cluster.
          type: array
          items:
            type: string
    AddClusterHostsRequest:
      type: object
      properties:
        hostSpecs:
          description: |-
            Required.
            Configurations for ClickHouse hosts that should be added to the cluster.

            Must contain at least one element.
          type: array
          items:
            $ref: '#/components/schemas/HostSpec'
        copySchema:
          description: Whether to copy schema to new ClickHouse hosts from replicas.
          type: boolean
          format: boolean
    AddClusterShardMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the cluster that a shard is being added to.
          type: string
        shardName:
          description: Name of the shard being created.
          type: string
    AddClusterShardRequest:
      type: object
      properties:
        shardName:
          description: |-
            Required.
            Name for the new shard.

            The maximum string length in characters is 63.
            Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
          type: string
        configSpec:
          $ref: '#/components/schemas/ShardConfigSpec_in_AddClusterShardRequest_configSpec'
        hostSpecs:
          description: |-
            Required.
            Configurations for ClickHouse hosts that should be created with the shard.

            Must contain at least one element.
          type: array
          items:
            $ref: '#/components/schemas/HostSpec'
        copySchema:
          description: Whether to copy schema to hosts of the shard to be created.
            The schema is copied from hosts of an existing shard.
          type: boolean
          format: boolean
    AddClusterZookeeperMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the ClickHouse cluster.
          type: string
    AddClusterZookeeperRequest:
      type: object
      properties:
        resources:
          $ref: '#/components/schemas/Resources_in_AddClusterZookeeperRequest_resources'
        hostSpecs:
          description: Configuration of ZooKeeper hosts.
          type: array
          items:
            $ref: '#/components/schemas/HostSpec'
    AnytimeMaintenanceWindow:
      type: object
      properties: {}
    Backup:
      description: |-
        A ClickHouse Backup resource. See the [Developer's Guide](/docs/managed-clickhouse/concepts)
        for more information.
      type: object
      properties:
        id:
          description: ID of the backup.
          type: string
        folderId:
          description: ID of the folder that the backup belongs to.
          type: string
        createdAt:
          description: |-
            Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format
            (i.e. when the backup operation was completed).

            String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
          type: string
          format: date-time
        sourceClusterId:
          description: ID of the ClickHouse cluster that the backup was created for.
          type: string
        sourceShardNames:
          description: Names of the shards included in the backup.
          type: array
          items:
            type: string
        startedAt:
          description: |-
            Time when the backup operation was started.

            String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
          type: string
          format: date-time
    BackupClusterMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the ClickHouse cluster that is being backed up.
          type: string
    ClickhouseConfig:
      description: |-
        ClickHouse configuration options. Detailed description for each set of options
        is available in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/).

        Any options not listed here are not supported.
      type: object
      properties:
        logLevel:
          $ref: '#/components/schemas/ClickhouseConfigLogLevel_in_ClickhouseConfig_logLevel'
        mergeTree:
          $ref: '#/components/schemas/ClickhouseConfigMergeTree_in_ClickhouseConfig_mergeTree'
        compression:
          description: |-
            Compression settings for the ClickHouse cluster.
            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/#compression).
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigCompression'
        dictionaries:
          description: |-
            Configuration of external dictionaries to be used by the ClickHouse cluster.
            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts/).
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionary'
        graphiteRollup:
          description: |-
            Settings for thinning Graphite data.
            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigGraphiteRollup'
        kafka:
          $ref: '#/components/schemas/ClickhouseConfigKafka_in_ClickhouseConfig_kafka'
        kafkaTopics:
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigKafkaTopic'
        rabbitmq:
          $ref: '#/components/schemas/ClickhouseConfigRabbitmq_in_ClickhouseConfig_rabbitmq'
        maxConnections:
          description: |-
            Maximum number of inbound connections.

            The minimum value is 10.
          type: integer
          format: int64
        maxConcurrentQueries:
          description: |-
            Maximum number of simultaneously processed requests.

            The minimum value is 10.
          type: integer
          format: int64
        keepAliveTimeout:
          description: Number of milliseconds that ClickHouse waits for incoming requests
            before closing the connection.
          type: integer
          format: int64
        uncompressedCacheSize:
          description: Cache size (in bytes) for uncompressed data used by MergeTree
            tables.
          type: integer
          format: int64
        markCacheSize:
          description: |-
            Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.

            Value must be greater than 0.
          type: integer
          format: int64
        maxTableSizeToDrop:
          description: Maximum size of the table that can be deleted using a DROP
            query.
          type: integer
          format: int64
        maxPartitionSizeToDrop:
          description: Maximum size of the partition that can be deleted using a DROP
            query.
          type: integer
          format: int64
        builtinDictionariesReloadInterval:
          description: The setting is deprecated and has no effect.
          deprecated: true
          type: integer
          format: int64
        timezone:
          description: The server's time zone to be used in DateTime fields conversions.
            Specified as an IANA identifier.
          type: string
        geobaseUri:
          description: Address of the archive with the user geobase in Object Storage.
          type: string
        queryLogRetentionSize:
          description: |-
            The maximum size that query_log can grow to before old data will be removed. If set to 0, automatic removal of
            query_log data based on size is disabled.
          type: integer
          format: int64
        queryLogRetentionTime:
          description: |-
            The maximum time that query_log records will be retained before removal. If set to 0, automatic removal of
            query_log data based on time is disabled.
          type: integer
          format: int64
        queryThreadLogEnabled:
          description: Whether query_thread_log system table is enabled.
          type: boolean
          format: boolean
        queryThreadLogRetentionSize:
          description: |-
            The maximum size that query_thread_log can grow to before old data will be removed. If set to 0, automatic removal of
            query_thread_log data based on size is disabled.
          type: integer
          format: int64
        queryThreadLogRetentionTime:
          description: |-
            The maximum time that query_thread_log records will be retained before removal. If set to 0, automatic removal of
            query_thread_log data based on time is disabled.
          type: integer
          format: int64
        partLogRetentionSize:
          description: |-
            The maximum size that part_log can grow to before old data will be removed. If set to 0, automatic removal of
            part_log data based on size is disabled.
          type: integer
          format: int64
        partLogRetentionTime:
          description: |-
            The maximum time that part_log records will be retained before removal. If set to 0, automatic removal of
            part_log data based on time is disabled.
          type: integer
          format: int64
        metricLogEnabled:
          description: Whether metric_log system table is enabled.
          type: boolean
          format: boolean
        metricLogRetentionSize:
          description: |-
            The maximum size that metric_log can grow to before old data will be removed. If set to 0, automatic removal of
            metric_log data based on size is disabled.
          type: integer
          format: int64
        metricLogRetentionTime:
          description: |-
            The maximum time that metric_log records will be retained before removal. If set to 0, automatic removal of
            metric_log data based on time is disabled.
          type: integer
          format: int64
        traceLogEnabled:
          description: Whether trace_log system table is enabled.
          type: boolean
          format: boolean
        traceLogRetentionSize:
          description: |-
            The maximum size that trace_log can grow to before old data will be removed. If set to 0, automatic removal of
            trace_log data based on size is disabled.
          type: integer
          format: int64
        traceLogRetentionTime:
          description: |-
            The maximum time that trace_log records will be retained before removal. If set to 0, automatic removal of
            trace_log data based on time is disabled.
          type: integer
          format: int64
        textLogEnabled:
          description: Whether text_log system table is enabled.
          type: boolean
          format: boolean
        textLogRetentionSize:
          description: |-
            The maximum size that text_log can grow to before old data will be removed. If set to 0, automatic removal of
            text_log data based on size is disabled.
          type: integer
          format: int64
        textLogRetentionTime:
          description: |-
            The maximum time that text_log records will be retained before removal. If set to 0, automatic removal of
            text_log data based on time is disabled.
          type: integer
          format: int64
        textLogLevel:
          $ref: '#/components/schemas/ClickhouseConfigLogLevel_in_ClickhouseConfig_textLogLevel'
        backgroundPoolSize:
          description: Value must be greater than 0.
          type: integer
          format: int64
        backgroundSchedulePoolSize:
          description: Value must be greater than 0.
          type: integer
          format: int64
    ClickhouseConfigCompression:
      type: object
      properties:
        method:
          $ref: '#/components/schemas/ClickhouseConfigCompressionMethod_in_ClickhouseConfigCompression_method'
        minPartSize:
          description: |-
            Minimum size of a part of a table.

            The minimum value is 1.
          type: string
          format: int64
        minPartSizeRatio:
          description: Minimum ratio of a part relative to the size of all the data
            in the table.
          type: number
          format: double
    ClickhouseConfigCompressionMethod:
      description: |2-
         - LZ4: [LZ4 compression algorithm](https://lz4.github.io/lz4/).
         - ZSTD: [Zstandard compression algorithm](https://facebook.github.io/zstd/).
      type: string
      enum:
      - LZ4
      - ZSTD
    ClickhouseConfigExternalDictionary:
      type: object
      allOf:
      - type: object
        properties:
          name:
            description: |-
              Required.
              Name of the external dictionary.
            type: string
          structure:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryStructure'
            description: |-
              Required.
              Set of attributes for the external dictionary.
              For in-depth description, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_structure/).
          layout:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryLayout'
            description: |-
              Required.
              Layout for storing the dictionary in memory.
              For in-depth description, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_layout/).
      - title: lifetime
        type: object
        maxProperties: 1
        properties:
          fixedLifetime:
            description: Fixed interval between dictionary updates.
            type: string
            format: int64
          lifetimeRange:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryRange'
            description: Range of intervals between dictionary updates for ClickHouse
              to choose from.
      - title: source
        type: object
        maxProperties: 1
        properties:
          httpSource:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryHttpSource'
            description: HTTP source for the dictionary.
          mysqlSource:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryMysqlSource'
            description: MySQL source for the dictionary.
          clickhouseSource:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryClickhouseSource'
            description: ClickHouse source for the dictionary.
          mongodbSource:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryMongodbSource'
            description: MongoDB source for the dictionary.
          postgresqlSource:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryPostgresqlSource'
            description: PostgreSQL source for the dictionary.
    ClickhouseConfigExternalDictionaryClickhouseSource:
      type: object
      properties:
        db:
          description: |-
            Required.
            Name of the ClickHouse database.
          type: string
        table:
          description: |-
            Required.
            Name of the table in the specified database to be used as the dictionary source.
          type: string
        host:
          description: |-
            Required.
            ClickHouse host of the specified database.

            The maximum string length in characters is 253.
          type: string
        port:
          description: |-
            Port to use when connecting to the host.

            Acceptable values are 0 to 65535, inclusive.
          type: string
          format: int64
        user:
          description: |-
            Required.
            Name of the ClickHouse database user.
          type: string
        password:
          description: Password of the ClickHouse database user.
          type: string
        where:
          description: Selection criteria for the data in the specified ClickHouse
            table.
          type: string
    ClickhouseConfigExternalDictionaryHttpSource:
      type: object
      properties:
        url:
          description: |-
            Required.
            URL of the source dictionary available over HTTP.
          type: string
        format:
          description: |-
            Required.
            The data format. Valid values are all formats supported by ClickHouse SQL dialect.
          type: string
    ClickhouseConfigExternalDictionaryLayout:
      description: Layout determining how to store the dictionary in memory.
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryLayoutType_in_ClickhouseConfigExternalDictionaryLayout_type'
        sizeInCells:
          description: |-
            Number of cells in the cache. Rounded up to a power of two.
            Applicable only for CACHE and COMPLEX_KEY_CACHE layout types.
          type: string
          format: int64
    ClickhouseConfigExternalDictionaryLayoutType:
      description: |2-
         - FLAT: The entire dictionary is stored in memory in the form of flat arrays.
        Available for all dictionary sources.
         - HASHED: The entire dictionary is stored in memory in the form of a hash table.
        Available for all dictionary sources.
         - COMPLEX_KEY_HASHED: Similar to HASHED, to be used with composite keys.
        Available for all dictionary sources.
         - RANGE_HASHED: The entire dictionary is stored in memory in the form of a hash table,
        with an ordered array of ranges and their corresponding values.
        Available for all dictionary sources.
         - CACHE: The dictionary is stored in a cache with a set number of cells.
        Available for MySQL, ClickHouse and HTTP dictionary sources.
         - COMPLEX_KEY_CACHE: Similar to CACHE, to be used with composite keys.
        Available for MySQL, ClickHouse and HTTP dictionary sources.
      type: string
      enum:
      - FLAT
      - HASHED
      - COMPLEX_KEY_HASHED
      - RANGE_HASHED
      - CACHE
      - COMPLEX_KEY_CACHE
    ClickhouseConfigExternalDictionaryMongodbSource:
      type: object
      properties:
        db:
          description: |-
            Required.
            Name of the MongoDB database.
          type: string
        collection:
          description: |-
            Required.
            Name of the collection in the specified database to be used as the dictionary source.
          type: string
        host:
          description: |-
            Required.
            MongoDB host of the specified database.

            The maximum string length in characters is 253.
          type: string
        port:
          description: |-
            Port to use when connecting to the host.

            Acceptable values are 0 to 65535, inclusive.
          type: string
          format: int64
        user:
          description: |-
            Required.
            Name of the MongoDB database user.
          type: string
        password:
          description: Password of the MongoDB database user.
          type: string
    ClickhouseConfigExternalDictionaryMysqlSource:
      type: object
      properties:
        db:
          description: |-
            Required.
            Name of the MySQL database to connect to.
          type: string
        table:
          description: |-
            Required.
            Name of the database table to use as a ClickHouse dictionary.
          type: string
        port:
          description: |-
            Default port to use when connecting to a replica of the dictionary source.

            Acceptable values are 0 to 65535, inclusive.
          type: string
          format: int64
        user:
          description: Name of the default user for replicas of the dictionary source.
          type: string
        password:
          description: Password of the default user for replicas of the dictionary
            source.
          type: string
        replicas:
          description: |-
            Required.
            List of MySQL replicas of the database used as dictionary source.

            Must contain at least one element.
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryMysqlSourceReplica'
        where:
          description: Selection criteria for the data in the specified MySQL table.
          type: string
        invalidateQuery:
          description: |-
            Query for checking the dictionary status, to pull only updated data.
            For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
          type: string
    ClickhouseConfigExternalDictionaryMysqlSourceReplica:
      type: object
      properties:
        host:
          description: |-
            Required.
            MySQL host of the replica.

            The maximum string length in characters is 253.
          type: string
        priority:
          description: |-
            Required.
            The priority of the replica that ClickHouse takes into account when connecting.
            Replica with the highest priority should have this field set to the lowest number.

            Value must be greater than 0.
          type: string
          format: int64
        port:
          description: |-
            Port to use when connecting to the replica.
            If a port is not specified for a replica, ClickHouse uses the port specified for the source.

            Acceptable values are 0 to 65535, inclusive.
          type: string
          format: int64
        user:
          description: Name of the MySQL database user.
          type: string
        password:
          description: Password of the MySQL database user.
          type: string
    ClickhouseConfigExternalDictionaryPostgresqlSource:
      type: object
      properties:
        db:
          description: |-
            Required.
            Name of the PostrgreSQL database.
          type: string
        table:
          description: |-
            Required.
            Name of the table in the specified database to be used as the dictionary source.
          type: string
        hosts:
          description: |-
            Required.
            Name of the PostrgreSQL host

            Must contain at least one element.
          type: array
          items:
            type: string
        port:
          description: |-
            Port to use when connecting to the host.

            Acceptable values are 0 to 65535, inclusive.
          type: string
          format: int64
        user:
          description: |-
            Required.
            Name of the PostrgreSQL database user.
          type: string
        password:
          description: Password of the PostrgreSQL database user.
          type: string
        invalidateQuery:
          description: |-
            Query for checking the dictionary status, to pull only updated data.
            For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
          type: string
        sslMode:
          $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryPostgresqlSourceSslMode_in_ClickhouseConfigExternalDictionaryPostgresqlSource_sslMode'
    ClickhouseConfigExternalDictionaryPostgresqlSourceSslMode:
      description: |2-
         - DISABLE: Only try a non-SSL connection.
         - ALLOW: First try a non-SSL connection; if that fails, try an SSL connection.
         - PREFER: First try an SSL connection; if that fails, try a non-SSL connection.
         - VERIFY_CA: Only try an SSL connection, and verify that the server certificate is issued by a trusted certificate authority (CA).
         - VERIFY_FULL: Only try an SSL connection, verify that the server certificate is issued by a trusted CA and that the requested server host name matches that in the certificate.
      type: string
      enum:
      - DISABLE
      - ALLOW
      - PREFER
      - VERIFY_CA
      - VERIFY_FULL
    ClickhouseConfigExternalDictionaryRange:
      type: object
      properties:
        min:
          description: Minimum dictionary lifetime.
          type: string
          format: int64
        max:
          description: Maximum dictionary lifetime.
          type: string
          format: int64
    ClickhouseConfigExternalDictionaryStructure:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryStructureId_in_ClickhouseConfigExternalDictionaryStructure_id'
        key:
          $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryStructureKey_in_ClickhouseConfigExternalDictionaryStructure_key'
        rangeMin:
          $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryStructureAttribute_in_ClickhouseConfigExternalDictionaryStructure_rangeMin'
        rangeMax:
          $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryStructureAttribute_in_ClickhouseConfigExternalDictionaryStructure_rangeMax'
        attributes:
          description: |-
            Required.
            Description of the fields available for database queries.
            For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).

            Must contain at least one element.
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryStructureAttribute'
    ClickhouseConfigExternalDictionaryStructureAttribute:
      type: object
      properties:
        name:
          description: |-
            Required.
            Name of the column.
          type: string
        type:
          description: |-
            Required.
            Type of the column.
          type: string
        nullValue:
          description: Default value for an element without data (for example, an
            empty string).
          type: string
        expression:
          description: Expression, describing the attribute, if applicable.
          type: string
        hierarchical:
          description: |-
            Indication of hierarchy support.
            Default value: `false`.
          type: boolean
          format: boolean
        injective:
          description: |-
            Indication of injective mapping "id -> attribute".
            Default value: `false`.
          type: boolean
          format: boolean
    ClickhouseConfigExternalDictionaryStructureId:
      description: Numeric key.
      type: object
      properties:
        name:
          description: |-
            Required.
            Name of the numeric key.
          type: string
    ClickhouseConfigExternalDictionaryStructureKey:
      description: Complex key.
      type: object
      properties:
        attributes:
          description: |-
            Required.
            Attributes of a complex key.

            Must contain at least one element.
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryStructureAttribute'
    ClickhouseConfigGraphiteRollup:
      description: Rollup settings for the GraphiteMergeTree table engine.
      type: object
      properties:
        name:
          description: |-
            Required.
            Name for the specified combination of settings for Graphite rollup.
          type: string
        patterns:
          description: |-
            Required.
            Pattern to use for the rollup.

            Must contain at least one element.
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigGraphiteRollupPattern'
    ClickhouseConfigGraphiteRollupPattern:
      type: object
      properties:
        regexp:
          description: Pattern for metric names.
          type: string
        function:
          description: |-
            Required.
            Name of the aggregating function to apply to data of the age specified in `retention`.
          type: string
        retention:
          description: |-
            Required.
            Age of data to use for thinning.

            Must contain at least one element.
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigGraphiteRollupPatternRetention'
    ClickhouseConfigGraphiteRollupPatternRetention:
      type: object
      properties:
        age:
          description: |-
            Minimum age of the data in seconds.

            Value must be greater than 0.
          type: string
          format: int64
        precision:
          description: |-
            Precision of determining the age of the data, in seconds.

            Value must be greater than 0.
          type: string
          format: int64
    ClickhouseConfigKafka:
      type: object
      properties:
        securityProtocol:
          $ref: '#/components/schemas/ClickhouseConfigKafkaSecurityProtocol_in_ClickhouseConfigKafka_securityProtocol'
        saslMechanism:
          $ref: '#/components/schemas/ClickhouseConfigKafkaSaslMechanism_in_ClickhouseConfigKafka_saslMechanism'
        saslUsername:
          type: string
        saslPassword:
          type: string
    ClickhouseConfigKafkaSaslMechanism:
      type: string
      enum:
      - SASL_MECHANISM_GSSAPI
      - SASL_MECHANISM_PLAIN
      - SASL_MECHANISM_SCRAM_SHA_256
      - SASL_MECHANISM_SCRAM_SHA_512
    ClickhouseConfigKafkaSecurityProtocol:
      type: string
      enum:
      - SECURITY_PROTOCOL_PLAINTEXT
      - SECURITY_PROTOCOL_SSL
      - SECURITY_PROTOCOL_SASL_PLAINTEXT
      - SECURITY_PROTOCOL_SASL_SSL
    ClickhouseConfigKafkaTopic:
      type: object
      properties:
        name:
          description: Required.
          type: string
        settings:
          $ref: '#/components/schemas/ClickhouseConfigKafka_in_ClickhouseConfigKafkaTopic_settings'
    ClickhouseConfigLogLevel:
      type: string
      enum:
      - TRACE
      - DEBUG
      - INFORMATION
      - WARNING
      - ERROR
    ClickhouseConfigMergeTree:
      description: Options specific to the MergeTree table engine.
      type: object
      properties:
        replicatedDeduplicationWindow:
          description: Number of blocks of hashes to keep in ZooKeeper.
          type: integer
          format: int64
        replicatedDeduplicationWindowSeconds:
          description: Period of time to keep blocks of hashes for.
          type: integer
          format: int64
        partsToDelayInsert:
          description: If table contains at least that many active parts in single
            partition, artificially slow down insert into table.
          type: integer
          format: int64
        partsToThrowInsert:
          description: If more than this number active parts in single partition,
            throw 'Too many parts ...' exception.
          type: integer
          format: int64
        maxReplicatedMergesInQueue:
          description: How many tasks of merging and mutating parts are allowed simultaneously
            in ReplicatedMergeTree queue.
          type: integer
          format: int64
        numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge:
          description: |-
            If there is less than specified number of free entries in background pool (or replicated queue), start to lower
            maximum size of merge to process.
          type: integer
          format: int64
        maxBytesToMergeAtMinSpaceInPool:
          description: |-
            Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
            in replication queue).
          type: integer
          format: int64
        maxBytesToMergeAtMaxSpaceInPool:
          type: integer
          format: int64
    ClickhouseConfigRabbitmq:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    ClickhouseConfigSet:
      type: object
      properties:
        effectiveConfig:
          $ref: '#/components/schemas/ClickhouseConfig_in_ClickhouseConfigSet_effectiveConfig'
        userConfig:
          $ref: '#/components/schemas/ClickhouseConfig_in_ClickhouseConfigSet_userConfig'
        defaultConfig:
          $ref: '#/components/schemas/ClickhouseConfig_in_ClickhouseConfigSet_defaultConfig'
    CloudStorage:
      type: object
      properties:
        enabled:
          description: Whether to use Object Storage for storing ClickHouse data.
          type: boolean
          format: boolean
        moveFactor:
          description: Acceptable values are 0 to 1, inclusive.
          type: number
          format: double
        dataCacheEnabled:
          type: boolean
          format: boolean
        dataCacheMaxSize:
          type: integer
          format: int64
    Cluster:
      description: |-
        A ClickHouse Cluster resource. For more information, see the
        [Cluster](/docs/managed-clickhouse/concepts) section in the Developer's Guide.
      type: object
      properties:
        id:
          description: |-
            ID of the ClickHouse cluster.
            This ID is assigned by MDB at creation time.
          type: string
        folderId:
          description: ID of the folder that the ClickHouse cluster belongs to.
          type: string
        createdAt:
          description: |-
            Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

            String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
          type: string
          format: date-time
        name:
          description: |-
            Name of the ClickHouse cluster.
            The name is unique within the folder. 1-63 characters long.
          type: string
        description:
          description: Description of the ClickHouse cluster. 0-256 characters long.
          type: string
        labels:
          description: Custom labels for the ClickHouse cluster as `key:value` pairs.
            Maximum 64 per resource.
          type: object
          additionalProperties:
            type: string
        environment:
          $ref: '#/components/schemas/ClusterEnvironment_in_Cluster_environment'
        monitoring:
          description: Description of monitoring systems relevant to the ClickHouse
            cluster.
          type: array
          items:
            $ref: '#/components/schemas/Monitoring'
        config:
          $ref: '#/components/schemas/ClusterConfig_in_Cluster_config'
        networkId:
          description: ID of the network that the cluster belongs to.
          type: string
        health:
          $ref: '#/components/schemas/ClusterHealth_in_Cluster_health'
        status:
          $ref: '#/components/schemas/ClusterStatus_in_Cluster_status'
        serviceAccountId:
          description: ID of the service account used for access to Object Storage.
          type: string
        maintenanceWindow:
          $ref: '#/components/schemas/MaintenanceWindow_in_Cluster_maintenanceWindow'
        plannedOperation:
          $ref: '#/components/schemas/MaintenanceOperation_in_Cluster_plannedOperation'
        securityGroupIds:
          description: User security groups
          type: array
          items:
            type: string
        deletionProtection:
          description: Deletion Protection inhibits deletion of the cluster
          type: boolean
          format: boolean
    ClusterConfig:
      type: object
      properties:
        version:
          description: Version of the ClickHouse server software.
          type: string
        clickhouse:
          $ref: '#/components/schemas/ClusterConfigClickhouse_in_ClusterConfig_clickhouse'
        zookeeper:
          $ref: '#/components/schemas/ClusterConfigZookeeper_in_ClusterConfig_zookeeper'
        backupWindowStart:
          $ref: '#/components/schemas/TimeOfDay_in_ClusterConfig_backupWindowStart'
        access:
          $ref: '#/components/schemas/Access_in_ClusterConfig_access'
        cloudStorage:
          $ref: '#/components/schemas/CloudStorage_in_ClusterConfig_cloudStorage'
        sqlDatabaseManagement:
          description: Whether database management through SQL commands is enabled.
          type: boolean
          format: boolean
        sqlUserManagement:
          description: Whether user management through SQL commands is enabled.
          type: boolean
          format: boolean
        embeddedKeeper:
          description: Whether cluster should use embedded Keeper instead of Zookeeper.
          type: boolean
          format: boolean
    ClusterConfigClickhouse:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/ClickhouseConfigSet_in_ClusterConfigClickhouse_config'
        resources:
          $ref: '#/components/schemas/Resources_in_ClusterConfigClickhouse_resources'
    ClusterConfigZookeeper:
      type: object
      properties:
        resources:
          $ref: '#/components/schemas/Resources_in_ClusterConfigZookeeper_resources'
    ClusterEnvironment:
      description: |2-
         - PRODUCTION: Stable environment with a conservative update policy:
        only hotfixes are applied during regular maintenance.
         - PRESTABLE: Environment with more aggressive update policy: new versions
        are rolled out irrespective of backward compatibility.
      type: string
      enum:
      - PRODUCTION
      - PRESTABLE
    ClusterHealth:
      description: |2-
         - HEALTH_UNKNOWN: State of the cluster is unknown (`health` for every host in the cluster is UNKNOWN).
         - ALIVE: Cluster is alive and well (`health` for every host in the cluster is ALIVE).
         - DEAD: Cluster is inoperable (`health` for every host in the cluster is DEAD).
         - DEGRADED: Cluster is working below capacity (`health` for at least one host in the cluster is not ALIVE).
      type: string
      enum:
      - HEALTH_UNKNOWN
      - ALIVE
      - DEAD
      - DEGRADED
      default: HEALTH_UNKNOWN
    ClusterStatus:
      description: |2-
         - STATUS_UNKNOWN: Cluster state is unknown.
         - CREATING: Cluster is being created.
         - RUNNING: Cluster is running normally.
         - ERROR: Cluster encountered a problem and cannot operate.
         - UPDATING: Cluster is being updated.
         - STOPPING: Cluster is stopping.
         - STOPPED: Cluster stopped.
         - STARTING: Cluster is starting.
      type: string
      enum:
      - STATUS_UNKNOWN
      - CREATING
      - RUNNING
      - ERROR
      - UPDATING
      - STOPPING
      - STOPPED
      - STARTING
      default: STATUS_UNKNOWN
    ConfigSpec:
      type: object
      properties:
        version:
          description: Version of the ClickHouse server software.
          type: string
        clickhouse:
          $ref: '#/components/schemas/ConfigSpecClickhouse_in_ConfigSpec_clickhouse'
        zookeeper:
          $ref: '#/components/schemas/ConfigSpecZookeeper_in_ConfigSpec_zookeeper'
        backupWindowStart:
          $ref: '#/components/schemas/TimeOfDay_in_ConfigSpec_backupWindowStart'
        access:
          $ref: '#/components/schemas/Access_in_ConfigSpec_access'
        cloudStorage:
          $ref: '#/components/schemas/CloudStorage_in_ConfigSpec_cloudStorage'
        sqlDatabaseManagement:
          description: Whether database management through SQL commands is enabled.
          type: boolean
          format: boolean
        sqlUserManagement:
          description: Whether user management through SQL commands is enabled.
          type: boolean
          format: boolean
        adminPassword:
          description: Password for user 'admin' that has SQL user management access.
          type: string
        embeddedKeeper:
          description: Whether cluster should use embedded Keeper instead of Zookeeper
          type: boolean
          format: boolean
    ConfigSpecClickhouse:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/ClickhouseConfig_in_ConfigSpecClickhouse_config'
        resources:
          $ref: '#/components/schemas/Resources_in_ConfigSpecClickhouse_resources'
    ConfigSpecZookeeper:
      type: object
      properties:
        resources:
          $ref: '#/components/schemas/Resources_in_ConfigSpecZookeeper_resources'
    CreateClusterExternalDictionaryMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the cluster for which an external dictionary is being
            created.
          type: string
    CreateClusterExternalDictionaryRequest:
      type: object
      properties:
        externalDictionary:
          $ref: '#/components/schemas/ClickhouseConfigExternalDictionary_in_CreateClusterExternalDictionaryRequest_externalDictionary'
    CreateClusterMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the ClickHouse cluster that is being created.
          type: string
    CreateClusterRequest:
      type: object
      properties:
        folderId:
          description: |-
            Required.
            ID of the folder to create the ClickHouse cluster in.

            The maximum string length in characters is 50.
          type: string
        name:
          description: |-
            Required.
            Name of the ClickHouse cluster. The name must be unique within the folder.

            The maximum string length in characters is 63.
            Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
          type: string
        description:
          description: |-
            Description of the ClickHouse cluster.

            The maximum string length in characters is 256.
          type: string
        labels:
          description: |-
            Custom labels for the ClickHouse cluster as `key:value` pairs. Maximum 64 per resource.
            For example, "project": "mvp" or "source": "dictionary".

            No more than 64 per resource.
            The maximum string length in characters for each key is 63.
            Each key must match the regular expression `` [a-z][-_0-9a-z]* ``.
            The maximum string length in characters for each value is 63.
            Each value must match the regular expression `` [-_0-9a-z]* ``.
          type: object
          additionalProperties:
            type: string
        environment:
          $ref: '#/components/schemas/ClusterEnvironment_in_CreateClusterRequest_environment'
        configSpec:
          $ref: '#/components/schemas/ConfigSpec_in_CreateClusterRequest_configSpec'
        databaseSpecs:
          description: |-
            Required.
            Descriptions of databases to be created in the ClickHouse cluster.

            Must contain at least one element.
          type: array
          items:
            $ref: '#/components/schemas/DatabaseSpec'
        userSpecs:
          description: |-
            Required.
            Descriptions of database users to be created in the ClickHouse cluster.

            Must contain at least one element.
          type: array
          items:
            $ref: '#/components/schemas/UserSpec'
        hostSpecs:
          description: |-
            Required.
            Individual configurations for hosts that should be created for the ClickHouse cluster.

            Must contain at least one element.
          type: array
          items:
            $ref: '#/components/schemas/HostSpec'
        networkId:
          description: |-
            Required.
            ID of the network to create the cluster in.

            The maximum string length in characters is 50.
          type: string
        shardName:
          description: |-
            Name of the first shard in cluster. If not set, defaults to the value 'shard1'.

            The maximum string length in characters is 63.
            Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
          type: string
        serviceAccountId:
          description: ID of the service account used for access to Object Storage.
          type: string
        securityGroupIds:
          description: User security groups
          type: array
          items:
            type: string
        deletionProtection:
          description: Deletion Protection inhibits deletion of the cluster
          type: boolean
          format: boolean
    CreateClusterShardGroupMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the cluster to add a shard group to.
          type: string
        shardGroupName:
          description: Name of the shard group that is being added.
          type: string
    CreateClusterShardGroupRequest:
      type: object
      properties:
        shardGroupName:
          description: |-
            Required.
            Name for the new shard group.

            The maximum string length in characters is 63.
            Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
          type: string
        description:
          description: Description of the new shard group. 0-256 characters long.
          type: string
        shardNames:
          description: |-
            List of shard names that should be put into the new group.

            To get the list, make a [listShardGroups](/docs/managed-clickhouse/api-ref/Cluster/listShardGroups) request.
          type: array
          items:
            type: string
    CreateDatabaseMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the ClickHouse cluster where a database is being created.
          type: string
        databaseName:
          description: Name of the ClickHouse database that is being created.
          type: string
    CreateDatabaseRequest:
      type: object
      properties:
        databaseSpec:
          $ref: '#/components/schemas/DatabaseSpec_in_CreateDatabaseRequest_databaseSpec'
    CreateFormatSchemaMetadata:
      type: object
      properties:
        clusterId:
          type: string
        formatSchemaName:
          type: string
    CreateFormatSchemaRequest:
      type: object
      properties:
        formatSchemaName:
          description: |-
            Required.
            The maximum string length in characters is 63.
            Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
          type: string
        type:
          $ref: '#/components/schemas/FormatSchemaType_in_CreateFormatSchemaRequest_type'
        uri:
          description: Required.
          type: string
    CreateMlModelMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the cluster that a model is being added to.
          type: string
        mlModelName:
          description: Name of the the model that is being created.
          type: string
    CreateMlModelRequest:
      type: object
      properties:
        mlModelName:
          description: |-
            Required.
            Model name. The model name is one of the arguments of the modelEvaluate() function, which is used to call the model in ClickHouse.

            The maximum string length in characters is 63.
            Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
          type: string
        type:
          $ref: '#/components/schemas/MlModelType_in_CreateMlModelRequest_type'
        uri:
          description: |-
            Required.
            Model file URL. You can only use models stored in Object Storage.
          type: string
    CreateUserMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the ClickHouse cluster the user is being created in.
          type: string
        userName:
          description: Name of the user that is being created.
          type: string
    CreateUserRequest:
      type: object
      properties:
        userSpec:
          $ref: '#/components/schemas/UserSpec_in_CreateUserRequest_userSpec'
    Database:
      description: "A ClickHouse Database resource. For more information, see the
        \n[Developer's Guide](/docs/managed-clickhouse/concepts)."
      type: object
      properties:
        name:
          description: Name of the database.
          type: string
        clusterId:
          description: ID of the ClickHouse cluster that the database belongs to.
          type: string
    DatabaseSpec:
      type: object
      properties:
        name:
          description: |-
            Required.
            Name of the ClickHouse database. 1-63 characters long.

            The maximum string length in characters is 63.
            Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
          type: string
    DeleteClusterExternalDictionaryMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the cluster where an external dictionary is being deleted.
          type: string
    DeleteClusterExternalDictionaryRequest:
      type: object
      properties:
        externalDictionaryName:
          description: Name of the external dictionary to delete.
          type: string
    DeleteClusterHostsMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the ClickHouse cluster to remove hosts from.
          type: string
        hostNames:
          description: Names of hosts that are being deleted.
          type: array
          items:
            type: string
    DeleteClusterHostsRequest:
      type: object
      properties:
        hostNames:
          description: |-
            Required.
            Names of hosts to delete.

            Must contain at least one element.
            The maximum string length in characters for each value is 253.
          type: array
          items:
            type: string
    DeleteClusterMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the ClickHouse cluster that is being deleted.
          type: string
    DeleteClusterShardGroupMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the cluster that contains the shard group being deleted.
          type: string
        shardGroupName:
          description: Name of the shard group that is being deleted.
          type: string
    DeleteClusterShardMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the cluster that contains the shard being deleted.
          type: string
        shardName:
          description: Name of the shard being deleted.
          type: string
    DeleteDatabaseMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the ClickHouse cluster where a database is being deleted.
          type: string
        databaseName:
          description: Name of the ClickHouse database that is being deleted.
          type: string
    DeleteFormatSchemaMetadata:
      type: object
      properties:
        clusterId:
          type: string
        formatSchemaName:
          type: string
    DeleteMlModelMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the cluster that contains the model being deleted.
          type: string
        mlModelName:
          description: Name of the the model that is being deleted.
          type: string
    DeleteUserMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the ClickHouse cluster the user belongs to.
          type: string
        userName:
          description: Name of the user that is being deleted.
          type: string
    Empty:
      description: Empty JSON object `` {} ``.
      type: object
      maxProperties: 0
    FieldMask:
      description: |-
        A comma-separated names off ALL fields to be updated.
        Оnly the specified fields will be changed. The others will be left untouched.
        If the field is specified in `` updateMask `` and no value for that field was sent in the request,
        the field's value will be reset to the default. The default value for most fields is null or 0.

        If `` updateMask `` is not sent in the request, all fields' values will be updated.
        Fields specified in the request will be updated to provided values.
        The rest of the fields will be reset to the default.
      type: string
    FormatSchema:
      type: object
      properties:
        name:
          type: string
        clusterId:
          type: string
        type:
          $ref: '#/components/schemas/FormatSchemaType_in_FormatSchema_type'
        uri:
          type: string
    FormatSchemaType:
      type: string
      enum:
      - FORMAT_SCHEMA_TYPE_PROTOBUF
      - FORMAT_SCHEMA_TYPE_CAPNPROTO
    GrantUserPermissionMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the ClickHouse cluster the user belongs to.
          type: string
        userName:
          description: Name of the user that is being granted a permission.
          type: string
    GrantUserPermissionRequest:
      type: object
      properties:
        permission:
          $ref: '#/components/schemas/Permission_in_GrantUserPermissionRequest_permission'
    Host:
      type: object
      properties:
        name:
          description: |-
            Name of the ClickHouse host. The host name is assigned by MDB at creation time, and cannot be changed.
            1-63 characters long.

            The name is unique across all MDB hosts that exist on the platform, as it defines the FQDN of the host.
          type: string
        clusterId:
          description: ID of the ClickHouse host. The ID is assigned by MDB at creation
            time.
          type: string
        zoneId:
          description: ID of the availability zone where the ClickHouse host resides.
          type: string
        type:
          $ref: '#/components/schemas/HostType_in_Host_type'
        resources:
          $ref: '#/components/schemas/Resources_in_Host_resources'
        health:
          $ref: '#/components/schemas/HostHealth_in_Host_health'
        services:
          description: Services provided by the host.
          type: array
          items:
            $ref: '#/components/schemas/Service'
        subnetId:
          description: ID of the subnet that the host belongs to.
          type: string
        assignPublicIp:
          description: Flag showing public IP assignment status to this host.
          type: boolean
          format: boolean
        shardName:
          type: string
    HostHealth:
      description: |2-
         - UNKNOWN: Health of the host is unknown.
         - ALIVE: The host is performing all its functions normally.
         - DEAD: The host is inoperable, and cannot perform any of its essential functions.
         - DEGRADED: The host is degraded, and can perform only some of its essential functions.
      type: string
      enum:
      - UNKNOWN
      - ALIVE
      - DEAD
      - DEGRADED
      default: UNKNOWN
    HostSpec:
      type: object
      properties:
        zoneId:
          description: |-
            ID of the availability zone where the host resides.
            To get a list of available zones, use the [list](/docs/compute/api-ref/Zone/list) request.

            The maximum string length in characters is 50.
          type: string
        type:
          $ref: '#/components/schemas/HostType_in_HostSpec_type'
        subnetId:
          description: |-
            ID of the subnet that the host should belong to. This subnet should be a part
            of the network that the cluster belongs to.
            The ID of the network is set in the [Cluster.networkId](/docs/managed-clickhouse/api-ref/Cluster#representation) field.

            The maximum string length in characters is 50.
          type: string
        assignPublicIp:
          description: |-
            Whether the host should get a public IP address on creation.

            After a host has been created, this setting cannot be changed. To remove an assigned public IP, or to assign
            a public IP to a host without one, recreate the host with `assignPublicIp` set as needed.

            Possible values:
            * false - don't assign a public IP to the host.
            * true - the host should have a public IP address.
          type: boolean
          format: boolean
        shardName:
          description: |-
            Name of the shard that the host is assigned to.

            The maximum string length in characters is 63.
            Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
          type: string
    HostType:
      description: |2-
         - CLICKHOUSE: ClickHouse host.
         - ZOOKEEPER: ZooKeeper host.
      type: string
      enum:
      - CLICKHOUSE
      - ZOOKEEPER
    ListBackupsResponse:
      type: object
      properties:
        backups:
          description: List of Backup resources.
          type: array
          items:
            $ref: '#/components/schemas/Backup'
        nextPageToken:
          description: |-
            This token allows you to get the next page of results for list requests. If the number of results
            is larger than [pageSize](/docs/managed-clickhouse/api-ref/Backup/list#query_params), use the [nextPageToken](/docs/managed-clickhouse/api-ref/Backup/list#responses) as the value
            for the [pageToken](/docs/managed-clickhouse/api-ref/Backup/list#query_params) parameter in the next list request. Each subsequent
            list request will have its own [nextPageToken](/docs/managed-clickhouse/api-ref/Backup/list#responses) to continue paging through the results.
          type: string
    ListClusterBackupsResponse:
      type: object
      properties:
        backups:
          description: List of ClickHouse Backup resources.
          type: array
          items:
            $ref: '#/components/schemas/Backup'
        nextPageToken:
          description: |-
            This token allows you to get the next page of results for list requests. If the number of results
            is larger than [pageSize](/docs/managed-clickhouse/api-ref/Cluster/listBackups#query_params), use the [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listBackups#responses) as the value
            for the [pageToken](/docs/managed-clickhouse/api-ref/Cluster/listBackups#query_params) query parameter in the next list request.
            Each subsequent list request will have its own [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listBackups#responses) to continue paging through the results.
          type: string
    ListClusterHostsResponse:
      type: object
      properties:
        hosts:
          description: Requested list of hosts for the cluster.
          type: array
          items:
            $ref: '#/components/schemas/Host'
        nextPageToken:
          description: |-
            This token allows you to get the next page of results for list requests. If the number of results
            is larger than [pageSize](/docs/managed-clickhouse/api-ref/Cluster/listHosts#query_params), use the [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listHosts#responses) as the value
            for the [pageToken](/docs/managed-clickhouse/api-ref/Cluster/listHosts#query_params) query parameter in the next list request.
            Each subsequent list request will have its own [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listHosts#responses) to continue paging through the results.
          type: string
    ListClusterLogsRequestServiceType:
      description: ' - CLICKHOUSE: Logs of ClickHouse activity.'
      type: string
      enum:
      - CLICKHOUSE
    ListClusterLogsResponse:
      type: object
      properties:
        logs:
          description: Requested log records.
          type: array
          items:
            $ref: '#/components/schemas/LogRecord'
        nextPageToken:
          description: |-
            This token allows you to get the next page of results for list requests. If the number of results
            is larger than [pageSize](/docs/managed-clickhouse/api-ref/Cluster/listLogs#query_params), use the [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listLogs#responses) as the value
            for the [pageToken](/docs/managed-clickhouse/api-ref/Cluster/listLogs#query_params) query parameter in the next list request.
            Each subsequent list request will have its own [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listLogs#responses) to continue paging through the results.
            This value is interchangeable with the `nextRecordToken` from StreamLogs method.
          type: string
    ListClusterOperationsResponse:
      type: object
      properties:
        operations:
          description: List of Operation resources for the specified ClickHouse cluster.
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        nextPageToken:
          description: |-
            This token allows you to get the next page of results for list requests. If the number of results
            is larger than [pageSize](/docs/managed-clickhouse/api-ref/Cluster/listOperations#query_params), use the [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listOperations#responses) as the value
            for the [pageToken](/docs/managed-clickhouse/api-ref/Cluster/listOperations#query_params) query parameter in the next list request.
            Each subsequent list request will have its own [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listOperations#responses) to continue paging through the results.
          type: string
    ListClusterShardGroupsResponse:
      type: object
      properties:
        shardGroups:
          description: List of ClickHouse cluster's shard groups.
          type: array
          items:
            $ref: '#/components/schemas/ShardGroup'
        nextPageToken:
          description: |-
            This token allows you to get the next page of results for list requests.

            If the number of results is larger than [pageSize](/docs/managed-clickhouse/api-ref/Cluster/listShardGroups#query_params), use the [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listShardGroups#responses) as the value for the [pageToken](/docs/managed-clickhouse/api-ref/Cluster/listShardGroups#query_params) parameter in the next list request.
            Each subsequent list request will have its own [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listShardGroups#responses) to continue paging through the results.
          type: string
    ListClusterShardsResponse:
      type: object
      properties:
        shards:
          description: List of ClickHouse shards.
          type: array
          items:
            $ref: '#/components/schemas/Shard'
        nextPageToken:
          description: |-
            This token allows you to get the next page of results for list requests. If the number of results
            is larger than [pageSize](/docs/managed-clickhouse/api-ref/Cluster/listShards#query_params), use the [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listShards#responses) as the value
            for the [pageToken](/docs/managed-clickhouse/api-ref/Cluster/listShards#query_params) parameter in the next list request. Each subsequent
            list request will have its own [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listShards#responses) to continue paging through the results.
          type: string
    ListClustersResponse:
      type: object
      properties:
        clusters:
          description: List of ClickHouse Cluster resources.
          type: array
          items:
            $ref: '#/components/schemas/Cluster'
        nextPageToken:
          description: |-
            This token allows you to get the next page of results for list requests. If the number of results
            is larger than [pageSize](/docs/managed-clickhouse/api-ref/Cluster/list#query_params), use the [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/list#responses) as the value
            for the [pageToken](/docs/managed-clickhouse/api-ref/Cluster/list#query_params) parameter in the next list request. Each subsequent
            list request will have its own [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/list#responses) to continue paging through the results.
          type: string
    ListDatabasesResponse:
      type: object
      properties:
        databases:
          description: List of ClickHouse databases.
          type: array
          items:
            $ref: '#/components/schemas/Database'
        nextPageToken:
          description: |-
            This token allows you to get the next page of results for list requests. If the number of results
            is larger than [pageSize](/docs/managed-clickhouse/api-ref/Database/list#query_params), use the [nextPageToken](/docs/managed-clickhouse/api-ref/Database/list#responses) as the value
            for the [pageToken](/docs/managed-clickhouse/api-ref/Database/list#query_params) parameter in the next list request. Each subsequent
            list request will have its own [nextPageToken](/docs/managed-clickhouse/api-ref/Database/list#responses) to continue paging through the results.
          type: string
    ListFormatSchemasResponse:
      type: object
      properties:
        formatSchemas:
          type: array
          items:
            $ref: '#/components/schemas/FormatSchema'
        nextPageToken:
          type: string
    ListMlModelsResponse:
      type: object
      properties:
        mlModels:
          description: List of models in the specified cluster.
          type: array
          items:
            $ref: '#/components/schemas/MlModel'
        nextPageToken:
          description: |-
            Token for getting the next page of the list. If the number of results is greater than
            the specified [pageSize](/docs/managed-clickhouse/api-ref/MlModel/list#query_params), use `next_page_token` as the value
            for the [pageToken](/docs/managed-clickhouse/api-ref/MlModel/list#query_params) parameter in the next list request.

            Each subsequent page will have its own `next_page_token` to continue paging through the results.
          type: string
    ListResourcePresetsResponse:
      type: object
      properties:
        resourcePresets:
          description: List of ResourcePreset resources.
          type: array
          items:
            $ref: '#/components/schemas/ResourcePreset'
        nextPageToken:
          description: |-
            This token allows you to get the next page of results for list requests. If the number of results
            is larger than [pageSize](/docs/managed-clickhouse/api-ref/ResourcePreset/list#query_params), use the [nextPageToken](/docs/managed-clickhouse/api-ref/ResourcePreset/list#responses) as the value
            for the [pageToken](/docs/managed-clickhouse/api-ref/ResourcePreset/list#query_params) parameter in the next list request. Each subsequent
            list request will have its own [nextPageToken](/docs/managed-clickhouse/api-ref/ResourcePreset/list#responses) to continue paging through the results.
          type: string
    ListUsersResponse:
      type: object
      properties:
        users:
          description: List of ClickHouse User resources.
          type: array
          items:
            $ref: '#/components/schemas/User'
        nextPageToken:
          description: |-
            This token allows you to get the next page of results for list requests. If the number of results
            is larger than [pageSize](/docs/managed-clickhouse/api-ref/User/list#query_params), use the [nextPageToken](/docs/managed-clickhouse/api-ref/User/list#responses) as the value
            for the [pageToken](/docs/managed-clickhouse/api-ref/User/list#query_params) parameter in the next list request. Each subsequent
            list request will have its own [nextPageToken](/docs/managed-clickhouse/api-ref/User/list#responses) to continue paging through the results.
          type: string
    ListVersionsResponse:
      type: object
      properties:
        version:
          description: Requested list of available versions.
          type: array
          items:
            $ref: '#/components/schemas/Version'
        nextPageToken:
          description: |-
            This token allows you to get the next page of results for ListVersions requests,
            if the number of results is larger than [pageSize](/docs/managed-clickhouse/api-ref/Versions/list#query_params) specified in the request.
            To get the next page, specify the value of [nextPageToken](/docs/managed-clickhouse/api-ref/Versions/list#responses) as a value for
            the [pageToken](/docs/managed-clickhouse/api-ref/Versions/list#query_params) parameter in the next ListVerions request. Subsequent ListVersions
            requests will have their own [nextPageToken](/docs/managed-clickhouse/api-ref/Versions/list#responses) to continue paging through the results.
          type: string
    LogRecord:
      type: object
      properties:
        timestamp:
          description: |-
            Log record timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

            String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
          type: string
          format: date-time
        message:
          description: Contents of the log record.
          type: object
          additionalProperties:
            type: string
    MaintenanceOperation:
      description: A planned maintenance operation.
      type: object
      properties:
        info:
          description: |-
            Information about this maintenance operation.

            The maximum string length in characters is 256.
          type: string
        delayedUntil:
          description: |-
            Time until which this maintenance operation is delayed.

            String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
          type: string
          format: date-time
    MaintenanceWindow:
      description: A maintenance window settings.
      type: object
      allOf:
      - title: policy
        type: object
        maxProperties: 1
        properties:
          anytime:
            $ref: '#/components/schemas/AnytimeMaintenanceWindow'
            description: Maintenance operation can be scheduled anytime.
          weeklyMaintenanceWindow:
            $ref: '#/components/schemas/WeeklyMaintenanceWindow'
            description: Maintenance operation can be scheduled on a weekly basis.
    MlModel:
      type: object
      properties:
        name:
          description: Name of the the model.
          type: string
        clusterId:
          description: ID of the ClickHouse cluster that the model belongs to.
          type: string
        type:
          $ref: '#/components/schemas/MlModelType_in_MlModel_type'
        uri:
          description: Model file URL. You can only use models stored in Object Storage.
          type: string
    MlModelType:
      description: ' - ML_MODEL_TYPE_CATBOOST: CatBoost model.'
      type: string
      enum:
      - ML_MODEL_TYPE_CATBOOST
    Monitoring:
      description: Monitoring system metadata.
      type: object
      properties:
        name:
          description: Name of the monitoring system.
          type: string
        description:
          description: Description of the monitoring system.
          type: string
        link:
          description: Link to the monitoring system charts for the ClickHouse cluster.
          type: string
    MoveClusterMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the ClickHouse cluster being moved.
          type: string
        sourceFolderId:
          description: ID of the source folder.
          type: string
        destinationFolderId:
          description: ID of the destination folder.
          type: string
    MoveClusterRequest:
      type: object
      properties:
        destinationFolderId:
          description: |-
            Required.
            ID of the destination folder.

            The maximum string length in characters is 50.
          type: string
    Operation:
      description: An Operation resource. For more information, see [Operation](/docs/api-design-guide/concepts/operation).
      type: object
      allOf:
      - type: object
        properties:
          id:
            description: ID of the operation.
            type: string
          description:
            description: Description of the operation. 0-256 characters long.
            type: string
          createdAt:
            description: |-
              Creation timestamp.

              String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
            type: string
            format: date-time
          createdBy:
            description: ID of the user or service account who initiated the operation.
            type: string
          modifiedAt:
            description: |-
              The time when the Operation resource was last modified.

              String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
            type: string
            format: date-time
          done:
            description: |-
              If the value is `false`, it means the operation is still in progress.
              If `true`, the operation is completed, and either `error` or `response` is available.
            type: boolean
            format: boolean
          metadata:
            description: |-
              Service-specific metadata associated with the operation.
              It typically contains the ID of the target resource that the operation is performed on.
              Any method that returns a long-running operation should document the metadata type, if any.
            type: object
      - title: result
        type: object
        maxProperties: 1
        properties:
          error:
            $ref: '#/components/schemas/rpcStatus'
            description: The error result of the operation in case of failure or cancellation.
          response:
            description: |-
              The normal response of the operation in case of success.
              If the original method returns no data on success, such as Delete,
              the response is [google.protobuf.Empty](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty).
              If the original method is the standard Create/Update,
              the response should be the target resource of the operation.
              Any method that returns a long-running operation should document the response type, if any.
            type: object
    Permission:
      type: object
      properties:
        databaseName:
          description: Name of the database that the permission grants access to.
          type: string
    RescheduleMaintenanceMetadata:
      description: Rescheduled maintenance operation metadata.
      type: object
      properties:
        clusterId:
          description: Required. ID of the ClickHouse cluster.
          type: string
        delayedUntil:
          description: |-
            Required. The time until which this maintenance operation is to be delayed.

            String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
          type: string
          format: date-time
    RescheduleMaintenanceRequest:
      type: object
      properties:
        rescheduleType:
          $ref: '#/components/schemas/RescheduleMaintenanceRequestRescheduleType_in_RescheduleMaintenanceRequest_rescheduleType'
        delayedUntil:
          description: |-
            The time until which this maintenance operation should be delayed. The value should be ahead of the first time when the maintenance operation has been scheduled for no more than two weeks. The value can also point to the past moment of time if [reschedule_type.IMMEDIATE] reschedule type is chosen.

            String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
          type: string
          format: date-time
    RescheduleMaintenanceRequestRescheduleType:
      description: |2-
         - IMMEDIATE: Start the maintenance operation immediately.
         - NEXT_AVAILABLE_WINDOW: Start the maintenance operation within the next available maintenance window.
         - SPECIFIC_TIME: Start the maintenance operation at the specific time.
      type: string
      enum:
      - IMMEDIATE
      - NEXT_AVAILABLE_WINDOW
      - SPECIFIC_TIME
    ResourcePreset:
      description: A ResourcePreset resource for describing hardware configuration
        presets.
      type: object
      properties:
        id:
          description: ID of the ResourcePreset resource.
          type: string
        zoneIds:
          description: IDs of availability zones where the resource preset is available.
          type: array
          items:
            type: string
        cores:
          description: Number of CPU cores for a ClickHouse host created with the
            preset.
          type: string
          format: int64
        memory:
          description: RAM volume for a ClickHouse host created with the preset, in
            bytes.
          type: string
          format: int64
    Resources:
      type: object
      properties:
        resourcePresetId:
          description: |-
            ID of the preset for computational resources available to a host (CPU, memory etc.).
            All available presets are listed in the [documentation](/docs/managed-clickhouse/concepts/instance-types)
          type: string
        diskSize:
          description: Volume of the storage available to a host, in bytes.
          type: string
          format: int64
        diskTypeId:
          description: |-
            Type of the storage environment for the host.
            Possible values:
            * network-hdd - network HDD drive,
            * network-ssd - network SSD drive,
            * local-ssd - local SSD storage.
          type: string
    RestoreClusterMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the new ClickHouse cluster that is being created from
            a backup.
          type: string
        backupId:
          description: ID of the backup that is being used for creating a cluster.
          type: string
    RestoreClusterRequest:
      type: object
      properties:
        backupId:
          description: |-
            Required.
            ID of the backup to restore from. This backup will be used to create one cluster shard.
            To get the backup ID, use a [listBackups](/docs/managed-clickhouse/api-ref/Cluster/listBackups) request.
          type: string
        additionalBackupIds:
          description: |-
            Additional IDs of the backups to restore from.
            Each additional backup is responsible for restoring separate shard.
            Restored cluster will have len(additional_backup_ids)+1 shards in total.
            To get the backup ID, use a [listBackups](/docs/managed-clickhouse/api-ref/Cluster/listBackups) request.
          type: array
          items:
            type: string
        name:
          description: |-
            Required.
            Name of the new ClickHouse cluster. The name must be unique within the folder.

            The maximum string length in characters is 63.
            Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
          type: string
        description:
          description: |-
            Description of the new ClickHouse cluster.

            The maximum string length in characters is 256.
          type: string
        labels:
          description: |-
            Custom labels for the ClickHouse cluster as `key:value` pairs. Maximum 64 per resource.
            For example, "project": "mvp" or "source": "dictionary".

            No more than 64 per resource.
            The maximum string length in characters for each key is 63.
            Each key must match the regular expression `` [a-z][-_0-9a-z]* ``.
            The maximum string length in characters for each value is 63.
            Each value must match the regular expression `` [-_0-9a-z]* ``.
          type: object
          additionalProperties:
            type: string
        environment:
          $ref: '#/components/schemas/ClusterEnvironment_in_RestoreClusterRequest_environment'
        configSpec:
          $ref: '#/components/schemas/ConfigSpec_in_RestoreClusterRequest_configSpec'
        hostSpecs:
          description: |-
            Required.
            Configurations for ClickHouse hosts that should be created for
            the cluster that is being created from the backup.

            Must contain at least one element.
          type: array
          items:
            $ref: '#/components/schemas/HostSpec'
        networkId:
          description: |-
            Required.
            ID of the network to create the ClickHouse cluster in.

            The maximum string length in characters is 50.
          type: string
        folderId:
          description: |-
            ID of the folder to create the ClickHouse cluster in.

            The maximum string length in characters is 50.
          type: string
        serviceAccountId:
          description: ID of the service account used for access to Object Storage.
          type: string
        securityGroupIds:
          description: User security groups
          type: array
          items:
            type: string
    RevokeUserPermissionMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the ClickHouse cluster the user belongs to.
          type: string
        userName:
          description: Name of the user whose permission is being revoked.
          type: string
    RevokeUserPermissionRequest:
      type: object
      properties:
        databaseName:
          description: |-
            Name of the database that the user should lose access to.

            The maximum string length in characters is 63.
            Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
          type: string
    Service:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ServiceType_in_Service_type'
        health:
          $ref: '#/components/schemas/ServiceHealth_in_Service_health'
    ServiceHealth:
      description: |2-
         - UNKNOWN: Health of the server is unknown.
         - ALIVE: The server is working normally.
         - DEAD: The server is dead or unresponsive.
      type: string
      enum:
      - UNKNOWN
      - ALIVE
      - DEAD
      default: UNKNOWN
    ServiceType:
      description: |2-
         - CLICKHOUSE: The host is a ClickHouse server.
         - ZOOKEEPER: The host is a ZooKeeper server.
      type: string
      enum:
      - CLICKHOUSE
      - ZOOKEEPER
    Shard:
      type: object
      properties:
        name:
          description: Name of the shard.
          type: string
        clusterId:
          description: ID of the cluster that the shard belongs to.
          type: string
        config:
          $ref: '#/components/schemas/ShardConfig_in_Shard_config'
    ShardConfig:
      type: object
      properties:
        clickhouse:
          $ref: '#/components/schemas/ShardConfigClickhouse_in_ShardConfig_clickhouse'
    ShardConfigClickhouse:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/ClickhouseConfigSet_in_ShardConfigClickhouse_config'
        resources:
          $ref: '#/components/schemas/Resources_in_ShardConfigClickhouse_resources'
        weight:
          description: |-
            Relative weight of a shard considered when writing data to the cluster.
            For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/operations/table_engines/distributed/).
          type: integer
          format: int64
    ShardConfigSpec:
      type: object
      properties:
        clickhouse:
          $ref: '#/components/schemas/ShardConfigSpecClickhouse_in_ShardConfigSpec_clickhouse'
    ShardConfigSpecClickhouse:
      type: object
      properties:
        config:
          $ref: '#/components/schemas/ClickhouseConfig_in_ShardConfigSpecClickhouse_config'
        resources:
          $ref: '#/components/schemas/Resources_in_ShardConfigSpecClickhouse_resources'
        weight:
          description: |-
            Relative weight of the shard considered when writing data to the cluster.
            For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/operations/table_engines/distributed/).
          type: integer
          format: int64
    ShardGroup:
      type: object
      properties:
        name:
          description: Name of the shard group.
          type: string
        clusterId:
          description: ID of the ClickHouse cluster that the shard group belongs to.
          type: string
        description:
          description: Description of the shard group. 0-256 characters long.
          type: string
        shardNames:
          description: List of shard names contained in the shard group.
          type: array
          items:
            type: string
    StartClusterMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the ClickHouse cluster being started.
          type: string
    StopClusterMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the ClickHouse cluster being stopped.
          type: string
    StreamClusterLogsRequestServiceType:
      description: ' - CLICKHOUSE: Logs of ClickHouse activity.'
      type: string
      enum:
      - CLICKHOUSE
    StreamLogRecord:
      type: object
      properties:
        record:
          $ref: '#/components/schemas/LogRecord_in_StreamLogRecord_record'
        nextRecordToken:
          description: |-
            This token allows you to continue streaming logs starting from the exact
            same record. To continue streaming, specify value of [next_record_token[
            as value for the [recordToken](/docs/managed-clickhouse/api-ref/Cluster/streamLogs#query_params) parameter in the next StreamLogs request.
            This value is interchangeable with the [nextPageToken](/docs/managed-clickhouse/api-ref/Cluster/listLogs#responses) from ListLogs method.
          type: string
    TimeOfDay:
      description: |-
        Represents a time of day. The date and time zone are either not significant
        or are specified elsewhere. An API may choose to allow leap seconds. Related
        types are [google.type.Date](https://github.com/googleapis/googleapis/blob/master/google/type/date.proto) and [google.protobuf.Timestamp](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/timestamp.proto).
      type: object
      properties:
        hours:
          description: |-
            Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
            to allow the value "24:00:00" for scenarios like business closing time.
          type: integer
          format: int32
        minutes:
          description: Minutes of hour of day. Must be from 0 to 59.
          type: integer
          format: int32
        seconds:
          description: |-
            Seconds of minutes of the time. Must normally be from 0 to 59. An API may
            allow the value 60 if it allows leap-seconds.
          type: integer
          format: int32
        nanos:
          description: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
          type: integer
          format: int32
    UpdateClusterHostsMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the ClickHouse cluster to modify hosts in.
          type: string
        hostNames:
          description: Names of hosts that are being modified.
          type: array
          items:
            type: string
    UpdateClusterHostsRequest:
      type: object
      properties:
        updateHostSpecs:
          description: |-
            Required.
            New configurations to apply to hosts.

            Must contain at least one element.
          type: array
          items:
            $ref: '#/components/schemas/UpdateHostSpec'
    UpdateClusterMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the ClickHouse Cluster resource that is being updated.
          type: string
    UpdateClusterRequest:
      type: object
      properties:
        updateMask:
          $ref: '#/components/schemas/FieldMask_in_UpdateClusterRequest_updateMask'
        description:
          description: |-
            New description of the ClickHouse cluster.

            The maximum string length in characters is 256.
          type: string
        labels:
          description: |-
            Custom labels for the ClickHouse cluster as `key:value` pairs. Maximum 64 per resource.
            For example, "project": "mvp" or "source": "dictionary".

            The new set of labels will completely replace the old ones. To add a label, request the current
            set with the [get](/docs/managed-clickhouse/api-ref/Cluster/get) method, then send an [update](/docs/managed-clickhouse/api-ref/Cluster/update) request with the new label added to the set.

            No more than 64 per resource.
            The maximum string length in characters for each key is 63.
            Each key must match the regular expression `` [a-z][-_0-9a-z]* ``.
            The maximum string length in characters for each value is 63.
            Each value must match the regular expression `` [-_0-9a-z]* ``.
          type: object
          additionalProperties:
            type: string
        configSpec:
          $ref: '#/components/schemas/ConfigSpec_in_UpdateClusterRequest_configSpec'
        name:
          description: |-
            New name for the cluster.

            The maximum string length in characters is 63.
            Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
          type: string
        serviceAccountId:
          description: ID of the service account used for access to Object Storage.
          type: string
        maintenanceWindow:
          $ref: '#/components/schemas/MaintenanceWindow_in_UpdateClusterRequest_maintenanceWindow'
        securityGroupIds:
          description: User security groups
          type: array
          items:
            type: string
        deletionProtection:
          description: Deletion Protection inhibits deletion of the cluster
          type: boolean
          format: boolean
    UpdateClusterShardGroupMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the cluster that contains the shard group being updated.
          type: string
        shardGroupName:
          description: Name of the shard group that is being updated.
          type: string
    UpdateClusterShardGroupRequest:
      type: object
      properties:
        updateMask:
          $ref: '#/components/schemas/FieldMask_in_UpdateClusterShardGroupRequest_updateMask'
        description:
          description: Updated description of the shard group. 0-256 characters long.
          type: string
        shardNames:
          description: Updated list of shard names that belongs to the shard group.
          type: array
          items:
            type: string
    UpdateClusterShardMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the cluster that contains the shard being updated.
          type: string
        shardName:
          description: Name of the shard being updated.
          type: string
    UpdateClusterShardRequest:
      type: object
      properties:
        updateMask:
          $ref: '#/components/schemas/FieldMask_in_UpdateClusterShardRequest_updateMask'
        configSpec:
          $ref: '#/components/schemas/ShardConfigSpec_in_UpdateClusterShardRequest_configSpec'
    UpdateFormatSchemaMetadata:
      type: object
      properties:
        clusterId:
          type: string
        formatSchemaName:
          type: string
    UpdateFormatSchemaRequest:
      type: object
      properties:
        updateMask:
          $ref: '#/components/schemas/FieldMask_in_UpdateFormatSchemaRequest_updateMask'
        uri:
          type: string
    UpdateHostSpec:
      type: object
      properties:
        hostName:
          description: |-
            Required.
            Name of the host to update.
            To get the ClickHouse host name, use a [listHosts](/docs/managed-clickhouse/api-ref/Cluster/listHosts) request.
          type: string
        updateMask:
          $ref: '#/components/schemas/FieldMask_in_UpdateHostSpec_updateMask'
        assignPublicIp:
          description: Whether the host should get a public IP address on creation.
          type: boolean
          format: boolean
    UpdateMlModelMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the cluster that contains the model being updated.
          type: string
        mlModelName:
          description: Name of the the model that is being updated.
          type: string
    UpdateMlModelRequest:
      type: object
      properties:
        updateMask:
          $ref: '#/components/schemas/FieldMask_in_UpdateMlModelRequest_updateMask'
        uri:
          description: The new model file URL. You can only use models stored in Object
            Storage.
          type: string
    UpdateUserMetadata:
      type: object
      properties:
        clusterId:
          description: ID of the ClickHouse cluster the user belongs to.
          type: string
        userName:
          description: Name of the user that is being updated.
          type: string
    UpdateUserRequest:
      type: object
      properties:
        updateMask:
          $ref: '#/components/schemas/FieldMask_in_UpdateUserRequest_updateMask'
        password:
          description: |-
            New password for the user.

            The string length in characters must be 8-128.
          type: string
        permissions:
          description: New set of permissions for the user.
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        settings:
          $ref: '#/components/schemas/UserSettings_in_UpdateUserRequest_settings'
        quotas:
          type: array
          items:
            $ref: '#/components/schemas/UserQuota'
    User:
      description: "A ClickHouse User resource. For more information, see \nthe [Developer's
        guide](/docs/managed-clickhouse/concepts)."
      type: object
      properties:
        name:
          description: Name of the ClickHouse user.
          type: string
        clusterId:
          description: ID of the ClickHouse cluster the user belongs to.
          type: string
        permissions:
          description: Set of permissions granted to the user.
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        settings:
          $ref: '#/components/schemas/UserSettings_in_User_settings'
        quotas:
          description: Set of quotas assigned to the user.
          type: array
          items:
            $ref: '#/components/schemas/UserQuota'
    UserQuota:
      description: |-
        ClickHouse quota representation. Each quota associated with an user and limits it resource usage for an interval.
        See in-depth description [ClickHouse documentation](https://clickhouse.com/docs/en/operations/quotas/).
      type: object
      properties:
        intervalDuration:
          description: |-
            Duration of interval for quota in milliseconds.
            Minimal value is 1 second.

            The minimum value is 1000.
          type: integer
          format: int64
        queries:
          description: |-
            The total number of queries.
            0 - unlimited.

            The minimum value is 0.
          type: integer
          format: int64
        errors:
          description: |-
            The number of queries that threw exception.
            0 - unlimited.

            The minimum value is 0.
          type: integer
          format: int64
        resultRows:
          description: |-
            The total number of rows given as the result..
            0 - unlimited.

            The minimum value is 0.
          type: integer
          format: int64
        readRows:
          description: |-
            The total number of source rows read from tables for running the query, on all remote servers.
            0 - unlimited.

            The minimum value is 0.
          type: integer
          format: int64
        executionTime:
          description: |-
            The total query execution time, in milliseconds (wall time).
            0 - unlimited.

            The minimum value is 0.
          type: integer
          format: int64
    UserSettings:
      description: |-
        ClickHouse user settings. Supported settings are a limited subset of all settings
        described in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/).
      type: object
      properties:
        readonly:
          description: |-
            Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use `allowDdl` instead.
            * **0** (default)-no restrictions.
            * **1**-only read data queries are allowed.
            * **2**-read data and change settings queries are allowed.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).

            Acceptable values are 0 to 2, inclusive.
          type: integer
          format: int64
        allowDdl:
          description: |-
            Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).

            Default value: **true**.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
          type: boolean
          format: boolean
        insertQuorum:
          description: |-
            Enables or disables write quorum for ClickHouse cluster.
            If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.

            When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the `insertQuorumTimeout` expires.
            All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
            Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.

            You can use `selectSequentialConsistency` setting to read the data written with write quorum.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).

            The minimum value is 0.
          type: integer
          format: int64
        connectTimeout:
          description: |-
            Connection timeout in milliseconds.

            Value must be greater than **0** (default: **10000**, 10 seconds).

            Value must be greater than 0.
          type: integer
          format: int64
        receiveTimeout:
          description: |-
            Receive timeout in milliseconds.

            Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).

            Value must be greater than 0.
          type: integer
          format: int64
        sendTimeout:
          description: |-
            Send timeout in milliseconds.

            Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).

            Value must be greater than 0.
          type: integer
          format: int64
        insertQuorumTimeout:
          description: |-
            Quorum write timeout in milliseconds.

            If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the `insertQuorum` replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
            In this case, the client must send the query again to write the data block into the same or another replica.

            Minimum value: **1000**, 1 second (default: **60000**, 1 minute).

            The minimum value is 1000.
          type: integer
          format: int64
        selectSequentialConsistency:
          description: |-
            Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.

            Default value: **false** (sequential consistency is disabled).
          type: boolean
          format: boolean
        maxReplicaDelayForDistributedQueries:
          description: |-
            Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.

            Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).

            The minimum value is 1000.
          type: integer
          format: int64
        fallbackToStaleReplicasForDistributedQueries:
          description: |-
            Enables or disables query forcing to a stale replica in case the actual data is unavailable.
            If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
            This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.

            Default value: **true** (query forcing is enabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
          type: boolean
          format: boolean
        replicationAlterPartitionsSync:
          description: |-
            Wait mode for asynchronous actions in **ALTER** queries on replicated tables:

            * **0**-do not wait for replicas.
            * **1**-only wait for own execution (default).
            * **2**-wait for all replicas.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).

            Acceptable values are 0 to 2, inclusive.
          type: integer
          format: int64
        distributedProductMode:
          $ref: '#/components/schemas/UserSettingsDistributedProductMode_in_UserSettings_distributedProductMode'
        distributedAggregationMemoryEfficient:
          description: |-
            Enables of disables memory saving mode when doing distributed aggregation.

            When ClickHouse works with a distributed query, external aggregation is done on remote servers.
            Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.

            Default value: **false** (memory saving mode is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
          type: boolean
          format: boolean
        distributedDdlTaskTimeout:
          description: Timeout for DDL queries, in milliseconds.
          type: integer
          format: int64
        skipUnavailableShards:
          description: |-
            Enables or disables silent skipping of unavailable shards.

            A shard is considered unavailable if all its replicas are also unavailable.

            Default value: **false** (silent skipping is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
          type: boolean
          format: boolean
        compile:
          description: |-
            Enables or disables query compilation.
            If you execute a lot of structurally identical queries, then enable this setting.
            As a result, such queries may be executed faster due to use of queries' compiled parts.

            Use this setting in combination with `minCountToCompile` setting.

            Default value: **false** (compilation is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#compile).
          type: boolean
          format: boolean
        minCountToCompile:
          description: |-
            How many structurally identical queries ClickHouse has to encounter before they are compiled.

            Minimum value: **0** (default: **3**).

            For the **0** value compilation is synchronous: a query waits for compilation process to complete prior to continuing execution.
            It is recommended to set this value only for testing purposes.

            For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
            When a compiled part of query is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#min-count-to-compile).

            The minimum value is 0.
          type: integer
          format: int64
        compileExpressions:
          description: |-
            Enables or disables expression compilation.
            If you execute a lot of queries that contain identical expressions, then enable this setting.
            As a result, such queries may be executed faster due to use of compiled expressions.

            Use this setting in combination with `minCountToCompileExpression` setting.

            Default value: **false** (expression compilation is disabled).
          type: boolean
          format: boolean
        minCountToCompileExpression:
          description: |-
            How many identical expressions ClickHouse has to encounter before they are compiled.

            Minimum value: **0** (default: **3**).

            For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
            It is recommended to set this value only for testing purposes.

            For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
            When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.

            The minimum value is 0.
          type: integer
          format: int64
        maxBlockSize:
          description: |-
            The maximum block size for reading.

            Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
            The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.

            This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.

            Value must be greater than **0** (default: **65536**).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).

            Value must be greater than 0.
          type: integer
          format: int64
        minInsertBlockSizeRows:
          description: |-
            Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
            Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.

            Minimal value: **0**, block squashing is disabled (default: **1048576**).

            The minimum value is 0.
          type: integer
          format: int64
        minInsertBlockSizeBytes:
          description: |-
            Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
            Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.

            Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).

            The minimum value is 0.
          type: integer
          format: int64
        maxInsertBlockSize:
          description: |-
            Allows to form blocks of the specified size (in bytes) when inserting data in a table.
            This setting has effect only if server is creating such blocks by itself.

            Value must be greater than **0** (default: **1048576**).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).

            Value must be greater than 0.
          type: integer
          format: int64
        minBytesToUseDirectIo:
          description: |-
            Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).

            By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
            Such reading strategy is effective when the data volume is small.
            If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.

            If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.

            Minimal value and default value: **0**, Direct I/O is disabled.

            The minimum value is 0.
          type: integer
          format: int64
        useUncompressedCache:
          description: |-
            Determines whether to use the cache of uncompressed blocks, or not.
            Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
            Enable this setting for the users who instantiates small queries frequently.

            This setting has effect only for tables of the MergeTree family.

            Default value: **false** (uncompressed cache is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
          type: boolean
          format: boolean
        mergeTreeMaxRowsToUseCache:
          description: |-
            Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
            than the specified value.

            Use this setting in combination with `useUncompressedCache` setting.

            Value must be greater than **0** (default: **128x8192**).

            Value must be greater than 0.
          type: integer
          format: int64
        mergeTreeMaxBytesToUseCache:
          description: |-
            Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
            than the specified value.

            Use this setting in combination with `useUncompressedCache` setting.

            Value must be greater than **0** (default: **192x10x1024x1024**).

            Value must be greater than 0.
          type: integer
          format: int64
        mergeTreeMinRowsForConcurrentRead:
          description: |-
            Limits the minimum number of rows to be read from a file to enable concurrent read.
            If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.

            This setting has effect only for tables of the MergeTree family.

            Value must be greater than **0** (default: **20x8192**).

            Value must be greater than 0.
          type: integer
          format: int64
        mergeTreeMinBytesForConcurrentRead:
          description: |-
            Limits the number of bytes to be read from a file to enable concurrent read.
            If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.

            This setting has effect only for tables of the MergeTree family.

            Value must be greater than **0** (default: **24x10x1024x1024**).

            Value must be greater than 0.
          type: integer
          format: int64
        maxBytesBeforeExternalGroupBy:
          description: |-
            Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.

            By default, aggregation is done by employing hash table that resides in RAM.
            A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the `maxMemoryUsage` setting).
            For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.

            Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.

            When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the `maxMemoryUsage` setting value (by default, the maximum memory usage is limited to ten gigabytes).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).

            See also: the `distributedAggregationMemoryEfficient` setting.
          type: integer
          format: int64
        maxBytesBeforeExternalSort:
          description: This setting is equivalent of the `maxBytesBeforeExternalGroupBy`
            setting, except for it is for sort operation (**ORDER BY**), not aggregation.
          type: integer
          format: int64
        groupByTwoLevelThreshold:
          description: |-
            Sets the threshold of the number of keys, after that the two-level aggregation should be used.

            Minimal value: **0**, threshold is not set (default: **10000**).
          type: integer
          format: int64
        groupByTwoLevelThresholdBytes:
          description: |-
            Sets the threshold of the number of bytes, after that the two-level aggregation should be used.

            Minimal value: **0**, threshold is not set (default: **100000000**).
          type: integer
          format: int64
        priority:
          description: |-
            Sets the priority of a query.

            * **0**-priority is not used.
            * **1**-the highest priority.
            * and so on. The higher the number, the lower a query's priority.

            This setting should be set up for each query individually.

            If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.

            Minimal value and default value: **0**, priority is not used.

            The minimum value is 0.
          type: integer
          format: int64
        maxThreads:
          description: |-
            Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).

            This setting applies to threads that perform the same stages of the query processing pipeline in parallel.

            Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).

            Value must be greater than 0.
          type: integer
          format: int64
        maxMemoryUsage:
          description: |-
            Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
            This setting does not take server's free RAM amount or total RAM amount into account.

            This limitation is enforced for any user's single query on a single server.

            Minimal value: **0**, no limitation is set.
            Value that is set in the ClickHouse default config file: **10737418240** (10 GB).

            If you use `maxBytesBeforeExternalGroupBy` or `maxBytesBeforeExternalSort` setting, then it is recommended to set their values twice as low as `maxMemoryUsage` setting value.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).

            The minimum value is 0.
          type: integer
          format: int64
        maxMemoryUsageForUser:
          description: |-
            Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
            This setting does not take server's free RAM amount or total RAM amount into account.

            This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxNetworkBandwidth:
          description: |-
            The maximum speed of data exchange over the network in bytes per second for a query.

            Minimal value and default value: **0**, no limitation is set.
          type: integer
          format: int64
        maxNetworkBandwidthForUser:
          description: |-
            The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.

            Minimal value and default value: **0**, no limitation is set.
          type: integer
          format: int64
        forceIndexByDate:
          description: |-
            If enabled, query is not executed if the ClickHouse can't use index by date.
            This setting has effect only for tables of the MergeTree family.

            Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
          type: boolean
          format: boolean
        forcePrimaryKey:
          description: |-
            If enabled, query is not executed if the ClickHouse can't use index by primary key.
            This setting has effect only for tables of the MergeTree family.

            Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
          type: boolean
          format: boolean
        maxRowsToRead:
          description: |-
            Limits the maximum number of rows that can be read from a table when running a query.

            Minimal value and default value: **0**, no limitation is set.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesToRead:
          description: |-
            Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        readOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_readOverflowMode'
        maxRowsToGroupBy:
          description: |-
            Limits the maximum number of unique keys received from aggregation function.
            This setting helps to reduce RAM consumption while doing aggregation.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        groupByOverflowMode:
          $ref: '#/components/schemas/UserSettingsGroupByOverflowMode_in_UserSettings_groupByOverflowMode'
        maxRowsToSort:
          description: |-
            Limits the maximum number of rows that can be read from a table for sorting.
            This setting helps to reduce RAM consumption.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesToSort:
          description: |-
            Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
            This setting helps to reduce RAM consumption.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        sortOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_sortOverflowMode'
        maxResultRows:
          description: |-
            Limits the number of rows in the result.
            This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxResultBytes:
          description: |-
            Limits the number of bytes in the result.
            This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        resultOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_resultOverflowMode'
        maxRowsInDistinct:
          description: |-
            Limits the maximum number of different rows when using **DISTINCT**.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesInDistinct:
          description: |-
            Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.

            The minimum value is 0.
          type: integer
          format: int64
        distinctOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_distinctOverflowMode'
        maxRowsToTransfer:
          description: |-
            Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesToTransfer:
          description: |-
            Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
            table when using **GLOBAL IN**.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        transferOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_transferOverflowMode'
        maxExecutionTime:
          description: |-
            Limits the maximum query execution time in milliseconds.
            At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        timeoutOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_timeoutOverflowMode'
        maxRowsInSet:
          description: |-
            Limit on the number of rows in the set resulting from the execution of the IN section.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesInSet:
          description: |-
            Limit on the number of bytes in the set resulting from the execution of the IN section.

            The minimum value is 0.
          type: integer
          format: int64
        setOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_setOverflowMode'
        maxRowsInJoin:
          description: |-
            Limit on maximum size of the hash table for JOIN, in rows.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesInJoin:
          description: |-
            Limit on maximum size of the hash table for JOIN, in bytes.

            The minimum value is 0.
          type: integer
          format: int64
        joinOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_joinOverflowMode'
        maxColumnsToRead:
          description: |-
            Limits the maximum number of columns that can be read from a table in a single query.
            If the query requires to read more columns to complete, then it will be aborted.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxTemporaryColumns:
          description: |-
            Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxTemporaryNonConstColumns:
          description: |-
            Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxQuerySize:
          description: |-
            Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.

            Value must be greater than **0** (default: **262144**).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).

            Value must be greater than 0.
          type: integer
          format: int64
        maxAstDepth:
          description: |-
            Limits the maximum depth of query syntax tree.

            Executing a big and complex query may result in building a syntax tree of enormous depth.
            By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.

            For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
            A user can be forced to construct more optimized queries, if this setting is used.

            Value must be greater than **0** (default: **1000**).
            If a too small value is set, it may render ClickHouse unable to execute even simple queries.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).

            Value must be greater than 0.
          type: integer
          format: int64
        maxAstElements:
          description: |-
            Limits the maximum size of query syntax tree in number of nodes.

            Executing a big and complex query may result in building a syntax tree of enormous size.
            By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.

            Value must be greater than **0** (default: **50000**).
            If a too small value is set, it may render ClickHouse unable to execute even simple queries.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).

            Value must be greater than 0.
          type: integer
          format: int64
        maxExpandedAstElements:
          description: |-
            Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.

            Executing a big and complex query may result in building a syntax tree of enormous size.
            By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.

            Value must be greater than **0** (default: **500000**).
            If a too small value is set, it may render ClickHouse unable to execute even simple queries.

            Value must be greater than 0.
          type: integer
          format: int64
        minExecutionSpeed:
          description: |-
            Minimal execution speed in rows per second.

            The minimum value is 0.
          type: integer
          format: int64
        minExecutionSpeedBytes:
          description: |-
            Minimal execution speed in bytes per second.

            The minimum value is 0.
          type: integer
          format: int64
        countDistinctImplementation:
          $ref: '#/components/schemas/UserSettingsCountDistinctImplementation_in_UserSettings_countDistinctImplementation'
        inputFormatValuesInterpretExpressions:
          description: |-
            Enables or disables SQL parser if the fast stream parser cannot parse the data.

            Enable this setting, if the data that you want to insert into a table contains SQL expressions.

            For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
            With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.

            This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.

            Default value: **true** (SQL parser is enabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
          type: boolean
          format: boolean
        inputFormatDefaultsForOmittedFields:
          description: |-
            Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.

            Default value: **true** (replacing is enabled).
          type: boolean
          format: boolean
        outputFormatJsonQuote_64BitIntegers:
          description: |-
            Enables quoting of 64-bit integers in JSON output format.

            If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
            Otherwise, such integers will not be quoted.

            Default value: **false** (quoting 64-bit integers is disabled).
          type: boolean
          format: boolean
        outputFormatJsonQuoteDenormals:
          description: |-
            Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.

            Default value: **false** (special values do not present in output).
          type: boolean
          format: boolean
        lowCardinalityAllowInNativeFormat:
          description: |-
            Determines whether to use LowCardinality type in Native format.

            * **true** (default)-yes, use.
            * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.

            LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
            If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.

            If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
            Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.

            Official ClickHouse client works with LowCardinality columns out-of-the-box.

            Default value: **true** (LowCardinality columns are used in Native format).
          type: boolean
          format: boolean
        emptyResultForAggregationByEmptySet:
          description: |-
            Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).

            * **true**-ClickHouse will return an empty result for such queries.
            * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
          type: boolean
          format: boolean
        joinedSubqueryRequiresAlias:
          type: boolean
          format: boolean
        joinUseNulls:
          type: boolean
          format: boolean
        transformNullIn:
          type: boolean
          format: boolean
        httpConnectionTimeout:
          description: |-
            HTTP connection timeout, in milliseconds.

            Value must be greater than **0** (default: **1000**, 1 second).
          type: integer
          format: int64
        httpReceiveTimeout:
          description: |-
            HTTP receive timeout, in milliseconds.

            Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
          type: integer
          format: int64
        httpSendTimeout:
          description: |-
            HTTP send timeout, in milliseconds.

            Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
          type: integer
          format: int64
        enableHttpCompression:
          description: |-
            Enables or disables data compression in HTTP responses.

            By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
            Use this setting to command ClickHouse to compress the result when sending it via HTTP.

            Enable this setting and add the **Accept-Encoding: <compression method>** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.

            ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.

            Default value: **false** (compression is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
          type: boolean
          format: boolean
        sendProgressInHttpHeaders:
          description: |-
            Enables progress notifications using **X-ClickHouse-Progress** HTTP header.

            Default value: **false** (notifications disabled).
          type: boolean
          format: boolean
        httpHeadersProgressInterval:
          description: |-
            Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.

            Value must be greater than **0** (default: **100**).
          type: integer
          format: int64
        addHttpCorsHeader:
          description: |-
            Adds CORS header in HTTP responses.

            Default value: **false** (header is not added).
          type: boolean
          format: boolean
        quotaMode:
          $ref: '#/components/schemas/UserSettingsQuotaMode_in_UserSettings_quotaMode'
    UserSettingsCountDistinctImplementation:
      type: string
      enum:
      - COUNT_DISTINCT_IMPLEMENTATION_UNIQ
      - COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED
      - COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED_64
      - COUNT_DISTINCT_IMPLEMENTATION_UNIQ_HLL_12
      - COUNT_DISTINCT_IMPLEMENTATION_UNIQ_EXACT
    UserSettingsDistributedProductMode:
      description: |2-
         - DISTRIBUTED_PRODUCT_MODE_DENY: Default value. Prohibits using these types of subqueries (returns the "Double-distributed in/JOIN subqueries is denied" exception).
         - DISTRIBUTED_PRODUCT_MODE_LOCAL: Replaces the database and table in the subquery with local ones for the destination server (shard), leaving the normal IN/JOIN.
         - DISTRIBUTED_PRODUCT_MODE_GLOBAL: Replaces the IN/JOIN query with GLOBAL IN/GLOBAL JOIN.
         - DISTRIBUTED_PRODUCT_MODE_ALLOW: Allows the use of these types of subqueries.
      type: string
      enum:
      - DISTRIBUTED_PRODUCT_MODE_DENY
      - DISTRIBUTED_PRODUCT_MODE_LOCAL
      - DISTRIBUTED_PRODUCT_MODE_GLOBAL
      - DISTRIBUTED_PRODUCT_MODE_ALLOW
    UserSettingsGroupByOverflowMode:
      type: string
      enum:
      - GROUP_BY_OVERFLOW_MODE_THROW
      - GROUP_BY_OVERFLOW_MODE_BREAK
      - GROUP_BY_OVERFLOW_MODE_ANY
    UserSettingsOverflowMode:
      type: string
      enum:
      - OVERFLOW_MODE_THROW
      - OVERFLOW_MODE_BREAK
    UserSettingsQuotaMode:
      type: string
      enum:
      - QUOTA_MODE_DEFAULT
      - QUOTA_MODE_KEYED
      - QUOTA_MODE_KEYED_BY_IP
    UserSpec:
      type: object
      properties:
        name:
          description: |-
            Required.
            Name of the ClickHouse user.

            The maximum string length in characters is 63.
            Value must match the regular expression `` [a-zA-Z0-9_]* ``.
          type: string
        password:
          description: |-
            Required.
            Password of the ClickHouse user.

            The string length in characters must be 8-128.
          type: string
        permissions:
          description: Set of permissions to grant to the user. If not set, it's granted
            permissions to access all databases.
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        settings:
          $ref: '#/components/schemas/UserSettings_in_UserSpec_settings'
        quotas:
          description: Set of quotas assigned to the user.
          type: array
          items:
            $ref: '#/components/schemas/UserQuota'
    Version:
      type: object
      properties:
        id:
          description: ID of the version.
          type: string
        name:
          description: Name of the version.
          type: string
        deprecated:
          description: Whether version is deprecated.
          type: boolean
          format: boolean
        updatableTo:
          description: List of versions that can be updated from current.
          type: array
          items:
            type: string
    WeeklyMaintenanceWindow:
      description: Weelky maintenance window settings.
      type: object
      properties:
        day:
          $ref: '#/components/schemas/WeeklyMaintenanceWindowWeekDay_in_WeeklyMaintenanceWindow_day'
        hour:
          description: |-
            Hour of the day in UTC (in `HH` format).

            Acceptable values are 1 to 24, inclusive.
          type: string
          format: int64
    WeeklyMaintenanceWindowWeekDay:
      type: string
      enum:
      - MON
      - TUE
      - WED
      - THU
      - FRI
      - SAT
      - SUN
    rpcStatus:
      description: The error result of the operation in case of failure or cancellation.
      type: object
      properties:
        code:
          description: Error code. An enum value of [google.rpc.Code](https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto).
          type: integer
          format: int32
        message:
          description: An error message.
          type: string
        details:
          description: A list of messages that carry the error details.
          type: array
          items:
            type: object
    ShardConfigSpec_in_AddClusterShardRequest_configSpec:
      description: Configuration of the new shard.
      type: object
      properties:
        clickhouse:
          $ref: '#/components/schemas/ShardConfigSpecClickhouse_in_ShardConfigSpec_clickhouse'
    Resources_in_AddClusterZookeeperRequest_resources:
      description: Resources allocated to Zookeeper hosts.
      type: object
      properties:
        resourcePresetId:
          description: |-
            ID of the preset for computational resources available to a host (CPU, memory etc.).
            All available presets are listed in the [documentation](/docs/managed-clickhouse/concepts/instance-types)
          type: string
        diskSize:
          description: Volume of the storage available to a host, in bytes.
          type: string
          format: int64
        diskTypeId:
          description: |-
            Type of the storage environment for the host.
            Possible values:
            * network-hdd - network HDD drive,
            * network-ssd - network SSD drive,
            * local-ssd - local SSD storage.
          type: string
    ClickhouseConfigLogLevel_in_ClickhouseConfig_logLevel:
      description: 'Logging level for the ClickHouse cluster. Possible values: TRACE,
        DEBUG, INFORMATION, WARNING, ERROR.'
      type: string
      enum:
      - TRACE
      - DEBUG
      - INFORMATION
      - WARNING
      - ERROR
    ClickhouseConfigMergeTree_in_ClickhouseConfig_mergeTree:
      description: |-
        Settings for the MergeTree engine.
        See description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/#merge_tree).

        Options specific to the MergeTree table engine.
      type: object
      properties:
        replicatedDeduplicationWindow:
          description: Number of blocks of hashes to keep in ZooKeeper.
          type: integer
          format: int64
        replicatedDeduplicationWindowSeconds:
          description: Period of time to keep blocks of hashes for.
          type: integer
          format: int64
        partsToDelayInsert:
          description: If table contains at least that many active parts in single
            partition, artificially slow down insert into table.
          type: integer
          format: int64
        partsToThrowInsert:
          description: If more than this number active parts in single partition,
            throw 'Too many parts ...' exception.
          type: integer
          format: int64
        maxReplicatedMergesInQueue:
          description: How many tasks of merging and mutating parts are allowed simultaneously
            in ReplicatedMergeTree queue.
          type: integer
          format: int64
        numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge:
          description: |-
            If there is less than specified number of free entries in background pool (or replicated queue), start to lower
            maximum size of merge to process.
          type: integer
          format: int64
        maxBytesToMergeAtMinSpaceInPool:
          description: |-
            Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
            in replication queue).
          type: integer
          format: int64
        maxBytesToMergeAtMaxSpaceInPool:
          type: integer
          format: int64
    ClickhouseConfigKafka_in_ClickhouseConfig_kafka:
      type: object
      properties:
        securityProtocol:
          $ref: '#/components/schemas/ClickhouseConfigKafkaSecurityProtocol_in_ClickhouseConfigKafka_securityProtocol'
        saslMechanism:
          $ref: '#/components/schemas/ClickhouseConfigKafkaSaslMechanism_in_ClickhouseConfigKafka_saslMechanism'
        saslUsername:
          type: string
        saslPassword:
          type: string
    ClickhouseConfigRabbitmq_in_ClickhouseConfig_rabbitmq:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    ClickhouseConfigLogLevel_in_ClickhouseConfig_textLogLevel:
      description: 'Logging level for text_log system table. Possible values: TRACE,
        DEBUG, INFORMATION, WARNING, ERROR.'
      type: string
      enum:
      - TRACE
      - DEBUG
      - INFORMATION
      - WARNING
      - ERROR
    ClickhouseConfigCompressionMethod_in_ClickhouseConfigCompression_method:
      description: |-
        Compression method to use for the specified combination of `min_part_size` and `min_part_size_ratio`.

         - LZ4: [LZ4 compression algorithm](https://lz4.github.io/lz4/).
         - ZSTD: [Zstandard compression algorithm](https://facebook.github.io/zstd/).
      type: string
      enum:
      - LZ4
      - ZSTD
    ClickhouseConfigExternalDictionaryLayoutType_in_ClickhouseConfigExternalDictionaryLayout_type:
      description: |-
        Required.
        Layout type for an external dictionary.

         - FLAT: The entire dictionary is stored in memory in the form of flat arrays.
        Available for all dictionary sources.
         - HASHED: The entire dictionary is stored in memory in the form of a hash table.
        Available for all dictionary sources.
         - COMPLEX_KEY_HASHED: Similar to HASHED, to be used with composite keys.
        Available for all dictionary sources.
         - RANGE_HASHED: The entire dictionary is stored in memory in the form of a hash table,
        with an ordered array of ranges and their corresponding values.
        Available for all dictionary sources.
         - CACHE: The dictionary is stored in a cache with a set number of cells.
        Available for MySQL, ClickHouse and HTTP dictionary sources.
         - COMPLEX_KEY_CACHE: Similar to CACHE, to be used with composite keys.
        Available for MySQL, ClickHouse and HTTP dictionary sources.
      type: string
      enum:
      - FLAT
      - HASHED
      - COMPLEX_KEY_HASHED
      - RANGE_HASHED
      - CACHE
      - COMPLEX_KEY_CACHE
    ClickhouseConfigExternalDictionaryPostgresqlSourceSslMode_in_ClickhouseConfigExternalDictionaryPostgresqlSource_sslMode:
      description: |-
        Mode of SSL TCP/IP connection to the PostgreSQL host.
        For more details, see [PostgreSQL documentation](https://www.postgresql.org/docs/current/libpq-ssl.html).

         - DISABLE: Only try a non-SSL connection.
         - ALLOW: First try a non-SSL connection; if that fails, try an SSL connection.
         - PREFER: First try an SSL connection; if that fails, try a non-SSL connection.
         - VERIFY_CA: Only try an SSL connection, and verify that the server certificate is issued by a trusted certificate authority (CA).
         - VERIFY_FULL: Only try an SSL connection, verify that the server certificate is issued by a trusted CA and that the requested server host name matches that in the certificate.
      type: string
      enum:
      - DISABLE
      - ALLOW
      - PREFER
      - VERIFY_CA
      - VERIFY_FULL
    ClickhouseConfigExternalDictionaryStructureId_in_ClickhouseConfigExternalDictionaryStructure_id:
      description: |-
        Single numeric key column for the dictionary.

        Numeric key.
      type: object
      properties:
        name:
          description: |-
            Required.
            Name of the numeric key.
          type: string
    ClickhouseConfigExternalDictionaryStructureKey_in_ClickhouseConfigExternalDictionaryStructure_key:
      description: |-
        Composite key for the dictionary, containing of one or more key columns.
        For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).

        Complex key.
      type: object
      properties:
        attributes:
          description: |-
            Required.
            Attributes of a complex key.

            Must contain at least one element.
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryStructureAttribute'
    ClickhouseConfigExternalDictionaryStructureAttribute_in_ClickhouseConfigExternalDictionaryStructure_rangeMin:
      description: |-
        Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
        For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
      type: object
      properties:
        name:
          description: |-
            Required.
            Name of the column.
          type: string
        type:
          description: |-
            Required.
            Type of the column.
          type: string
        nullValue:
          description: Default value for an element without data (for example, an
            empty string).
          type: string
        expression:
          description: Expression, describing the attribute, if applicable.
          type: string
        hierarchical:
          description: |-
            Indication of hierarchy support.
            Default value: `false`.
          type: boolean
          format: boolean
        injective:
          description: |-
            Indication of injective mapping "id -> attribute".
            Default value: `false`.
          type: boolean
          format: boolean
    ClickhouseConfigExternalDictionaryStructureAttribute_in_ClickhouseConfigExternalDictionaryStructure_rangeMax:
      description: |-
        Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
        For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
      type: object
      properties:
        name:
          description: |-
            Required.
            Name of the column.
          type: string
        type:
          description: |-
            Required.
            Type of the column.
          type: string
        nullValue:
          description: Default value for an element without data (for example, an
            empty string).
          type: string
        expression:
          description: Expression, describing the attribute, if applicable.
          type: string
        hierarchical:
          description: |-
            Indication of hierarchy support.
            Default value: `false`.
          type: boolean
          format: boolean
        injective:
          description: |-
            Indication of injective mapping "id -> attribute".
            Default value: `false`.
          type: boolean
          format: boolean
    ClickhouseConfigKafkaSecurityProtocol_in_ClickhouseConfigKafka_securityProtocol:
      type: string
      enum:
      - SECURITY_PROTOCOL_PLAINTEXT
      - SECURITY_PROTOCOL_SSL
      - SECURITY_PROTOCOL_SASL_PLAINTEXT
      - SECURITY_PROTOCOL_SASL_SSL
    ClickhouseConfigKafkaSaslMechanism_in_ClickhouseConfigKafka_saslMechanism:
      type: string
      enum:
      - SASL_MECHANISM_GSSAPI
      - SASL_MECHANISM_PLAIN
      - SASL_MECHANISM_SCRAM_SHA_256
      - SASL_MECHANISM_SCRAM_SHA_512
    ClickhouseConfigKafka_in_ClickhouseConfigKafkaTopic_settings:
      description: Required.
      type: object
      properties:
        securityProtocol:
          $ref: '#/components/schemas/ClickhouseConfigKafkaSecurityProtocol_in_ClickhouseConfigKafka_securityProtocol'
        saslMechanism:
          $ref: '#/components/schemas/ClickhouseConfigKafkaSaslMechanism_in_ClickhouseConfigKafka_saslMechanism'
        saslUsername:
          type: string
        saslPassword:
          type: string
    ClickhouseConfig_in_ClickhouseConfigSet_effectiveConfig:
      description: |-
        Required.
        Effective settings for a ClickHouse cluster (a combination of settings defined
        in `userConfig` and `defaultConfig`).

        ClickHouse configuration options. Detailed description for each set of options
        is available in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/).

        Any options not listed here are not supported.
      type: object
      properties:
        logLevel:
          $ref: '#/components/schemas/ClickhouseConfigLogLevel_in_ClickhouseConfig_logLevel'
        mergeTree:
          $ref: '#/components/schemas/ClickhouseConfigMergeTree_in_ClickhouseConfig_mergeTree'
        compression:
          description: |-
            Compression settings for the ClickHouse cluster.
            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/#compression).
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigCompression'
        dictionaries:
          description: |-
            Configuration of external dictionaries to be used by the ClickHouse cluster.
            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts/).
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionary'
        graphiteRollup:
          description: |-
            Settings for thinning Graphite data.
            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigGraphiteRollup'
        kafka:
          $ref: '#/components/schemas/ClickhouseConfigKafka_in_ClickhouseConfig_kafka'
        kafkaTopics:
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigKafkaTopic'
        rabbitmq:
          $ref: '#/components/schemas/ClickhouseConfigRabbitmq_in_ClickhouseConfig_rabbitmq'
        maxConnections:
          description: |-
            Maximum number of inbound connections.

            The minimum value is 10.
          type: integer
          format: int64
        maxConcurrentQueries:
          description: |-
            Maximum number of simultaneously processed requests.

            The minimum value is 10.
          type: integer
          format: int64
        keepAliveTimeout:
          description: Number of milliseconds that ClickHouse waits for incoming requests
            before closing the connection.
          type: integer
          format: int64
        uncompressedCacheSize:
          description: Cache size (in bytes) for uncompressed data used by MergeTree
            tables.
          type: integer
          format: int64
        markCacheSize:
          description: |-
            Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.

            Value must be greater than 0.
          type: integer
          format: int64
        maxTableSizeToDrop:
          description: Maximum size of the table that can be deleted using a DROP
            query.
          type: integer
          format: int64
        maxPartitionSizeToDrop:
          description: Maximum size of the partition that can be deleted using a DROP
            query.
          type: integer
          format: int64
        builtinDictionariesReloadInterval:
          description: The setting is deprecated and has no effect.
          deprecated: true
          type: integer
          format: int64
        timezone:
          description: The server's time zone to be used in DateTime fields conversions.
            Specified as an IANA identifier.
          type: string
        geobaseUri:
          description: Address of the archive with the user geobase in Object Storage.
          type: string
        queryLogRetentionSize:
          description: |-
            The maximum size that query_log can grow to before old data will be removed. If set to 0, automatic removal of
            query_log data based on size is disabled.
          type: integer
          format: int64
        queryLogRetentionTime:
          description: |-
            The maximum time that query_log records will be retained before removal. If set to 0, automatic removal of
            query_log data based on time is disabled.
          type: integer
          format: int64
        queryThreadLogEnabled:
          description: Whether query_thread_log system table is enabled.
          type: boolean
          format: boolean
        queryThreadLogRetentionSize:
          description: |-
            The maximum size that query_thread_log can grow to before old data will be removed. If set to 0, automatic removal of
            query_thread_log data based on size is disabled.
          type: integer
          format: int64
        queryThreadLogRetentionTime:
          description: |-
            The maximum time that query_thread_log records will be retained before removal. If set to 0, automatic removal of
            query_thread_log data based on time is disabled.
          type: integer
          format: int64
        partLogRetentionSize:
          description: |-
            The maximum size that part_log can grow to before old data will be removed. If set to 0, automatic removal of
            part_log data based on size is disabled.
          type: integer
          format: int64
        partLogRetentionTime:
          description: |-
            The maximum time that part_log records will be retained before removal. If set to 0, automatic removal of
            part_log data based on time is disabled.
          type: integer
          format: int64
        metricLogEnabled:
          description: Whether metric_log system table is enabled.
          type: boolean
          format: boolean
        metricLogRetentionSize:
          description: |-
            The maximum size that metric_log can grow to before old data will be removed. If set to 0, automatic removal of
            metric_log data based on size is disabled.
          type: integer
          format: int64
        metricLogRetentionTime:
          description: |-
            The maximum time that metric_log records will be retained before removal. If set to 0, automatic removal of
            metric_log data based on time is disabled.
          type: integer
          format: int64
        traceLogEnabled:
          description: Whether trace_log system table is enabled.
          type: boolean
          format: boolean
        traceLogRetentionSize:
          description: |-
            The maximum size that trace_log can grow to before old data will be removed. If set to 0, automatic removal of
            trace_log data based on size is disabled.
          type: integer
          format: int64
        traceLogRetentionTime:
          description: |-
            The maximum time that trace_log records will be retained before removal. If set to 0, automatic removal of
            trace_log data based on time is disabled.
          type: integer
          format: int64
        textLogEnabled:
          description: Whether text_log system table is enabled.
          type: boolean
          format: boolean
        textLogRetentionSize:
          description: |-
            The maximum size that text_log can grow to before old data will be removed. If set to 0, automatic removal of
            text_log data based on size is disabled.
          type: integer
          format: int64
        textLogRetentionTime:
          description: |-
            The maximum time that text_log records will be retained before removal. If set to 0, automatic removal of
            text_log data based on time is disabled.
          type: integer
          format: int64
        textLogLevel:
          $ref: '#/components/schemas/ClickhouseConfigLogLevel_in_ClickhouseConfig_textLogLevel'
        backgroundPoolSize:
          description: Value must be greater than 0.
          type: integer
          format: int64
        backgroundSchedulePoolSize:
          description: Value must be greater than 0.
          type: integer
          format: int64
    ClickhouseConfig_in_ClickhouseConfigSet_userConfig:
      description: |-
        User-defined settings for a ClickHouse cluster.

        ClickHouse configuration options. Detailed description for each set of options
        is available in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/).

        Any options not listed here are not supported.
      type: object
      properties:
        logLevel:
          $ref: '#/components/schemas/ClickhouseConfigLogLevel_in_ClickhouseConfig_logLevel'
        mergeTree:
          $ref: '#/components/schemas/ClickhouseConfigMergeTree_in_ClickhouseConfig_mergeTree'
        compression:
          description: |-
            Compression settings for the ClickHouse cluster.
            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/#compression).
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigCompression'
        dictionaries:
          description: |-
            Configuration of external dictionaries to be used by the ClickHouse cluster.
            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts/).
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionary'
        graphiteRollup:
          description: |-
            Settings for thinning Graphite data.
            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigGraphiteRollup'
        kafka:
          $ref: '#/components/schemas/ClickhouseConfigKafka_in_ClickhouseConfig_kafka'
        kafkaTopics:
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigKafkaTopic'
        rabbitmq:
          $ref: '#/components/schemas/ClickhouseConfigRabbitmq_in_ClickhouseConfig_rabbitmq'
        maxConnections:
          description: |-
            Maximum number of inbound connections.

            The minimum value is 10.
          type: integer
          format: int64
        maxConcurrentQueries:
          description: |-
            Maximum number of simultaneously processed requests.

            The minimum value is 10.
          type: integer
          format: int64
        keepAliveTimeout:
          description: Number of milliseconds that ClickHouse waits for incoming requests
            before closing the connection.
          type: integer
          format: int64
        uncompressedCacheSize:
          description: Cache size (in bytes) for uncompressed data used by MergeTree
            tables.
          type: integer
          format: int64
        markCacheSize:
          description: |-
            Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.

            Value must be greater than 0.
          type: integer
          format: int64
        maxTableSizeToDrop:
          description: Maximum size of the table that can be deleted using a DROP
            query.
          type: integer
          format: int64
        maxPartitionSizeToDrop:
          description: Maximum size of the partition that can be deleted using a DROP
            query.
          type: integer
          format: int64
        builtinDictionariesReloadInterval:
          description: The setting is deprecated and has no effect.
          deprecated: true
          type: integer
          format: int64
        timezone:
          description: The server's time zone to be used in DateTime fields conversions.
            Specified as an IANA identifier.
          type: string
        geobaseUri:
          description: Address of the archive with the user geobase in Object Storage.
          type: string
        queryLogRetentionSize:
          description: |-
            The maximum size that query_log can grow to before old data will be removed. If set to 0, automatic removal of
            query_log data based on size is disabled.
          type: integer
          format: int64
        queryLogRetentionTime:
          description: |-
            The maximum time that query_log records will be retained before removal. If set to 0, automatic removal of
            query_log data based on time is disabled.
          type: integer
          format: int64
        queryThreadLogEnabled:
          description: Whether query_thread_log system table is enabled.
          type: boolean
          format: boolean
        queryThreadLogRetentionSize:
          description: |-
            The maximum size that query_thread_log can grow to before old data will be removed. If set to 0, automatic removal of
            query_thread_log data based on size is disabled.
          type: integer
          format: int64
        queryThreadLogRetentionTime:
          description: |-
            The maximum time that query_thread_log records will be retained before removal. If set to 0, automatic removal of
            query_thread_log data based on time is disabled.
          type: integer
          format: int64
        partLogRetentionSize:
          description: |-
            The maximum size that part_log can grow to before old data will be removed. If set to 0, automatic removal of
            part_log data based on size is disabled.
          type: integer
          format: int64
        partLogRetentionTime:
          description: |-
            The maximum time that part_log records will be retained before removal. If set to 0, automatic removal of
            part_log data based on time is disabled.
          type: integer
          format: int64
        metricLogEnabled:
          description: Whether metric_log system table is enabled.
          type: boolean
          format: boolean
        metricLogRetentionSize:
          description: |-
            The maximum size that metric_log can grow to before old data will be removed. If set to 0, automatic removal of
            metric_log data based on size is disabled.
          type: integer
          format: int64
        metricLogRetentionTime:
          description: |-
            The maximum time that metric_log records will be retained before removal. If set to 0, automatic removal of
            metric_log data based on time is disabled.
          type: integer
          format: int64
        traceLogEnabled:
          description: Whether trace_log system table is enabled.
          type: boolean
          format: boolean
        traceLogRetentionSize:
          description: |-
            The maximum size that trace_log can grow to before old data will be removed. If set to 0, automatic removal of
            trace_log data based on size is disabled.
          type: integer
          format: int64
        traceLogRetentionTime:
          description: |-
            The maximum time that trace_log records will be retained before removal. If set to 0, automatic removal of
            trace_log data based on time is disabled.
          type: integer
          format: int64
        textLogEnabled:
          description: Whether text_log system table is enabled.
          type: boolean
          format: boolean
        textLogRetentionSize:
          description: |-
            The maximum size that text_log can grow to before old data will be removed. If set to 0, automatic removal of
            text_log data based on size is disabled.
          type: integer
          format: int64
        textLogRetentionTime:
          description: |-
            The maximum time that text_log records will be retained before removal. If set to 0, automatic removal of
            text_log data based on time is disabled.
          type: integer
          format: int64
        textLogLevel:
          $ref: '#/components/schemas/ClickhouseConfigLogLevel_in_ClickhouseConfig_textLogLevel'
        backgroundPoolSize:
          description: Value must be greater than 0.
          type: integer
          format: int64
        backgroundSchedulePoolSize:
          description: Value must be greater than 0.
          type: integer
          format: int64
    ClickhouseConfig_in_ClickhouseConfigSet_defaultConfig:
      description: |-
        Default configuration for a ClickHouse cluster.

        ClickHouse configuration options. Detailed description for each set of options
        is available in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/).

        Any options not listed here are not supported.
      type: object
      properties:
        logLevel:
          $ref: '#/components/schemas/ClickhouseConfigLogLevel_in_ClickhouseConfig_logLevel'
        mergeTree:
          $ref: '#/components/schemas/ClickhouseConfigMergeTree_in_ClickhouseConfig_mergeTree'
        compression:
          description: |-
            Compression settings for the ClickHouse cluster.
            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/#compression).
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigCompression'
        dictionaries:
          description: |-
            Configuration of external dictionaries to be used by the ClickHouse cluster.
            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts/).
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionary'
        graphiteRollup:
          description: |-
            Settings for thinning Graphite data.
            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigGraphiteRollup'
        kafka:
          $ref: '#/components/schemas/ClickhouseConfigKafka_in_ClickhouseConfig_kafka'
        kafkaTopics:
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigKafkaTopic'
        rabbitmq:
          $ref: '#/components/schemas/ClickhouseConfigRabbitmq_in_ClickhouseConfig_rabbitmq'
        maxConnections:
          description: |-
            Maximum number of inbound connections.

            The minimum value is 10.
          type: integer
          format: int64
        maxConcurrentQueries:
          description: |-
            Maximum number of simultaneously processed requests.

            The minimum value is 10.
          type: integer
          format: int64
        keepAliveTimeout:
          description: Number of milliseconds that ClickHouse waits for incoming requests
            before closing the connection.
          type: integer
          format: int64
        uncompressedCacheSize:
          description: Cache size (in bytes) for uncompressed data used by MergeTree
            tables.
          type: integer
          format: int64
        markCacheSize:
          description: |-
            Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.

            Value must be greater than 0.
          type: integer
          format: int64
        maxTableSizeToDrop:
          description: Maximum size of the table that can be deleted using a DROP
            query.
          type: integer
          format: int64
        maxPartitionSizeToDrop:
          description: Maximum size of the partition that can be deleted using a DROP
            query.
          type: integer
          format: int64
        builtinDictionariesReloadInterval:
          description: The setting is deprecated and has no effect.
          deprecated: true
          type: integer
          format: int64
        timezone:
          description: The server's time zone to be used in DateTime fields conversions.
            Specified as an IANA identifier.
          type: string
        geobaseUri:
          description: Address of the archive with the user geobase in Object Storage.
          type: string
        queryLogRetentionSize:
          description: |-
            The maximum size that query_log can grow to before old data will be removed. If set to 0, automatic removal of
            query_log data based on size is disabled.
          type: integer
          format: int64
        queryLogRetentionTime:
          description: |-
            The maximum time that query_log records will be retained before removal. If set to 0, automatic removal of
            query_log data based on time is disabled.
          type: integer
          format: int64
        queryThreadLogEnabled:
          description: Whether query_thread_log system table is enabled.
          type: boolean
          format: boolean
        queryThreadLogRetentionSize:
          description: |-
            The maximum size that query_thread_log can grow to before old data will be removed. If set to 0, automatic removal of
            query_thread_log data based on size is disabled.
          type: integer
          format: int64
        queryThreadLogRetentionTime:
          description: |-
            The maximum time that query_thread_log records will be retained before removal. If set to 0, automatic removal of
            query_thread_log data based on time is disabled.
          type: integer
          format: int64
        partLogRetentionSize:
          description: |-
            The maximum size that part_log can grow to before old data will be removed. If set to 0, automatic removal of
            part_log data based on size is disabled.
          type: integer
          format: int64
        partLogRetentionTime:
          description: |-
            The maximum time that part_log records will be retained before removal. If set to 0, automatic removal of
            part_log data based on time is disabled.
          type: integer
          format: int64
        metricLogEnabled:
          description: Whether metric_log system table is enabled.
          type: boolean
          format: boolean
        metricLogRetentionSize:
          description: |-
            The maximum size that metric_log can grow to before old data will be removed. If set to 0, automatic removal of
            metric_log data based on size is disabled.
          type: integer
          format: int64
        metricLogRetentionTime:
          description: |-
            The maximum time that metric_log records will be retained before removal. If set to 0, automatic removal of
            metric_log data based on time is disabled.
          type: integer
          format: int64
        traceLogEnabled:
          description: Whether trace_log system table is enabled.
          type: boolean
          format: boolean
        traceLogRetentionSize:
          description: |-
            The maximum size that trace_log can grow to before old data will be removed. If set to 0, automatic removal of
            trace_log data based on size is disabled.
          type: integer
          format: int64
        traceLogRetentionTime:
          description: |-
            The maximum time that trace_log records will be retained before removal. If set to 0, automatic removal of
            trace_log data based on time is disabled.
          type: integer
          format: int64
        textLogEnabled:
          description: Whether text_log system table is enabled.
          type: boolean
          format: boolean
        textLogRetentionSize:
          description: |-
            The maximum size that text_log can grow to before old data will be removed. If set to 0, automatic removal of
            text_log data based on size is disabled.
          type: integer
          format: int64
        textLogRetentionTime:
          description: |-
            The maximum time that text_log records will be retained before removal. If set to 0, automatic removal of
            text_log data based on time is disabled.
          type: integer
          format: int64
        textLogLevel:
          $ref: '#/components/schemas/ClickhouseConfigLogLevel_in_ClickhouseConfig_textLogLevel'
        backgroundPoolSize:
          description: Value must be greater than 0.
          type: integer
          format: int64
        backgroundSchedulePoolSize:
          description: Value must be greater than 0.
          type: integer
          format: int64
    ClusterEnvironment_in_Cluster_environment:
      description: |-
        Deployment environment of the ClickHouse cluster.

         - PRODUCTION: Stable environment with a conservative update policy:
        only hotfixes are applied during regular maintenance.
         - PRESTABLE: Environment with more aggressive update policy: new versions
        are rolled out irrespective of backward compatibility.
      type: string
      enum:
      - PRODUCTION
      - PRESTABLE
    ClusterConfig_in_Cluster_config:
      description: Configuration of the ClickHouse cluster.
      type: object
      properties:
        version:
          description: Version of the ClickHouse server software.
          type: string
        clickhouse:
          $ref: '#/components/schemas/ClusterConfigClickhouse_in_ClusterConfig_clickhouse'
        zookeeper:
          $ref: '#/components/schemas/ClusterConfigZookeeper_in_ClusterConfig_zookeeper'
        backupWindowStart:
          $ref: '#/components/schemas/TimeOfDay_in_ClusterConfig_backupWindowStart'
        access:
          $ref: '#/components/schemas/Access_in_ClusterConfig_access'
        cloudStorage:
          $ref: '#/components/schemas/CloudStorage_in_ClusterConfig_cloudStorage'
        sqlDatabaseManagement:
          description: Whether database management through SQL commands is enabled.
          type: boolean
          format: boolean
        sqlUserManagement:
          description: Whether user management through SQL commands is enabled.
          type: boolean
          format: boolean
        embeddedKeeper:
          description: Whether cluster should use embedded Keeper instead of Zookeeper.
          type: boolean
          format: boolean
    ClusterHealth_in_Cluster_health:
      description: |-
        Aggregated cluster health.

         - HEALTH_UNKNOWN: State of the cluster is unknown (`health` for every host in the cluster is UNKNOWN).
         - ALIVE: Cluster is alive and well (`health` for every host in the cluster is ALIVE).
         - DEAD: Cluster is inoperable (`health` for every host in the cluster is DEAD).
         - DEGRADED: Cluster is working below capacity (`health` for at least one host in the cluster is not ALIVE).
      type: string
      enum:
      - HEALTH_UNKNOWN
      - ALIVE
      - DEAD
      - DEGRADED
      default: HEALTH_UNKNOWN
    ClusterStatus_in_Cluster_status:
      description: |-
        Current state of the cluster.

         - STATUS_UNKNOWN: Cluster state is unknown.
         - CREATING: Cluster is being created.
         - RUNNING: Cluster is running normally.
         - ERROR: Cluster encountered a problem and cannot operate.
         - UPDATING: Cluster is being updated.
         - STOPPING: Cluster is stopping.
         - STOPPED: Cluster stopped.
         - STARTING: Cluster is starting.
      type: string
      enum:
      - STATUS_UNKNOWN
      - CREATING
      - RUNNING
      - ERROR
      - UPDATING
      - STOPPING
      - STOPPED
      - STARTING
      default: STATUS_UNKNOWN
    MaintenanceWindow_in_Cluster_maintenanceWindow:
      description: |-
        Maintenance window for the cluster.

        A maintenance window settings.
      type: object
      allOf:
      - title: policy
        type: object
        maxProperties: 1
        properties:
          anytime:
            $ref: '#/components/schemas/AnytimeMaintenanceWindow'
            description: Maintenance operation can be scheduled anytime.
          weeklyMaintenanceWindow:
            $ref: '#/components/schemas/WeeklyMaintenanceWindow'
            description: Maintenance operation can be scheduled on a weekly basis.
    MaintenanceOperation_in_Cluster_plannedOperation:
      description: |-
        Planned maintenance operation to be started for the cluster within the nearest [maintenanceWindow](/docs/managed-clickhouse/api-ref/Cluster#representation).

        A planned maintenance operation.
      type: object
      properties:
        info:
          description: |-
            Information about this maintenance operation.

            The maximum string length in characters is 256.
          type: string
        delayedUntil:
          description: |-
            Time until which this maintenance operation is delayed.

            String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
          type: string
          format: date-time
    ClusterConfigClickhouse_in_ClusterConfig_clickhouse:
      description: Configuration and resource allocation for ClickHouse hosts.
      type: object
      properties:
        config:
          $ref: '#/components/schemas/ClickhouseConfigSet_in_ClusterConfigClickhouse_config'
        resources:
          $ref: '#/components/schemas/Resources_in_ClusterConfigClickhouse_resources'
    ClusterConfigZookeeper_in_ClusterConfig_zookeeper:
      description: Configuration and resource allocation for ZooKeeper hosts.
      type: object
      properties:
        resources:
          $ref: '#/components/schemas/Resources_in_ClusterConfigZookeeper_resources'
    TimeOfDay_in_ClusterConfig_backupWindowStart:
      description: |-
        Time to start the daily backup, in the UTC timezone.

        Represents a time of day. The date and time zone are either not significant
        or are specified elsewhere. An API may choose to allow leap seconds. Related
        types are [google.type.Date](https://github.com/googleapis/googleapis/blob/master/google/type/date.proto) and [google.protobuf.Timestamp](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/timestamp.proto).
      type: object
      properties:
        hours:
          description: |-
            Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
            to allow the value "24:00:00" for scenarios like business closing time.
          type: integer
          format: int32
        minutes:
          description: Minutes of hour of day. Must be from 0 to 59.
          type: integer
          format: int32
        seconds:
          description: |-
            Seconds of minutes of the time. Must normally be from 0 to 59. An API may
            allow the value 60 if it allows leap-seconds.
          type: integer
          format: int32
        nanos:
          description: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
          type: integer
          format: int32
    Access_in_ClusterConfig_access:
      description: Access policy for external services.
      type: object
      properties:
        dataLens:
          description: Allow to export data from the cluster to DataLens.
          type: boolean
          format: boolean
        webSql:
          description: |-
            Allow SQL queries to the cluster databases from the management console.

            See [SQL queries in the management console](/docs/managed-clickhouse/operations/web-sql-query) for more details.
          type: boolean
          format: boolean
        metrika:
          description: |-
            Allow to import data from Yandex Metrica and AppMetrica to the cluster.

            See [AppMetrica documentation](https://appmetrica.yandex.com/docs/cloud/index.html) for more details.
          type: boolean
          format: boolean
        serverless:
          description: Allow access to cluster for Serverless.
          type: boolean
          format: boolean
        dataTransfer:
          description: Allow access for DataTransfer
          type: boolean
          format: boolean
        yandexQuery:
          description: Allow access for Query
          type: boolean
          format: boolean
    CloudStorage_in_ClusterConfig_cloudStorage:
      type: object
      properties:
        enabled:
          description: Whether to use Object Storage for storing ClickHouse data.
          type: boolean
          format: boolean
        moveFactor:
          description: Acceptable values are 0 to 1, inclusive.
          type: number
          format: double
        dataCacheEnabled:
          type: boolean
          format: boolean
        dataCacheMaxSize:
          type: integer
          format: int64
    ClickhouseConfigSet_in_ClusterConfigClickhouse_config:
      description: Configuration settings of a ClickHouse server.
      type: object
      properties:
        effectiveConfig:
          $ref: '#/components/schemas/ClickhouseConfig_in_ClickhouseConfigSet_effectiveConfig'
        userConfig:
          $ref: '#/components/schemas/ClickhouseConfig_in_ClickhouseConfigSet_userConfig'
        defaultConfig:
          $ref: '#/components/schemas/ClickhouseConfig_in_ClickhouseConfigSet_defaultConfig'
    Resources_in_ClusterConfigClickhouse_resources:
      description: Resources allocated to ClickHouse hosts.
      type: object
      properties:
        resourcePresetId:
          description: |-
            ID of the preset for computational resources available to a host (CPU, memory etc.).
            All available presets are listed in the [documentation](/docs/managed-clickhouse/concepts/instance-types)
          type: string
        diskSize:
          description: Volume of the storage available to a host, in bytes.
          type: string
          format: int64
        diskTypeId:
          description: |-
            Type of the storage environment for the host.
            Possible values:
            * network-hdd - network HDD drive,
            * network-ssd - network SSD drive,
            * local-ssd - local SSD storage.
          type: string
    Resources_in_ClusterConfigZookeeper_resources:
      description: Resources allocated to ZooKeeper hosts.
      type: object
      properties:
        resourcePresetId:
          description: |-
            ID of the preset for computational resources available to a host (CPU, memory etc.).
            All available presets are listed in the [documentation](/docs/managed-clickhouse/concepts/instance-types)
          type: string
        diskSize:
          description: Volume of the storage available to a host, in bytes.
          type: string
          format: int64
        diskTypeId:
          description: |-
            Type of the storage environment for the host.
            Possible values:
            * network-hdd - network HDD drive,
            * network-ssd - network SSD drive,
            * local-ssd - local SSD storage.
          type: string
    ConfigSpecClickhouse_in_ConfigSpec_clickhouse:
      description: Configuration and resources for a ClickHouse server.
      type: object
      properties:
        config:
          $ref: '#/components/schemas/ClickhouseConfig_in_ConfigSpecClickhouse_config'
        resources:
          $ref: '#/components/schemas/Resources_in_ConfigSpecClickhouse_resources'
    ConfigSpecZookeeper_in_ConfigSpec_zookeeper:
      description: Configuration and resources for a ZooKeeper server.
      type: object
      properties:
        resources:
          $ref: '#/components/schemas/Resources_in_ConfigSpecZookeeper_resources'
    TimeOfDay_in_ConfigSpec_backupWindowStart:
      description: |-
        Time to start the daily backup, in the UTC timezone.

        Represents a time of day. The date and time zone are either not significant
        or are specified elsewhere. An API may choose to allow leap seconds. Related
        types are [google.type.Date](https://github.com/googleapis/googleapis/blob/master/google/type/date.proto) and [google.protobuf.Timestamp](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/timestamp.proto).
      type: object
      properties:
        hours:
          description: |-
            Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
            to allow the value "24:00:00" for scenarios like business closing time.
          type: integer
          format: int32
        minutes:
          description: Minutes of hour of day. Must be from 0 to 59.
          type: integer
          format: int32
        seconds:
          description: |-
            Seconds of minutes of the time. Must normally be from 0 to 59. An API may
            allow the value 60 if it allows leap-seconds.
          type: integer
          format: int32
        nanos:
          description: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
          type: integer
          format: int32
    Access_in_ConfigSpec_access:
      description: |-
        Access policy for external services.

        If you want a specific service to access the ClickHouse cluster, then set the necessary values in this policy.
      type: object
      properties:
        dataLens:
          description: Allow to export data from the cluster to DataLens.
          type: boolean
          format: boolean
        webSql:
          description: |-
            Allow SQL queries to the cluster databases from the management console.

            See [SQL queries in the management console](/docs/managed-clickhouse/operations/web-sql-query) for more details.
          type: boolean
          format: boolean
        metrika:
          description: |-
            Allow to import data from Yandex Metrica and AppMetrica to the cluster.

            See [AppMetrica documentation](https://appmetrica.yandex.com/docs/cloud/index.html) for more details.
          type: boolean
          format: boolean
        serverless:
          description: Allow access to cluster for Serverless.
          type: boolean
          format: boolean
        dataTransfer:
          description: Allow access for DataTransfer
          type: boolean
          format: boolean
        yandexQuery:
          description: Allow access for Query
          type: boolean
          format: boolean
    CloudStorage_in_ConfigSpec_cloudStorage:
      type: object
      properties:
        enabled:
          description: Whether to use Object Storage for storing ClickHouse data.
          type: boolean
          format: boolean
        moveFactor:
          description: Acceptable values are 0 to 1, inclusive.
          type: number
          format: double
        dataCacheEnabled:
          type: boolean
          format: boolean
        dataCacheMaxSize:
          type: integer
          format: int64
    ClickhouseConfig_in_ConfigSpecClickhouse_config:
      description: |-
        Configuration for a ClickHouse server.

        ClickHouse configuration options. Detailed description for each set of options
        is available in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/).

        Any options not listed here are not supported.
      type: object
      properties:
        logLevel:
          $ref: '#/components/schemas/ClickhouseConfigLogLevel_in_ClickhouseConfig_logLevel'
        mergeTree:
          $ref: '#/components/schemas/ClickhouseConfigMergeTree_in_ClickhouseConfig_mergeTree'
        compression:
          description: |-
            Compression settings for the ClickHouse cluster.
            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/#compression).
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigCompression'
        dictionaries:
          description: |-
            Configuration of external dictionaries to be used by the ClickHouse cluster.
            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts/).
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionary'
        graphiteRollup:
          description: |-
            Settings for thinning Graphite data.
            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigGraphiteRollup'
        kafka:
          $ref: '#/components/schemas/ClickhouseConfigKafka_in_ClickhouseConfig_kafka'
        kafkaTopics:
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigKafkaTopic'
        rabbitmq:
          $ref: '#/components/schemas/ClickhouseConfigRabbitmq_in_ClickhouseConfig_rabbitmq'
        maxConnections:
          description: |-
            Maximum number of inbound connections.

            The minimum value is 10.
          type: integer
          format: int64
        maxConcurrentQueries:
          description: |-
            Maximum number of simultaneously processed requests.

            The minimum value is 10.
          type: integer
          format: int64
        keepAliveTimeout:
          description: Number of milliseconds that ClickHouse waits for incoming requests
            before closing the connection.
          type: integer
          format: int64
        uncompressedCacheSize:
          description: Cache size (in bytes) for uncompressed data used by MergeTree
            tables.
          type: integer
          format: int64
        markCacheSize:
          description: |-
            Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.

            Value must be greater than 0.
          type: integer
          format: int64
        maxTableSizeToDrop:
          description: Maximum size of the table that can be deleted using a DROP
            query.
          type: integer
          format: int64
        maxPartitionSizeToDrop:
          description: Maximum size of the partition that can be deleted using a DROP
            query.
          type: integer
          format: int64
        builtinDictionariesReloadInterval:
          description: The setting is deprecated and has no effect.
          deprecated: true
          type: integer
          format: int64
        timezone:
          description: The server's time zone to be used in DateTime fields conversions.
            Specified as an IANA identifier.
          type: string
        geobaseUri:
          description: Address of the archive with the user geobase in Object Storage.
          type: string
        queryLogRetentionSize:
          description: |-
            The maximum size that query_log can grow to before old data will be removed. If set to 0, automatic removal of
            query_log data based on size is disabled.
          type: integer
          format: int64
        queryLogRetentionTime:
          description: |-
            The maximum time that query_log records will be retained before removal. If set to 0, automatic removal of
            query_log data based on time is disabled.
          type: integer
          format: int64
        queryThreadLogEnabled:
          description: Whether query_thread_log system table is enabled.
          type: boolean
          format: boolean
        queryThreadLogRetentionSize:
          description: |-
            The maximum size that query_thread_log can grow to before old data will be removed. If set to 0, automatic removal of
            query_thread_log data based on size is disabled.
          type: integer
          format: int64
        queryThreadLogRetentionTime:
          description: |-
            The maximum time that query_thread_log records will be retained before removal. If set to 0, automatic removal of
            query_thread_log data based on time is disabled.
          type: integer
          format: int64
        partLogRetentionSize:
          description: |-
            The maximum size that part_log can grow to before old data will be removed. If set to 0, automatic removal of
            part_log data based on size is disabled.
          type: integer
          format: int64
        partLogRetentionTime:
          description: |-
            The maximum time that part_log records will be retained before removal. If set to 0, automatic removal of
            part_log data based on time is disabled.
          type: integer
          format: int64
        metricLogEnabled:
          description: Whether metric_log system table is enabled.
          type: boolean
          format: boolean
        metricLogRetentionSize:
          description: |-
            The maximum size that metric_log can grow to before old data will be removed. If set to 0, automatic removal of
            metric_log data based on size is disabled.
          type: integer
          format: int64
        metricLogRetentionTime:
          description: |-
            The maximum time that metric_log records will be retained before removal. If set to 0, automatic removal of
            metric_log data based on time is disabled.
          type: integer
          format: int64
        traceLogEnabled:
          description: Whether trace_log system table is enabled.
          type: boolean
          format: boolean
        traceLogRetentionSize:
          description: |-
            The maximum size that trace_log can grow to before old data will be removed. If set to 0, automatic removal of
            trace_log data based on size is disabled.
          type: integer
          format: int64
        traceLogRetentionTime:
          description: |-
            The maximum time that trace_log records will be retained before removal. If set to 0, automatic removal of
            trace_log data based on time is disabled.
          type: integer
          format: int64
        textLogEnabled:
          description: Whether text_log system table is enabled.
          type: boolean
          format: boolean
        textLogRetentionSize:
          description: |-
            The maximum size that text_log can grow to before old data will be removed. If set to 0, automatic removal of
            text_log data based on size is disabled.
          type: integer
          format: int64
        textLogRetentionTime:
          description: |-
            The maximum time that text_log records will be retained before removal. If set to 0, automatic removal of
            text_log data based on time is disabled.
          type: integer
          format: int64
        textLogLevel:
          $ref: '#/components/schemas/ClickhouseConfigLogLevel_in_ClickhouseConfig_textLogLevel'
        backgroundPoolSize:
          description: Value must be greater than 0.
          type: integer
          format: int64
        backgroundSchedulePoolSize:
          description: Value must be greater than 0.
          type: integer
          format: int64
    Resources_in_ConfigSpecClickhouse_resources:
      description: Resources allocated to ClickHouse hosts.
      type: object
      properties:
        resourcePresetId:
          description: |-
            ID of the preset for computational resources available to a host (CPU, memory etc.).
            All available presets are listed in the [documentation](/docs/managed-clickhouse/concepts/instance-types)
          type: string
        diskSize:
          description: Volume of the storage available to a host, in bytes.
          type: string
          format: int64
        diskTypeId:
          description: |-
            Type of the storage environment for the host.
            Possible values:
            * network-hdd - network HDD drive,
            * network-ssd - network SSD drive,
            * local-ssd - local SSD storage.
          type: string
    Resources_in_ConfigSpecZookeeper_resources:
      description: |-
        Resources allocated to ZooKeeper hosts. If not set, minimal available resources will be used.
        All available resource presets can be retrieved with a [list](/docs/managed-clickhouse/api-ref/ResourcePreset/list) request.
      type: object
      properties:
        resourcePresetId:
          description: |-
            ID of the preset for computational resources available to a host (CPU, memory etc.).
            All available presets are listed in the [documentation](/docs/managed-clickhouse/concepts/instance-types)
          type: string
        diskSize:
          description: Volume of the storage available to a host, in bytes.
          type: string
          format: int64
        diskTypeId:
          description: |-
            Type of the storage environment for the host.
            Possible values:
            * network-hdd - network HDD drive,
            * network-ssd - network SSD drive,
            * local-ssd - local SSD storage.
          type: string
    ClickhouseConfigExternalDictionary_in_CreateClusterExternalDictionaryRequest_externalDictionary:
      description: Configuration of the external dictionary.
      type: object
      allOf:
      - type: object
        properties:
          name:
            description: |-
              Required.
              Name of the external dictionary.
            type: string
          structure:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryStructure'
            description: |-
              Required.
              Set of attributes for the external dictionary.
              For in-depth description, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_structure/).
          layout:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryLayout'
            description: |-
              Required.
              Layout for storing the dictionary in memory.
              For in-depth description, see [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts_dict_layout/).
      - title: lifetime
        type: object
        maxProperties: 1
        properties:
          fixedLifetime:
            description: Fixed interval between dictionary updates.
            type: string
            format: int64
          lifetimeRange:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryRange'
            description: Range of intervals between dictionary updates for ClickHouse
              to choose from.
      - title: source
        type: object
        maxProperties: 1
        properties:
          httpSource:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryHttpSource'
            description: HTTP source for the dictionary.
          mysqlSource:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryMysqlSource'
            description: MySQL source for the dictionary.
          clickhouseSource:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryClickhouseSource'
            description: ClickHouse source for the dictionary.
          mongodbSource:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryMongodbSource'
            description: MongoDB source for the dictionary.
          postgresqlSource:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionaryPostgresqlSource'
            description: PostgreSQL source for the dictionary.
    ClusterEnvironment_in_CreateClusterRequest_environment:
      description: |-
        Required.
        Deployment environment of the ClickHouse cluster.

         - PRODUCTION: Stable environment with a conservative update policy:
        only hotfixes are applied during regular maintenance.
         - PRESTABLE: Environment with more aggressive update policy: new versions
        are rolled out irrespective of backward compatibility.
      type: string
      enum:
      - PRODUCTION
      - PRESTABLE
    ConfigSpec_in_CreateClusterRequest_configSpec:
      description: |-
        Required.
        Configuration and resources for hosts that should be created for the ClickHouse cluster.
      type: object
      properties:
        version:
          description: Version of the ClickHouse server software.
          type: string
        clickhouse:
          $ref: '#/components/schemas/ConfigSpecClickhouse_in_ConfigSpec_clickhouse'
        zookeeper:
          $ref: '#/components/schemas/ConfigSpecZookeeper_in_ConfigSpec_zookeeper'
        backupWindowStart:
          $ref: '#/components/schemas/TimeOfDay_in_ConfigSpec_backupWindowStart'
        access:
          $ref: '#/components/schemas/Access_in_ConfigSpec_access'
        cloudStorage:
          $ref: '#/components/schemas/CloudStorage_in_ConfigSpec_cloudStorage'
        sqlDatabaseManagement:
          description: Whether database management through SQL commands is enabled.
          type: boolean
          format: boolean
        sqlUserManagement:
          description: Whether user management through SQL commands is enabled.
          type: boolean
          format: boolean
        adminPassword:
          description: Password for user 'admin' that has SQL user management access.
          type: string
        embeddedKeeper:
          description: Whether cluster should use embedded Keeper instead of Zookeeper
          type: boolean
          format: boolean
    DatabaseSpec_in_CreateDatabaseRequest_databaseSpec:
      description: |-
        Required.
        Configuration of the database to create.
      type: object
      properties:
        name:
          description: |-
            Required.
            Name of the ClickHouse database. 1-63 characters long.

            The maximum string length in characters is 63.
            Value must match the regular expression `` [a-zA-Z0-9_-]* ``.
          type: string
    FormatSchemaType_in_CreateFormatSchemaRequest_type:
      description: Required.
      type: string
      enum:
      - FORMAT_SCHEMA_TYPE_PROTOBUF
      - FORMAT_SCHEMA_TYPE_CAPNPROTO
    MlModelType_in_CreateMlModelRequest_type:
      description: |-
        Required.
        Type of the model.

         - ML_MODEL_TYPE_CATBOOST: CatBoost model.
      type: string
      enum:
      - ML_MODEL_TYPE_CATBOOST
    UserSpec_in_CreateUserRequest_userSpec:
      description: |-
        Required.
        Properties of the user to be created.
      type: object
      properties:
        name:
          description: |-
            Required.
            Name of the ClickHouse user.

            The maximum string length in characters is 63.
            Value must match the regular expression `` [a-zA-Z0-9_]* ``.
          type: string
        password:
          description: |-
            Required.
            Password of the ClickHouse user.

            The string length in characters must be 8-128.
          type: string
        permissions:
          description: Set of permissions to grant to the user. If not set, it's granted
            permissions to access all databases.
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        settings:
          $ref: '#/components/schemas/UserSettings_in_UserSpec_settings'
        quotas:
          description: Set of quotas assigned to the user.
          type: array
          items:
            $ref: '#/components/schemas/UserQuota'
    FormatSchemaType_in_FormatSchema_type:
      type: string
      enum:
      - FORMAT_SCHEMA_TYPE_PROTOBUF
      - FORMAT_SCHEMA_TYPE_CAPNPROTO
    Permission_in_GrantUserPermissionRequest_permission:
      description: Permission that should be granted to the specified user.
      type: object
      properties:
        databaseName:
          description: Name of the database that the permission grants access to.
          type: string
    HostType_in_Host_type:
      description: |-
        Type of the host.

         - CLICKHOUSE: ClickHouse host.
         - ZOOKEEPER: ZooKeeper host.
      type: string
      enum:
      - CLICKHOUSE
      - ZOOKEEPER
    Resources_in_Host_resources:
      description: Resources allocated to the ClickHouse host.
      type: object
      properties:
        resourcePresetId:
          description: |-
            ID of the preset for computational resources available to a host (CPU, memory etc.).
            All available presets are listed in the [documentation](/docs/managed-clickhouse/concepts/instance-types)
          type: string
        diskSize:
          description: Volume of the storage available to a host, in bytes.
          type: string
          format: int64
        diskTypeId:
          description: |-
            Type of the storage environment for the host.
            Possible values:
            * network-hdd - network HDD drive,
            * network-ssd - network SSD drive,
            * local-ssd - local SSD storage.
          type: string
    HostHealth_in_Host_health:
      description: |-
        Status code of the aggregated health of the host.

         - UNKNOWN: Health of the host is unknown.
         - ALIVE: The host is performing all its functions normally.
         - DEAD: The host is inoperable, and cannot perform any of its essential functions.
         - DEGRADED: The host is degraded, and can perform only some of its essential functions.
      type: string
      enum:
      - UNKNOWN
      - ALIVE
      - DEAD
      - DEGRADED
      default: UNKNOWN
    HostType_in_HostSpec_type:
      description: |-
        Required.
        Type of the host to be deployed.

         - CLICKHOUSE: ClickHouse host.
         - ZOOKEEPER: ZooKeeper host.
      type: string
      enum:
      - CLICKHOUSE
      - ZOOKEEPER
    MlModelType_in_MlModel_type:
      description: |-
        Type of the model.

         - ML_MODEL_TYPE_CATBOOST: CatBoost model.
      type: string
      enum:
      - ML_MODEL_TYPE_CATBOOST
    RescheduleMaintenanceRequestRescheduleType_in_RescheduleMaintenanceRequest_rescheduleType:
      description: |-
        Required.
        The type of reschedule request.

         - IMMEDIATE: Start the maintenance operation immediately.
         - NEXT_AVAILABLE_WINDOW: Start the maintenance operation within the next available maintenance window.
         - SPECIFIC_TIME: Start the maintenance operation at the specific time.
      type: string
      enum:
      - IMMEDIATE
      - NEXT_AVAILABLE_WINDOW
      - SPECIFIC_TIME
    ClusterEnvironment_in_RestoreClusterRequest_environment:
      description: |-
        Required.
        Deployment environment of the new ClickHouse cluster.

         - PRODUCTION: Stable environment with a conservative update policy:
        only hotfixes are applied during regular maintenance.
         - PRESTABLE: Environment with more aggressive update policy: new versions
        are rolled out irrespective of backward compatibility.
      type: string
      enum:
      - PRODUCTION
      - PRESTABLE
    ConfigSpec_in_RestoreClusterRequest_configSpec:
      description: |-
        Required.
        Configuration for the ClickHouse cluster to be created.
      type: object
      properties:
        version:
          description: Version of the ClickHouse server software.
          type: string
        clickhouse:
          $ref: '#/components/schemas/ConfigSpecClickhouse_in_ConfigSpec_clickhouse'
        zookeeper:
          $ref: '#/components/schemas/ConfigSpecZookeeper_in_ConfigSpec_zookeeper'
        backupWindowStart:
          $ref: '#/components/schemas/TimeOfDay_in_ConfigSpec_backupWindowStart'
        access:
          $ref: '#/components/schemas/Access_in_ConfigSpec_access'
        cloudStorage:
          $ref: '#/components/schemas/CloudStorage_in_ConfigSpec_cloudStorage'
        sqlDatabaseManagement:
          description: Whether database management through SQL commands is enabled.
          type: boolean
          format: boolean
        sqlUserManagement:
          description: Whether user management through SQL commands is enabled.
          type: boolean
          format: boolean
        adminPassword:
          description: Password for user 'admin' that has SQL user management access.
          type: string
        embeddedKeeper:
          description: Whether cluster should use embedded Keeper instead of Zookeeper
          type: boolean
          format: boolean
    ServiceType_in_Service_type:
      description: |-
        Type of the service provided by the host.

         - CLICKHOUSE: The host is a ClickHouse server.
         - ZOOKEEPER: The host is a ZooKeeper server.
      type: string
      enum:
      - CLICKHOUSE
      - ZOOKEEPER
    ServiceHealth_in_Service_health:
      description: |-
        Status code of server availability.

         - UNKNOWN: Health of the server is unknown.
         - ALIVE: The server is working normally.
         - DEAD: The server is dead or unresponsive.
      type: string
      enum:
      - UNKNOWN
      - ALIVE
      - DEAD
      default: UNKNOWN
    ShardConfig_in_Shard_config:
      description: Configuration of the shard.
      type: object
      properties:
        clickhouse:
          $ref: '#/components/schemas/ShardConfigClickhouse_in_ShardConfig_clickhouse'
    ShardConfigClickhouse_in_ShardConfig_clickhouse:
      description: ClickHouse configuration for a shard.
      type: object
      properties:
        config:
          $ref: '#/components/schemas/ClickhouseConfigSet_in_ShardConfigClickhouse_config'
        resources:
          $ref: '#/components/schemas/Resources_in_ShardConfigClickhouse_resources'
        weight:
          description: |-
            Relative weight of a shard considered when writing data to the cluster.
            For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/operations/table_engines/distributed/).
          type: integer
          format: int64
    ClickhouseConfigSet_in_ShardConfigClickhouse_config:
      description: ClickHouse settings for a shard.
      type: object
      properties:
        effectiveConfig:
          $ref: '#/components/schemas/ClickhouseConfig_in_ClickhouseConfigSet_effectiveConfig'
        userConfig:
          $ref: '#/components/schemas/ClickhouseConfig_in_ClickhouseConfigSet_userConfig'
        defaultConfig:
          $ref: '#/components/schemas/ClickhouseConfig_in_ClickhouseConfigSet_defaultConfig'
    Resources_in_ShardConfigClickhouse_resources:
      description: Computational resources for a shard.
      type: object
      properties:
        resourcePresetId:
          description: |-
            ID of the preset for computational resources available to a host (CPU, memory etc.).
            All available presets are listed in the [documentation](/docs/managed-clickhouse/concepts/instance-types)
          type: string
        diskSize:
          description: Volume of the storage available to a host, in bytes.
          type: string
          format: int64
        diskTypeId:
          description: |-
            Type of the storage environment for the host.
            Possible values:
            * network-hdd - network HDD drive,
            * network-ssd - network SSD drive,
            * local-ssd - local SSD storage.
          type: string
    ShardConfigSpecClickhouse_in_ShardConfigSpec_clickhouse:
      description: ClickHouse configuration for a shard.
      type: object
      properties:
        config:
          $ref: '#/components/schemas/ClickhouseConfig_in_ShardConfigSpecClickhouse_config'
        resources:
          $ref: '#/components/schemas/Resources_in_ShardConfigSpecClickhouse_resources'
        weight:
          description: |-
            Relative weight of the shard considered when writing data to the cluster.
            For details, see [ClickHouse documentation](https://clickhouse.com/docs/en/operations/table_engines/distributed/).
          type: integer
          format: int64
    ClickhouseConfig_in_ShardConfigSpecClickhouse_config:
      description: |-
        ClickHouse settings for the shard.

        ClickHouse configuration options. Detailed description for each set of options
        is available in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/).

        Any options not listed here are not supported.
      type: object
      properties:
        logLevel:
          $ref: '#/components/schemas/ClickhouseConfigLogLevel_in_ClickhouseConfig_logLevel'
        mergeTree:
          $ref: '#/components/schemas/ClickhouseConfigMergeTree_in_ClickhouseConfig_mergeTree'
        compression:
          description: |-
            Compression settings for the ClickHouse cluster.
            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/#compression).
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigCompression'
        dictionaries:
          description: |-
            Configuration of external dictionaries to be used by the ClickHouse cluster.
            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/query_language/dicts/external_dicts/).
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigExternalDictionary'
        graphiteRollup:
          description: |-
            Settings for thinning Graphite data.
            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigGraphiteRollup'
        kafka:
          $ref: '#/components/schemas/ClickhouseConfigKafka_in_ClickhouseConfig_kafka'
        kafkaTopics:
          type: array
          items:
            $ref: '#/components/schemas/ClickhouseConfigKafkaTopic'
        rabbitmq:
          $ref: '#/components/schemas/ClickhouseConfigRabbitmq_in_ClickhouseConfig_rabbitmq'
        maxConnections:
          description: |-
            Maximum number of inbound connections.

            The minimum value is 10.
          type: integer
          format: int64
        maxConcurrentQueries:
          description: |-
            Maximum number of simultaneously processed requests.

            The minimum value is 10.
          type: integer
          format: int64
        keepAliveTimeout:
          description: Number of milliseconds that ClickHouse waits for incoming requests
            before closing the connection.
          type: integer
          format: int64
        uncompressedCacheSize:
          description: Cache size (in bytes) for uncompressed data used by MergeTree
            tables.
          type: integer
          format: int64
        markCacheSize:
          description: |-
            Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.

            Value must be greater than 0.
          type: integer
          format: int64
        maxTableSizeToDrop:
          description: Maximum size of the table that can be deleted using a DROP
            query.
          type: integer
          format: int64
        maxPartitionSizeToDrop:
          description: Maximum size of the partition that can be deleted using a DROP
            query.
          type: integer
          format: int64
        builtinDictionariesReloadInterval:
          description: The setting is deprecated and has no effect.
          deprecated: true
          type: integer
          format: int64
        timezone:
          description: The server's time zone to be used in DateTime fields conversions.
            Specified as an IANA identifier.
          type: string
        geobaseUri:
          description: Address of the archive with the user geobase in Object Storage.
          type: string
        queryLogRetentionSize:
          description: |-
            The maximum size that query_log can grow to before old data will be removed. If set to 0, automatic removal of
            query_log data based on size is disabled.
          type: integer
          format: int64
        queryLogRetentionTime:
          description: |-
            The maximum time that query_log records will be retained before removal. If set to 0, automatic removal of
            query_log data based on time is disabled.
          type: integer
          format: int64
        queryThreadLogEnabled:
          description: Whether query_thread_log system table is enabled.
          type: boolean
          format: boolean
        queryThreadLogRetentionSize:
          description: |-
            The maximum size that query_thread_log can grow to before old data will be removed. If set to 0, automatic removal of
            query_thread_log data based on size is disabled.
          type: integer
          format: int64
        queryThreadLogRetentionTime:
          description: |-
            The maximum time that query_thread_log records will be retained before removal. If set to 0, automatic removal of
            query_thread_log data based on time is disabled.
          type: integer
          format: int64
        partLogRetentionSize:
          description: |-
            The maximum size that part_log can grow to before old data will be removed. If set to 0, automatic removal of
            part_log data based on size is disabled.
          type: integer
          format: int64
        partLogRetentionTime:
          description: |-
            The maximum time that part_log records will be retained before removal. If set to 0, automatic removal of
            part_log data based on time is disabled.
          type: integer
          format: int64
        metricLogEnabled:
          description: Whether metric_log system table is enabled.
          type: boolean
          format: boolean
        metricLogRetentionSize:
          description: |-
            The maximum size that metric_log can grow to before old data will be removed. If set to 0, automatic removal of
            metric_log data based on size is disabled.
          type: integer
          format: int64
        metricLogRetentionTime:
          description: |-
            The maximum time that metric_log records will be retained before removal. If set to 0, automatic removal of
            metric_log data based on time is disabled.
          type: integer
          format: int64
        traceLogEnabled:
          description: Whether trace_log system table is enabled.
          type: boolean
          format: boolean
        traceLogRetentionSize:
          description: |-
            The maximum size that trace_log can grow to before old data will be removed. If set to 0, automatic removal of
            trace_log data based on size is disabled.
          type: integer
          format: int64
        traceLogRetentionTime:
          description: |-
            The maximum time that trace_log records will be retained before removal. If set to 0, automatic removal of
            trace_log data based on time is disabled.
          type: integer
          format: int64
        textLogEnabled:
          description: Whether text_log system table is enabled.
          type: boolean
          format: boolean
        textLogRetentionSize:
          description: |-
            The maximum size that text_log can grow to before old data will be removed. If set to 0, automatic removal of
            text_log data based on size is disabled.
          type: integer
          format: int64
        textLogRetentionTime:
          description: |-
            The maximum time that text_log records will be retained before removal. If set to 0, automatic removal of
            text_log data based on time is disabled.
          type: integer
          format: int64
        textLogLevel:
          $ref: '#/components/schemas/ClickhouseConfigLogLevel_in_ClickhouseConfig_textLogLevel'
        backgroundPoolSize:
          description: Value must be greater than 0.
          type: integer
          format: int64
        backgroundSchedulePoolSize:
          description: Value must be greater than 0.
          type: integer
          format: int64
    Resources_in_ShardConfigSpecClickhouse_resources:
      description: Computational resources for the shard.
      type: object
      properties:
        resourcePresetId:
          description: |-
            ID of the preset for computational resources available to a host (CPU, memory etc.).
            All available presets are listed in the [documentation](/docs/managed-clickhouse/concepts/instance-types)
          type: string
        diskSize:
          description: Volume of the storage available to a host, in bytes.
          type: string
          format: int64
        diskTypeId:
          description: |-
            Type of the storage environment for the host.
            Possible values:
            * network-hdd - network HDD drive,
            * network-ssd - network SSD drive,
            * local-ssd - local SSD storage.
          type: string
    LogRecord_in_StreamLogRecord_record:
      description: One of the requested log records.
      type: object
      properties:
        timestamp:
          description: |-
            Log record timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.

            String in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
          type: string
          format: date-time
        message:
          description: Contents of the log record.
          type: object
          additionalProperties:
            type: string
    FieldMask_in_UpdateClusterRequest_updateMask:
      description: |-
        Field mask that specifies which fields of the ClickHouse Cluster resource should be updated.

        A comma-separated names off ALL fields to be updated.
        Оnly the specified fields will be changed. The others will be left untouched.
        If the field is specified in `` updateMask `` and no value for that field was sent in the request,
        the field's value will be reset to the default. The default value for most fields is null or 0.

        If `` updateMask `` is not sent in the request, all fields' values will be updated.
        Fields specified in the request will be updated to provided values.
        The rest of the fields will be reset to the default.
      type: string
    ConfigSpec_in_UpdateClusterRequest_configSpec:
      description: New configuration and resources for hosts in the cluster.
      type: object
      properties:
        version:
          description: Version of the ClickHouse server software.
          type: string
        clickhouse:
          $ref: '#/components/schemas/ConfigSpecClickhouse_in_ConfigSpec_clickhouse'
        zookeeper:
          $ref: '#/components/schemas/ConfigSpecZookeeper_in_ConfigSpec_zookeeper'
        backupWindowStart:
          $ref: '#/components/schemas/TimeOfDay_in_ConfigSpec_backupWindowStart'
        access:
          $ref: '#/components/schemas/Access_in_ConfigSpec_access'
        cloudStorage:
          $ref: '#/components/schemas/CloudStorage_in_ConfigSpec_cloudStorage'
        sqlDatabaseManagement:
          description: Whether database management through SQL commands is enabled.
          type: boolean
          format: boolean
        sqlUserManagement:
          description: Whether user management through SQL commands is enabled.
          type: boolean
          format: boolean
        adminPassword:
          description: Password for user 'admin' that has SQL user management access.
          type: string
        embeddedKeeper:
          description: Whether cluster should use embedded Keeper instead of Zookeeper
          type: boolean
          format: boolean
    MaintenanceWindow_in_UpdateClusterRequest_maintenanceWindow:
      description: |-
        New maintenance window settings for the cluster.

        A maintenance window settings.
      type: object
      allOf:
      - title: policy
        type: object
        maxProperties: 1
        properties:
          anytime:
            $ref: '#/components/schemas/AnytimeMaintenanceWindow'
            description: Maintenance operation can be scheduled anytime.
          weeklyMaintenanceWindow:
            $ref: '#/components/schemas/WeeklyMaintenanceWindow'
            description: Maintenance operation can be scheduled on a weekly basis.
    FieldMask_in_UpdateClusterShardGroupRequest_updateMask:
      description: |-
        A comma-separated names off ALL fields to be updated.
        Оnly the specified fields will be changed. The others will be left untouched.
        If the field is specified in `` updateMask `` and no value for that field was sent in the request,
        the field's value will be reset to the default. The default value for most fields is null or 0.

        If `` updateMask `` is not sent in the request, all fields' values will be updated.
        Fields specified in the request will be updated to provided values.
        The rest of the fields will be reset to the default.
      type: string
    FieldMask_in_UpdateClusterShardRequest_updateMask:
      description: |-
        Field mask that specifies which attributes of the ClickHouse shard should be updated.

        A comma-separated names off ALL fields to be updated.
        Оnly the specified fields will be changed. The others will be left untouched.
        If the field is specified in `` updateMask `` and no value for that field was sent in the request,
        the field's value will be reset to the default. The default value for most fields is null or 0.

        If `` updateMask `` is not sent in the request, all fields' values will be updated.
        Fields specified in the request will be updated to provided values.
        The rest of the fields will be reset to the default.
      type: string
    ShardConfigSpec_in_UpdateClusterShardRequest_configSpec:
      description: New configuration for the specified shard.
      type: object
      properties:
        clickhouse:
          $ref: '#/components/schemas/ShardConfigSpecClickhouse_in_ShardConfigSpec_clickhouse'
    FieldMask_in_UpdateFormatSchemaRequest_updateMask:
      description: |-
        A comma-separated names off ALL fields to be updated.
        Оnly the specified fields will be changed. The others will be left untouched.
        If the field is specified in `` updateMask `` and no value for that field was sent in the request,
        the field's value will be reset to the default. The default value for most fields is null or 0.

        If `` updateMask `` is not sent in the request, all fields' values will be updated.
        Fields specified in the request will be updated to provided values.
        The rest of the fields will be reset to the default.
      type: string
    FieldMask_in_UpdateHostSpec_updateMask:
      description: |-
        Field mask that specifies which fields of the ClickHouse host should be updated.

        A comma-separated names off ALL fields to be updated.
        Оnly the specified fields will be changed. The others will be left untouched.
        If the field is specified in `` updateMask `` and no value for that field was sent in the request,
        the field's value will be reset to the default. The default value for most fields is null or 0.

        If `` updateMask `` is not sent in the request, all fields' values will be updated.
        Fields specified in the request will be updated to provided values.
        The rest of the fields will be reset to the default.
      type: string
    FieldMask_in_UpdateMlModelRequest_updateMask:
      description: |-
        A comma-separated names off ALL fields to be updated.
        Оnly the specified fields will be changed. The others will be left untouched.
        If the field is specified in `` updateMask `` and no value for that field was sent in the request,
        the field's value will be reset to the default. The default value for most fields is null or 0.

        If `` updateMask `` is not sent in the request, all fields' values will be updated.
        Fields specified in the request will be updated to provided values.
        The rest of the fields will be reset to the default.
      type: string
    FieldMask_in_UpdateUserRequest_updateMask:
      description: |-
        Field mask that specifies which attributes of the ClickHouse user should be updated.

        A comma-separated names off ALL fields to be updated.
        Оnly the specified fields will be changed. The others will be left untouched.
        If the field is specified in `` updateMask `` and no value for that field was sent in the request,
        the field's value will be reset to the default. The default value for most fields is null or 0.

        If `` updateMask `` is not sent in the request, all fields' values will be updated.
        Fields specified in the request will be updated to provided values.
        The rest of the fields will be reset to the default.
      type: string
    UserSettings_in_UpdateUserRequest_settings:
      description: |-
        ClickHouse user settings. Supported settings are a limited subset of all settings
        described in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/).
      type: object
      properties:
        readonly:
          description: |-
            Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use `allowDdl` instead.
            * **0** (default)-no restrictions.
            * **1**-only read data queries are allowed.
            * **2**-read data and change settings queries are allowed.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).

            Acceptable values are 0 to 2, inclusive.
          type: integer
          format: int64
        allowDdl:
          description: |-
            Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).

            Default value: **true**.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
          type: boolean
          format: boolean
        insertQuorum:
          description: |-
            Enables or disables write quorum for ClickHouse cluster.
            If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.

            When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the `insertQuorumTimeout` expires.
            All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
            Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.

            You can use `selectSequentialConsistency` setting to read the data written with write quorum.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).

            The minimum value is 0.
          type: integer
          format: int64
        connectTimeout:
          description: |-
            Connection timeout in milliseconds.

            Value must be greater than **0** (default: **10000**, 10 seconds).

            Value must be greater than 0.
          type: integer
          format: int64
        receiveTimeout:
          description: |-
            Receive timeout in milliseconds.

            Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).

            Value must be greater than 0.
          type: integer
          format: int64
        sendTimeout:
          description: |-
            Send timeout in milliseconds.

            Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).

            Value must be greater than 0.
          type: integer
          format: int64
        insertQuorumTimeout:
          description: |-
            Quorum write timeout in milliseconds.

            If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the `insertQuorum` replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
            In this case, the client must send the query again to write the data block into the same or another replica.

            Minimum value: **1000**, 1 second (default: **60000**, 1 minute).

            The minimum value is 1000.
          type: integer
          format: int64
        selectSequentialConsistency:
          description: |-
            Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.

            Default value: **false** (sequential consistency is disabled).
          type: boolean
          format: boolean
        maxReplicaDelayForDistributedQueries:
          description: |-
            Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.

            Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).

            The minimum value is 1000.
          type: integer
          format: int64
        fallbackToStaleReplicasForDistributedQueries:
          description: |-
            Enables or disables query forcing to a stale replica in case the actual data is unavailable.
            If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
            This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.

            Default value: **true** (query forcing is enabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
          type: boolean
          format: boolean
        replicationAlterPartitionsSync:
          description: |-
            Wait mode for asynchronous actions in **ALTER** queries on replicated tables:

            * **0**-do not wait for replicas.
            * **1**-only wait for own execution (default).
            * **2**-wait for all replicas.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).

            Acceptable values are 0 to 2, inclusive.
          type: integer
          format: int64
        distributedProductMode:
          $ref: '#/components/schemas/UserSettingsDistributedProductMode_in_UserSettings_distributedProductMode'
        distributedAggregationMemoryEfficient:
          description: |-
            Enables of disables memory saving mode when doing distributed aggregation.

            When ClickHouse works with a distributed query, external aggregation is done on remote servers.
            Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.

            Default value: **false** (memory saving mode is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
          type: boolean
          format: boolean
        distributedDdlTaskTimeout:
          description: Timeout for DDL queries, in milliseconds.
          type: integer
          format: int64
        skipUnavailableShards:
          description: |-
            Enables or disables silent skipping of unavailable shards.

            A shard is considered unavailable if all its replicas are also unavailable.

            Default value: **false** (silent skipping is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
          type: boolean
          format: boolean
        compile:
          description: |-
            Enables or disables query compilation.
            If you execute a lot of structurally identical queries, then enable this setting.
            As a result, such queries may be executed faster due to use of queries' compiled parts.

            Use this setting in combination with `minCountToCompile` setting.

            Default value: **false** (compilation is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#compile).
          type: boolean
          format: boolean
        minCountToCompile:
          description: |-
            How many structurally identical queries ClickHouse has to encounter before they are compiled.

            Minimum value: **0** (default: **3**).

            For the **0** value compilation is synchronous: a query waits for compilation process to complete prior to continuing execution.
            It is recommended to set this value only for testing purposes.

            For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
            When a compiled part of query is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#min-count-to-compile).

            The minimum value is 0.
          type: integer
          format: int64
        compileExpressions:
          description: |-
            Enables or disables expression compilation.
            If you execute a lot of queries that contain identical expressions, then enable this setting.
            As a result, such queries may be executed faster due to use of compiled expressions.

            Use this setting in combination with `minCountToCompileExpression` setting.

            Default value: **false** (expression compilation is disabled).
          type: boolean
          format: boolean
        minCountToCompileExpression:
          description: |-
            How many identical expressions ClickHouse has to encounter before they are compiled.

            Minimum value: **0** (default: **3**).

            For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
            It is recommended to set this value only for testing purposes.

            For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
            When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.

            The minimum value is 0.
          type: integer
          format: int64
        maxBlockSize:
          description: |-
            The maximum block size for reading.

            Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
            The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.

            This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.

            Value must be greater than **0** (default: **65536**).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).

            Value must be greater than 0.
          type: integer
          format: int64
        minInsertBlockSizeRows:
          description: |-
            Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
            Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.

            Minimal value: **0**, block squashing is disabled (default: **1048576**).

            The minimum value is 0.
          type: integer
          format: int64
        minInsertBlockSizeBytes:
          description: |-
            Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
            Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.

            Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).

            The minimum value is 0.
          type: integer
          format: int64
        maxInsertBlockSize:
          description: |-
            Allows to form blocks of the specified size (in bytes) when inserting data in a table.
            This setting has effect only if server is creating such blocks by itself.

            Value must be greater than **0** (default: **1048576**).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).

            Value must be greater than 0.
          type: integer
          format: int64
        minBytesToUseDirectIo:
          description: |-
            Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).

            By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
            Such reading strategy is effective when the data volume is small.
            If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.

            If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.

            Minimal value and default value: **0**, Direct I/O is disabled.

            The minimum value is 0.
          type: integer
          format: int64
        useUncompressedCache:
          description: |-
            Determines whether to use the cache of uncompressed blocks, or not.
            Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
            Enable this setting for the users who instantiates small queries frequently.

            This setting has effect only for tables of the MergeTree family.

            Default value: **false** (uncompressed cache is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
          type: boolean
          format: boolean
        mergeTreeMaxRowsToUseCache:
          description: |-
            Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
            than the specified value.

            Use this setting in combination with `useUncompressedCache` setting.

            Value must be greater than **0** (default: **128x8192**).

            Value must be greater than 0.
          type: integer
          format: int64
        mergeTreeMaxBytesToUseCache:
          description: |-
            Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
            than the specified value.

            Use this setting in combination with `useUncompressedCache` setting.

            Value must be greater than **0** (default: **192x10x1024x1024**).

            Value must be greater than 0.
          type: integer
          format: int64
        mergeTreeMinRowsForConcurrentRead:
          description: |-
            Limits the minimum number of rows to be read from a file to enable concurrent read.
            If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.

            This setting has effect only for tables of the MergeTree family.

            Value must be greater than **0** (default: **20x8192**).

            Value must be greater than 0.
          type: integer
          format: int64
        mergeTreeMinBytesForConcurrentRead:
          description: |-
            Limits the number of bytes to be read from a file to enable concurrent read.
            If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.

            This setting has effect only for tables of the MergeTree family.

            Value must be greater than **0** (default: **24x10x1024x1024**).

            Value must be greater than 0.
          type: integer
          format: int64
        maxBytesBeforeExternalGroupBy:
          description: |-
            Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.

            By default, aggregation is done by employing hash table that resides in RAM.
            A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the `maxMemoryUsage` setting).
            For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.

            Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.

            When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the `maxMemoryUsage` setting value (by default, the maximum memory usage is limited to ten gigabytes).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).

            See also: the `distributedAggregationMemoryEfficient` setting.
          type: integer
          format: int64
        maxBytesBeforeExternalSort:
          description: This setting is equivalent of the `maxBytesBeforeExternalGroupBy`
            setting, except for it is for sort operation (**ORDER BY**), not aggregation.
          type: integer
          format: int64
        groupByTwoLevelThreshold:
          description: |-
            Sets the threshold of the number of keys, after that the two-level aggregation should be used.

            Minimal value: **0**, threshold is not set (default: **10000**).
          type: integer
          format: int64
        groupByTwoLevelThresholdBytes:
          description: |-
            Sets the threshold of the number of bytes, after that the two-level aggregation should be used.

            Minimal value: **0**, threshold is not set (default: **100000000**).
          type: integer
          format: int64
        priority:
          description: |-
            Sets the priority of a query.

            * **0**-priority is not used.
            * **1**-the highest priority.
            * and so on. The higher the number, the lower a query's priority.

            This setting should be set up for each query individually.

            If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.

            Minimal value and default value: **0**, priority is not used.

            The minimum value is 0.
          type: integer
          format: int64
        maxThreads:
          description: |-
            Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).

            This setting applies to threads that perform the same stages of the query processing pipeline in parallel.

            Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).

            Value must be greater than 0.
          type: integer
          format: int64
        maxMemoryUsage:
          description: |-
            Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
            This setting does not take server's free RAM amount or total RAM amount into account.

            This limitation is enforced for any user's single query on a single server.

            Minimal value: **0**, no limitation is set.
            Value that is set in the ClickHouse default config file: **10737418240** (10 GB).

            If you use `maxBytesBeforeExternalGroupBy` or `maxBytesBeforeExternalSort` setting, then it is recommended to set their values twice as low as `maxMemoryUsage` setting value.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).

            The minimum value is 0.
          type: integer
          format: int64
        maxMemoryUsageForUser:
          description: |-
            Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
            This setting does not take server's free RAM amount or total RAM amount into account.

            This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxNetworkBandwidth:
          description: |-
            The maximum speed of data exchange over the network in bytes per second for a query.

            Minimal value and default value: **0**, no limitation is set.
          type: integer
          format: int64
        maxNetworkBandwidthForUser:
          description: |-
            The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.

            Minimal value and default value: **0**, no limitation is set.
          type: integer
          format: int64
        forceIndexByDate:
          description: |-
            If enabled, query is not executed if the ClickHouse can't use index by date.
            This setting has effect only for tables of the MergeTree family.

            Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
          type: boolean
          format: boolean
        forcePrimaryKey:
          description: |-
            If enabled, query is not executed if the ClickHouse can't use index by primary key.
            This setting has effect only for tables of the MergeTree family.

            Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
          type: boolean
          format: boolean
        maxRowsToRead:
          description: |-
            Limits the maximum number of rows that can be read from a table when running a query.

            Minimal value and default value: **0**, no limitation is set.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesToRead:
          description: |-
            Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        readOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_readOverflowMode'
        maxRowsToGroupBy:
          description: |-
            Limits the maximum number of unique keys received from aggregation function.
            This setting helps to reduce RAM consumption while doing aggregation.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        groupByOverflowMode:
          $ref: '#/components/schemas/UserSettingsGroupByOverflowMode_in_UserSettings_groupByOverflowMode'
        maxRowsToSort:
          description: |-
            Limits the maximum number of rows that can be read from a table for sorting.
            This setting helps to reduce RAM consumption.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesToSort:
          description: |-
            Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
            This setting helps to reduce RAM consumption.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        sortOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_sortOverflowMode'
        maxResultRows:
          description: |-
            Limits the number of rows in the result.
            This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxResultBytes:
          description: |-
            Limits the number of bytes in the result.
            This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        resultOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_resultOverflowMode'
        maxRowsInDistinct:
          description: |-
            Limits the maximum number of different rows when using **DISTINCT**.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesInDistinct:
          description: |-
            Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.

            The minimum value is 0.
          type: integer
          format: int64
        distinctOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_distinctOverflowMode'
        maxRowsToTransfer:
          description: |-
            Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesToTransfer:
          description: |-
            Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
            table when using **GLOBAL IN**.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        transferOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_transferOverflowMode'
        maxExecutionTime:
          description: |-
            Limits the maximum query execution time in milliseconds.
            At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        timeoutOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_timeoutOverflowMode'
        maxRowsInSet:
          description: |-
            Limit on the number of rows in the set resulting from the execution of the IN section.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesInSet:
          description: |-
            Limit on the number of bytes in the set resulting from the execution of the IN section.

            The minimum value is 0.
          type: integer
          format: int64
        setOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_setOverflowMode'
        maxRowsInJoin:
          description: |-
            Limit on maximum size of the hash table for JOIN, in rows.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesInJoin:
          description: |-
            Limit on maximum size of the hash table for JOIN, in bytes.

            The minimum value is 0.
          type: integer
          format: int64
        joinOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_joinOverflowMode'
        maxColumnsToRead:
          description: |-
            Limits the maximum number of columns that can be read from a table in a single query.
            If the query requires to read more columns to complete, then it will be aborted.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxTemporaryColumns:
          description: |-
            Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxTemporaryNonConstColumns:
          description: |-
            Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxQuerySize:
          description: |-
            Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.

            Value must be greater than **0** (default: **262144**).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).

            Value must be greater than 0.
          type: integer
          format: int64
        maxAstDepth:
          description: |-
            Limits the maximum depth of query syntax tree.

            Executing a big and complex query may result in building a syntax tree of enormous depth.
            By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.

            For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
            A user can be forced to construct more optimized queries, if this setting is used.

            Value must be greater than **0** (default: **1000**).
            If a too small value is set, it may render ClickHouse unable to execute even simple queries.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).

            Value must be greater than 0.
          type: integer
          format: int64
        maxAstElements:
          description: |-
            Limits the maximum size of query syntax tree in number of nodes.

            Executing a big and complex query may result in building a syntax tree of enormous size.
            By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.

            Value must be greater than **0** (default: **50000**).
            If a too small value is set, it may render ClickHouse unable to execute even simple queries.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).

            Value must be greater than 0.
          type: integer
          format: int64
        maxExpandedAstElements:
          description: |-
            Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.

            Executing a big and complex query may result in building a syntax tree of enormous size.
            By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.

            Value must be greater than **0** (default: **500000**).
            If a too small value is set, it may render ClickHouse unable to execute even simple queries.

            Value must be greater than 0.
          type: integer
          format: int64
        minExecutionSpeed:
          description: |-
            Minimal execution speed in rows per second.

            The minimum value is 0.
          type: integer
          format: int64
        minExecutionSpeedBytes:
          description: |-
            Minimal execution speed in bytes per second.

            The minimum value is 0.
          type: integer
          format: int64
        countDistinctImplementation:
          $ref: '#/components/schemas/UserSettingsCountDistinctImplementation_in_UserSettings_countDistinctImplementation'
        inputFormatValuesInterpretExpressions:
          description: |-
            Enables or disables SQL parser if the fast stream parser cannot parse the data.

            Enable this setting, if the data that you want to insert into a table contains SQL expressions.

            For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
            With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.

            This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.

            Default value: **true** (SQL parser is enabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
          type: boolean
          format: boolean
        inputFormatDefaultsForOmittedFields:
          description: |-
            Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.

            Default value: **true** (replacing is enabled).
          type: boolean
          format: boolean
        outputFormatJsonQuote_64BitIntegers:
          description: |-
            Enables quoting of 64-bit integers in JSON output format.

            If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
            Otherwise, such integers will not be quoted.

            Default value: **false** (quoting 64-bit integers is disabled).
          type: boolean
          format: boolean
        outputFormatJsonQuoteDenormals:
          description: |-
            Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.

            Default value: **false** (special values do not present in output).
          type: boolean
          format: boolean
        lowCardinalityAllowInNativeFormat:
          description: |-
            Determines whether to use LowCardinality type in Native format.

            * **true** (default)-yes, use.
            * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.

            LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
            If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.

            If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
            Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.

            Official ClickHouse client works with LowCardinality columns out-of-the-box.

            Default value: **true** (LowCardinality columns are used in Native format).
          type: boolean
          format: boolean
        emptyResultForAggregationByEmptySet:
          description: |-
            Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).

            * **true**-ClickHouse will return an empty result for such queries.
            * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
          type: boolean
          format: boolean
        joinedSubqueryRequiresAlias:
          type: boolean
          format: boolean
        joinUseNulls:
          type: boolean
          format: boolean
        transformNullIn:
          type: boolean
          format: boolean
        httpConnectionTimeout:
          description: |-
            HTTP connection timeout, in milliseconds.

            Value must be greater than **0** (default: **1000**, 1 second).
          type: integer
          format: int64
        httpReceiveTimeout:
          description: |-
            HTTP receive timeout, in milliseconds.

            Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
          type: integer
          format: int64
        httpSendTimeout:
          description: |-
            HTTP send timeout, in milliseconds.

            Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
          type: integer
          format: int64
        enableHttpCompression:
          description: |-
            Enables or disables data compression in HTTP responses.

            By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
            Use this setting to command ClickHouse to compress the result when sending it via HTTP.

            Enable this setting and add the **Accept-Encoding: <compression method>** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.

            ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.

            Default value: **false** (compression is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
          type: boolean
          format: boolean
        sendProgressInHttpHeaders:
          description: |-
            Enables progress notifications using **X-ClickHouse-Progress** HTTP header.

            Default value: **false** (notifications disabled).
          type: boolean
          format: boolean
        httpHeadersProgressInterval:
          description: |-
            Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.

            Value must be greater than **0** (default: **100**).
          type: integer
          format: int64
        addHttpCorsHeader:
          description: |-
            Adds CORS header in HTTP responses.

            Default value: **false** (header is not added).
          type: boolean
          format: boolean
        quotaMode:
          $ref: '#/components/schemas/UserSettingsQuotaMode_in_UserSettings_quotaMode'
    UserSettings_in_User_settings:
      description: |-
        ClickHouse user settings. Supported settings are a limited subset of all settings
        described in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/).
      type: object
      properties:
        readonly:
          description: |-
            Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use `allowDdl` instead.
            * **0** (default)-no restrictions.
            * **1**-only read data queries are allowed.
            * **2**-read data and change settings queries are allowed.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).

            Acceptable values are 0 to 2, inclusive.
          type: integer
          format: int64
        allowDdl:
          description: |-
            Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).

            Default value: **true**.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
          type: boolean
          format: boolean
        insertQuorum:
          description: |-
            Enables or disables write quorum for ClickHouse cluster.
            If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.

            When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the `insertQuorumTimeout` expires.
            All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
            Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.

            You can use `selectSequentialConsistency` setting to read the data written with write quorum.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).

            The minimum value is 0.
          type: integer
          format: int64
        connectTimeout:
          description: |-
            Connection timeout in milliseconds.

            Value must be greater than **0** (default: **10000**, 10 seconds).

            Value must be greater than 0.
          type: integer
          format: int64
        receiveTimeout:
          description: |-
            Receive timeout in milliseconds.

            Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).

            Value must be greater than 0.
          type: integer
          format: int64
        sendTimeout:
          description: |-
            Send timeout in milliseconds.

            Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).

            Value must be greater than 0.
          type: integer
          format: int64
        insertQuorumTimeout:
          description: |-
            Quorum write timeout in milliseconds.

            If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the `insertQuorum` replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
            In this case, the client must send the query again to write the data block into the same or another replica.

            Minimum value: **1000**, 1 second (default: **60000**, 1 minute).

            The minimum value is 1000.
          type: integer
          format: int64
        selectSequentialConsistency:
          description: |-
            Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.

            Default value: **false** (sequential consistency is disabled).
          type: boolean
          format: boolean
        maxReplicaDelayForDistributedQueries:
          description: |-
            Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.

            Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).

            The minimum value is 1000.
          type: integer
          format: int64
        fallbackToStaleReplicasForDistributedQueries:
          description: |-
            Enables or disables query forcing to a stale replica in case the actual data is unavailable.
            If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
            This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.

            Default value: **true** (query forcing is enabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
          type: boolean
          format: boolean
        replicationAlterPartitionsSync:
          description: |-
            Wait mode for asynchronous actions in **ALTER** queries on replicated tables:

            * **0**-do not wait for replicas.
            * **1**-only wait for own execution (default).
            * **2**-wait for all replicas.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).

            Acceptable values are 0 to 2, inclusive.
          type: integer
          format: int64
        distributedProductMode:
          $ref: '#/components/schemas/UserSettingsDistributedProductMode_in_UserSettings_distributedProductMode'
        distributedAggregationMemoryEfficient:
          description: |-
            Enables of disables memory saving mode when doing distributed aggregation.

            When ClickHouse works with a distributed query, external aggregation is done on remote servers.
            Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.

            Default value: **false** (memory saving mode is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
          type: boolean
          format: boolean
        distributedDdlTaskTimeout:
          description: Timeout for DDL queries, in milliseconds.
          type: integer
          format: int64
        skipUnavailableShards:
          description: |-
            Enables or disables silent skipping of unavailable shards.

            A shard is considered unavailable if all its replicas are also unavailable.

            Default value: **false** (silent skipping is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
          type: boolean
          format: boolean
        compile:
          description: |-
            Enables or disables query compilation.
            If you execute a lot of structurally identical queries, then enable this setting.
            As a result, such queries may be executed faster due to use of queries' compiled parts.

            Use this setting in combination with `minCountToCompile` setting.

            Default value: **false** (compilation is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#compile).
          type: boolean
          format: boolean
        minCountToCompile:
          description: |-
            How many structurally identical queries ClickHouse has to encounter before they are compiled.

            Minimum value: **0** (default: **3**).

            For the **0** value compilation is synchronous: a query waits for compilation process to complete prior to continuing execution.
            It is recommended to set this value only for testing purposes.

            For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
            When a compiled part of query is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#min-count-to-compile).

            The minimum value is 0.
          type: integer
          format: int64
        compileExpressions:
          description: |-
            Enables or disables expression compilation.
            If you execute a lot of queries that contain identical expressions, then enable this setting.
            As a result, such queries may be executed faster due to use of compiled expressions.

            Use this setting in combination with `minCountToCompileExpression` setting.

            Default value: **false** (expression compilation is disabled).
          type: boolean
          format: boolean
        minCountToCompileExpression:
          description: |-
            How many identical expressions ClickHouse has to encounter before they are compiled.

            Minimum value: **0** (default: **3**).

            For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
            It is recommended to set this value only for testing purposes.

            For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
            When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.

            The minimum value is 0.
          type: integer
          format: int64
        maxBlockSize:
          description: |-
            The maximum block size for reading.

            Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
            The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.

            This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.

            Value must be greater than **0** (default: **65536**).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).

            Value must be greater than 0.
          type: integer
          format: int64
        minInsertBlockSizeRows:
          description: |-
            Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
            Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.

            Minimal value: **0**, block squashing is disabled (default: **1048576**).

            The minimum value is 0.
          type: integer
          format: int64
        minInsertBlockSizeBytes:
          description: |-
            Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
            Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.

            Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).

            The minimum value is 0.
          type: integer
          format: int64
        maxInsertBlockSize:
          description: |-
            Allows to form blocks of the specified size (in bytes) when inserting data in a table.
            This setting has effect only if server is creating such blocks by itself.

            Value must be greater than **0** (default: **1048576**).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).

            Value must be greater than 0.
          type: integer
          format: int64
        minBytesToUseDirectIo:
          description: |-
            Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).

            By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
            Such reading strategy is effective when the data volume is small.
            If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.

            If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.

            Minimal value and default value: **0**, Direct I/O is disabled.

            The minimum value is 0.
          type: integer
          format: int64
        useUncompressedCache:
          description: |-
            Determines whether to use the cache of uncompressed blocks, or not.
            Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
            Enable this setting for the users who instantiates small queries frequently.

            This setting has effect only for tables of the MergeTree family.

            Default value: **false** (uncompressed cache is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
          type: boolean
          format: boolean
        mergeTreeMaxRowsToUseCache:
          description: |-
            Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
            than the specified value.

            Use this setting in combination with `useUncompressedCache` setting.

            Value must be greater than **0** (default: **128x8192**).

            Value must be greater than 0.
          type: integer
          format: int64
        mergeTreeMaxBytesToUseCache:
          description: |-
            Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
            than the specified value.

            Use this setting in combination with `useUncompressedCache` setting.

            Value must be greater than **0** (default: **192x10x1024x1024**).

            Value must be greater than 0.
          type: integer
          format: int64
        mergeTreeMinRowsForConcurrentRead:
          description: |-
            Limits the minimum number of rows to be read from a file to enable concurrent read.
            If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.

            This setting has effect only for tables of the MergeTree family.

            Value must be greater than **0** (default: **20x8192**).

            Value must be greater than 0.
          type: integer
          format: int64
        mergeTreeMinBytesForConcurrentRead:
          description: |-
            Limits the number of bytes to be read from a file to enable concurrent read.
            If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.

            This setting has effect only for tables of the MergeTree family.

            Value must be greater than **0** (default: **24x10x1024x1024**).

            Value must be greater than 0.
          type: integer
          format: int64
        maxBytesBeforeExternalGroupBy:
          description: |-
            Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.

            By default, aggregation is done by employing hash table that resides in RAM.
            A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the `maxMemoryUsage` setting).
            For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.

            Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.

            When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the `maxMemoryUsage` setting value (by default, the maximum memory usage is limited to ten gigabytes).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).

            See also: the `distributedAggregationMemoryEfficient` setting.
          type: integer
          format: int64
        maxBytesBeforeExternalSort:
          description: This setting is equivalent of the `maxBytesBeforeExternalGroupBy`
            setting, except for it is for sort operation (**ORDER BY**), not aggregation.
          type: integer
          format: int64
        groupByTwoLevelThreshold:
          description: |-
            Sets the threshold of the number of keys, after that the two-level aggregation should be used.

            Minimal value: **0**, threshold is not set (default: **10000**).
          type: integer
          format: int64
        groupByTwoLevelThresholdBytes:
          description: |-
            Sets the threshold of the number of bytes, after that the two-level aggregation should be used.

            Minimal value: **0**, threshold is not set (default: **100000000**).
          type: integer
          format: int64
        priority:
          description: |-
            Sets the priority of a query.

            * **0**-priority is not used.
            * **1**-the highest priority.
            * and so on. The higher the number, the lower a query's priority.

            This setting should be set up for each query individually.

            If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.

            Minimal value and default value: **0**, priority is not used.

            The minimum value is 0.
          type: integer
          format: int64
        maxThreads:
          description: |-
            Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).

            This setting applies to threads that perform the same stages of the query processing pipeline in parallel.

            Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).

            Value must be greater than 0.
          type: integer
          format: int64
        maxMemoryUsage:
          description: |-
            Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
            This setting does not take server's free RAM amount or total RAM amount into account.

            This limitation is enforced for any user's single query on a single server.

            Minimal value: **0**, no limitation is set.
            Value that is set in the ClickHouse default config file: **10737418240** (10 GB).

            If you use `maxBytesBeforeExternalGroupBy` or `maxBytesBeforeExternalSort` setting, then it is recommended to set their values twice as low as `maxMemoryUsage` setting value.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).

            The minimum value is 0.
          type: integer
          format: int64
        maxMemoryUsageForUser:
          description: |-
            Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
            This setting does not take server's free RAM amount or total RAM amount into account.

            This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxNetworkBandwidth:
          description: |-
            The maximum speed of data exchange over the network in bytes per second for a query.

            Minimal value and default value: **0**, no limitation is set.
          type: integer
          format: int64
        maxNetworkBandwidthForUser:
          description: |-
            The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.

            Minimal value and default value: **0**, no limitation is set.
          type: integer
          format: int64
        forceIndexByDate:
          description: |-
            If enabled, query is not executed if the ClickHouse can't use index by date.
            This setting has effect only for tables of the MergeTree family.

            Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
          type: boolean
          format: boolean
        forcePrimaryKey:
          description: |-
            If enabled, query is not executed if the ClickHouse can't use index by primary key.
            This setting has effect only for tables of the MergeTree family.

            Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
          type: boolean
          format: boolean
        maxRowsToRead:
          description: |-
            Limits the maximum number of rows that can be read from a table when running a query.

            Minimal value and default value: **0**, no limitation is set.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesToRead:
          description: |-
            Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        readOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_readOverflowMode'
        maxRowsToGroupBy:
          description: |-
            Limits the maximum number of unique keys received from aggregation function.
            This setting helps to reduce RAM consumption while doing aggregation.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        groupByOverflowMode:
          $ref: '#/components/schemas/UserSettingsGroupByOverflowMode_in_UserSettings_groupByOverflowMode'
        maxRowsToSort:
          description: |-
            Limits the maximum number of rows that can be read from a table for sorting.
            This setting helps to reduce RAM consumption.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesToSort:
          description: |-
            Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
            This setting helps to reduce RAM consumption.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        sortOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_sortOverflowMode'
        maxResultRows:
          description: |-
            Limits the number of rows in the result.
            This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxResultBytes:
          description: |-
            Limits the number of bytes in the result.
            This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        resultOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_resultOverflowMode'
        maxRowsInDistinct:
          description: |-
            Limits the maximum number of different rows when using **DISTINCT**.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesInDistinct:
          description: |-
            Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.

            The minimum value is 0.
          type: integer
          format: int64
        distinctOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_distinctOverflowMode'
        maxRowsToTransfer:
          description: |-
            Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesToTransfer:
          description: |-
            Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
            table when using **GLOBAL IN**.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        transferOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_transferOverflowMode'
        maxExecutionTime:
          description: |-
            Limits the maximum query execution time in milliseconds.
            At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        timeoutOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_timeoutOverflowMode'
        maxRowsInSet:
          description: |-
            Limit on the number of rows in the set resulting from the execution of the IN section.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesInSet:
          description: |-
            Limit on the number of bytes in the set resulting from the execution of the IN section.

            The minimum value is 0.
          type: integer
          format: int64
        setOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_setOverflowMode'
        maxRowsInJoin:
          description: |-
            Limit on maximum size of the hash table for JOIN, in rows.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesInJoin:
          description: |-
            Limit on maximum size of the hash table for JOIN, in bytes.

            The minimum value is 0.
          type: integer
          format: int64
        joinOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_joinOverflowMode'
        maxColumnsToRead:
          description: |-
            Limits the maximum number of columns that can be read from a table in a single query.
            If the query requires to read more columns to complete, then it will be aborted.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxTemporaryColumns:
          description: |-
            Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxTemporaryNonConstColumns:
          description: |-
            Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxQuerySize:
          description: |-
            Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.

            Value must be greater than **0** (default: **262144**).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).

            Value must be greater than 0.
          type: integer
          format: int64
        maxAstDepth:
          description: |-
            Limits the maximum depth of query syntax tree.

            Executing a big and complex query may result in building a syntax tree of enormous depth.
            By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.

            For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
            A user can be forced to construct more optimized queries, if this setting is used.

            Value must be greater than **0** (default: **1000**).
            If a too small value is set, it may render ClickHouse unable to execute even simple queries.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).

            Value must be greater than 0.
          type: integer
          format: int64
        maxAstElements:
          description: |-
            Limits the maximum size of query syntax tree in number of nodes.

            Executing a big and complex query may result in building a syntax tree of enormous size.
            By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.

            Value must be greater than **0** (default: **50000**).
            If a too small value is set, it may render ClickHouse unable to execute even simple queries.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).

            Value must be greater than 0.
          type: integer
          format: int64
        maxExpandedAstElements:
          description: |-
            Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.

            Executing a big and complex query may result in building a syntax tree of enormous size.
            By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.

            Value must be greater than **0** (default: **500000**).
            If a too small value is set, it may render ClickHouse unable to execute even simple queries.

            Value must be greater than 0.
          type: integer
          format: int64
        minExecutionSpeed:
          description: |-
            Minimal execution speed in rows per second.

            The minimum value is 0.
          type: integer
          format: int64
        minExecutionSpeedBytes:
          description: |-
            Minimal execution speed in bytes per second.

            The minimum value is 0.
          type: integer
          format: int64
        countDistinctImplementation:
          $ref: '#/components/schemas/UserSettingsCountDistinctImplementation_in_UserSettings_countDistinctImplementation'
        inputFormatValuesInterpretExpressions:
          description: |-
            Enables or disables SQL parser if the fast stream parser cannot parse the data.

            Enable this setting, if the data that you want to insert into a table contains SQL expressions.

            For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
            With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.

            This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.

            Default value: **true** (SQL parser is enabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
          type: boolean
          format: boolean
        inputFormatDefaultsForOmittedFields:
          description: |-
            Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.

            Default value: **true** (replacing is enabled).
          type: boolean
          format: boolean
        outputFormatJsonQuote_64BitIntegers:
          description: |-
            Enables quoting of 64-bit integers in JSON output format.

            If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
            Otherwise, such integers will not be quoted.

            Default value: **false** (quoting 64-bit integers is disabled).
          type: boolean
          format: boolean
        outputFormatJsonQuoteDenormals:
          description: |-
            Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.

            Default value: **false** (special values do not present in output).
          type: boolean
          format: boolean
        lowCardinalityAllowInNativeFormat:
          description: |-
            Determines whether to use LowCardinality type in Native format.

            * **true** (default)-yes, use.
            * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.

            LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
            If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.

            If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
            Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.

            Official ClickHouse client works with LowCardinality columns out-of-the-box.

            Default value: **true** (LowCardinality columns are used in Native format).
          type: boolean
          format: boolean
        emptyResultForAggregationByEmptySet:
          description: |-
            Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).

            * **true**-ClickHouse will return an empty result for such queries.
            * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
          type: boolean
          format: boolean
        joinedSubqueryRequiresAlias:
          type: boolean
          format: boolean
        joinUseNulls:
          type: boolean
          format: boolean
        transformNullIn:
          type: boolean
          format: boolean
        httpConnectionTimeout:
          description: |-
            HTTP connection timeout, in milliseconds.

            Value must be greater than **0** (default: **1000**, 1 second).
          type: integer
          format: int64
        httpReceiveTimeout:
          description: |-
            HTTP receive timeout, in milliseconds.

            Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
          type: integer
          format: int64
        httpSendTimeout:
          description: |-
            HTTP send timeout, in milliseconds.

            Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
          type: integer
          format: int64
        enableHttpCompression:
          description: |-
            Enables or disables data compression in HTTP responses.

            By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
            Use this setting to command ClickHouse to compress the result when sending it via HTTP.

            Enable this setting and add the **Accept-Encoding: <compression method>** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.

            ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.

            Default value: **false** (compression is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
          type: boolean
          format: boolean
        sendProgressInHttpHeaders:
          description: |-
            Enables progress notifications using **X-ClickHouse-Progress** HTTP header.

            Default value: **false** (notifications disabled).
          type: boolean
          format: boolean
        httpHeadersProgressInterval:
          description: |-
            Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.

            Value must be greater than **0** (default: **100**).
          type: integer
          format: int64
        addHttpCorsHeader:
          description: |-
            Adds CORS header in HTTP responses.

            Default value: **false** (header is not added).
          type: boolean
          format: boolean
        quotaMode:
          $ref: '#/components/schemas/UserSettingsQuotaMode_in_UserSettings_quotaMode'
    UserSettingsDistributedProductMode_in_UserSettings_distributedProductMode:
      description: |-
        Determine the behavior of distributed subqueries.

        See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#distributed-product-mode).

         - DISTRIBUTED_PRODUCT_MODE_DENY: Default value. Prohibits using these types of subqueries (returns the "Double-distributed in/JOIN subqueries is denied" exception).
         - DISTRIBUTED_PRODUCT_MODE_LOCAL: Replaces the database and table in the subquery with local ones for the destination server (shard), leaving the normal IN/JOIN.
         - DISTRIBUTED_PRODUCT_MODE_GLOBAL: Replaces the IN/JOIN query with GLOBAL IN/GLOBAL JOIN.
         - DISTRIBUTED_PRODUCT_MODE_ALLOW: Allows the use of these types of subqueries.
      type: string
      enum:
      - DISTRIBUTED_PRODUCT_MODE_DENY
      - DISTRIBUTED_PRODUCT_MODE_LOCAL
      - DISTRIBUTED_PRODUCT_MODE_GLOBAL
      - DISTRIBUTED_PRODUCT_MODE_ALLOW
    UserSettingsOverflowMode_in_UserSettings_readOverflowMode:
      description: |-
        Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while reading the data.

        * **throw**-abort query execution, return an error.
        * **break**-stop query execution, return partial result.
      type: string
      enum:
      - OVERFLOW_MODE_THROW
      - OVERFLOW_MODE_BREAK
    UserSettingsGroupByOverflowMode_in_UserSettings_groupByOverflowMode:
      description: |-
        Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing aggregation.

        * **throw**-abort query execution, return an error.
        * **break**-stop query execution, return partial result.
        * **any**-perform approximate **GROUP BY** operation by continuing aggregation for the keys that got into the set, but don't add new keys to the set.
      type: string
      enum:
      - GROUP_BY_OVERFLOW_MODE_THROW
      - GROUP_BY_OVERFLOW_MODE_BREAK
      - GROUP_BY_OVERFLOW_MODE_ANY
    UserSettingsOverflowMode_in_UserSettings_sortOverflowMode:
      description: |-
        Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while sorting.

        * **throw**-abort query execution, return an error.
        * **break**-stop query execution, return partial result.
      type: string
      enum:
      - OVERFLOW_MODE_THROW
      - OVERFLOW_MODE_BREAK
    UserSettingsOverflowMode_in_UserSettings_resultOverflowMode:
      description: |-
        Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while forming result.

        * **throw**-abort query execution, return an error.
        * **break**-stop query execution, return partial result.
      type: string
      enum:
      - OVERFLOW_MODE_THROW
      - OVERFLOW_MODE_BREAK
    UserSettingsOverflowMode_in_UserSettings_distinctOverflowMode:
      description: |-
        Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing **DISCTINCT**.

        * **throw**-abort query execution, return an error.
        * **break**-stop query execution, return partial result.
      type: string
      enum:
      - OVERFLOW_MODE_THROW
      - OVERFLOW_MODE_BREAK
    UserSettingsOverflowMode_in_UserSettings_transferOverflowMode:
      description: |-
        Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing transfers.

        * **throw**-abort query execution, return an error.
        * **break**-stop query execution, return partial result.
      type: string
      enum:
      - OVERFLOW_MODE_THROW
      - OVERFLOW_MODE_BREAK
    UserSettingsOverflowMode_in_UserSettings_timeoutOverflowMode:
      description: |-
        Determines the behavior on exceeding [limits](https://clickhouse.com/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) of execution time.

        * **throw**-abort query execution, return an error.
        * **break**-stop query execution, return partial result.
      type: string
      enum:
      - OVERFLOW_MODE_THROW
      - OVERFLOW_MODE_BREAK
    UserSettingsOverflowMode_in_UserSettings_setOverflowMode:
      description: |-
        Determine the behavior on exceeding max_rows_in_set or max_bytes_in_set limit.
        Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
      type: string
      enum:
      - OVERFLOW_MODE_THROW
      - OVERFLOW_MODE_BREAK
    UserSettingsOverflowMode_in_UserSettings_joinOverflowMode:
      description: |-
        Determine the behavior on exceeding max_rows_in_join or max_bytes_in_join limit.
        Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
      type: string
      enum:
      - OVERFLOW_MODE_THROW
      - OVERFLOW_MODE_BREAK
    UserSettingsCountDistinctImplementation_in_UserSettings_countDistinctImplementation:
      description: Aggregate function to use for implementation of count(DISTINCT
        ...).
      type: string
      enum:
      - COUNT_DISTINCT_IMPLEMENTATION_UNIQ
      - COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED
      - COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED_64
      - COUNT_DISTINCT_IMPLEMENTATION_UNIQ_HLL_12
      - COUNT_DISTINCT_IMPLEMENTATION_UNIQ_EXACT
    UserSettingsQuotaMode_in_UserSettings_quotaMode:
      description: 'Quota accounting mode. Possible values: QUOTA_MODE_DEFAULT, QUOTA_MODE_KEYED
        and QUOTA_MODE_KEYED_BY_IP.'
      type: string
      enum:
      - QUOTA_MODE_DEFAULT
      - QUOTA_MODE_KEYED
      - QUOTA_MODE_KEYED_BY_IP
    UserSettings_in_UserSpec_settings:
      description: |-
        ClickHouse user settings. Supported settings are a limited subset of all settings
        described in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/).
      type: object
      properties:
        readonly:
          description: |-
            Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use `allowDdl` instead.
            * **0** (default)-no restrictions.
            * **1**-only read data queries are allowed.
            * **2**-read data and change settings queries are allowed.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_readonly).

            Acceptable values are 0 to 2, inclusive.
          type: integer
          format: int64
        allowDdl:
          description: |-
            Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).

            Default value: **true**.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
          type: boolean
          format: boolean
        insertQuorum:
          description: |-
            Enables or disables write quorum for ClickHouse cluster.
            If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.

            When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the `insertQuorumTimeout` expires.
            All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
            Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.

            You can use `selectSequentialConsistency` setting to read the data written with write quorum.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-insert_quorum).

            The minimum value is 0.
          type: integer
          format: int64
        connectTimeout:
          description: |-
            Connection timeout in milliseconds.

            Value must be greater than **0** (default: **10000**, 10 seconds).

            Value must be greater than 0.
          type: integer
          format: int64
        receiveTimeout:
          description: |-
            Receive timeout in milliseconds.

            Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).

            Value must be greater than 0.
          type: integer
          format: int64
        sendTimeout:
          description: |-
            Send timeout in milliseconds.

            Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).

            Value must be greater than 0.
          type: integer
          format: int64
        insertQuorumTimeout:
          description: |-
            Quorum write timeout in milliseconds.

            If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the `insertQuorum` replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
            In this case, the client must send the query again to write the data block into the same or another replica.

            Minimum value: **1000**, 1 second (default: **60000**, 1 minute).

            The minimum value is 1000.
          type: integer
          format: int64
        selectSequentialConsistency:
          description: |-
            Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.

            Default value: **false** (sequential consistency is disabled).
          type: boolean
          format: boolean
        maxReplicaDelayForDistributedQueries:
          description: |-
            Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.

            Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).

            The minimum value is 1000.
          type: integer
          format: int64
        fallbackToStaleReplicasForDistributedQueries:
          description: |-
            Enables or disables query forcing to a stale replica in case the actual data is unavailable.
            If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
            This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.

            Default value: **true** (query forcing is enabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
          type: boolean
          format: boolean
        replicationAlterPartitionsSync:
          description: |-
            Wait mode for asynchronous actions in **ALTER** queries on replicated tables:

            * **0**-do not wait for replicas.
            * **1**-only wait for own execution (default).
            * **2**-wait for all replicas.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).

            Acceptable values are 0 to 2, inclusive.
          type: integer
          format: int64
        distributedProductMode:
          $ref: '#/components/schemas/UserSettingsDistributedProductMode_in_UserSettings_distributedProductMode'
        distributedAggregationMemoryEfficient:
          description: |-
            Enables of disables memory saving mode when doing distributed aggregation.

            When ClickHouse works with a distributed query, external aggregation is done on remote servers.
            Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.

            Default value: **false** (memory saving mode is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
          type: boolean
          format: boolean
        distributedDdlTaskTimeout:
          description: Timeout for DDL queries, in milliseconds.
          type: integer
          format: int64
        skipUnavailableShards:
          description: |-
            Enables or disables silent skipping of unavailable shards.

            A shard is considered unavailable if all its replicas are also unavailable.

            Default value: **false** (silent skipping is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
          type: boolean
          format: boolean
        compile:
          description: |-
            Enables or disables query compilation.
            If you execute a lot of structurally identical queries, then enable this setting.
            As a result, such queries may be executed faster due to use of queries' compiled parts.

            Use this setting in combination with `minCountToCompile` setting.

            Default value: **false** (compilation is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#compile).
          type: boolean
          format: boolean
        minCountToCompile:
          description: |-
            How many structurally identical queries ClickHouse has to encounter before they are compiled.

            Minimum value: **0** (default: **3**).

            For the **0** value compilation is synchronous: a query waits for compilation process to complete prior to continuing execution.
            It is recommended to set this value only for testing purposes.

            For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
            When a compiled part of query is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#min-count-to-compile).

            The minimum value is 0.
          type: integer
          format: int64
        compileExpressions:
          description: |-
            Enables or disables expression compilation.
            If you execute a lot of queries that contain identical expressions, then enable this setting.
            As a result, such queries may be executed faster due to use of compiled expressions.

            Use this setting in combination with `minCountToCompileExpression` setting.

            Default value: **false** (expression compilation is disabled).
          type: boolean
          format: boolean
        minCountToCompileExpression:
          description: |-
            How many identical expressions ClickHouse has to encounter before they are compiled.

            Minimum value: **0** (default: **3**).

            For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
            It is recommended to set this value only for testing purposes.

            For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
            When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.

            The minimum value is 0.
          type: integer
          format: int64
        maxBlockSize:
          description: |-
            The maximum block size for reading.

            Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
            The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.

            This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.

            Value must be greater than **0** (default: **65536**).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-max_block_size).

            Value must be greater than 0.
          type: integer
          format: int64
        minInsertBlockSizeRows:
          description: |-
            Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
            Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.

            Minimal value: **0**, block squashing is disabled (default: **1048576**).

            The minimum value is 0.
          type: integer
          format: int64
        minInsertBlockSizeBytes:
          description: |-
            Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
            Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.

            Minimal value: **0**, block squashing is disabled (default: **268435456**, 256 MB).

            The minimum value is 0.
          type: integer
          format: int64
        maxInsertBlockSize:
          description: |-
            Allows to form blocks of the specified size (in bytes) when inserting data in a table.
            This setting has effect only if server is creating such blocks by itself.

            Value must be greater than **0** (default: **1048576**).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_insert_block_size).

            Value must be greater than 0.
          type: integer
          format: int64
        minBytesToUseDirectIo:
          description: |-
            Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).

            By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
            Such reading strategy is effective when the data volume is small.
            If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.

            If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.

            Minimal value and default value: **0**, Direct I/O is disabled.

            The minimum value is 0.
          type: integer
          format: int64
        useUncompressedCache:
          description: |-
            Determines whether to use the cache of uncompressed blocks, or not.
            Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
            Enable this setting for the users who instantiates small queries frequently.

            This setting has effect only for tables of the MergeTree family.

            Default value: **false** (uncompressed cache is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
          type: boolean
          format: boolean
        mergeTreeMaxRowsToUseCache:
          description: |-
            Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
            than the specified value.

            Use this setting in combination with `useUncompressedCache` setting.

            Value must be greater than **0** (default: **128x8192**).

            Value must be greater than 0.
          type: integer
          format: int64
        mergeTreeMaxBytesToUseCache:
          description: |-
            Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
            than the specified value.

            Use this setting in combination with `useUncompressedCache` setting.

            Value must be greater than **0** (default: **192x10x1024x1024**).

            Value must be greater than 0.
          type: integer
          format: int64
        mergeTreeMinRowsForConcurrentRead:
          description: |-
            Limits the minimum number of rows to be read from a file to enable concurrent read.
            If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.

            This setting has effect only for tables of the MergeTree family.

            Value must be greater than **0** (default: **20x8192**).

            Value must be greater than 0.
          type: integer
          format: int64
        mergeTreeMinBytesForConcurrentRead:
          description: |-
            Limits the number of bytes to be read from a file to enable concurrent read.
            If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.

            This setting has effect only for tables of the MergeTree family.

            Value must be greater than **0** (default: **24x10x1024x1024**).

            Value must be greater than 0.
          type: integer
          format: int64
        maxBytesBeforeExternalGroupBy:
          description: |-
            Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.

            By default, aggregation is done by employing hash table that resides in RAM.
            A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the `maxMemoryUsage` setting).
            For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.

            Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.

            When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the `maxMemoryUsage` setting value (by default, the maximum memory usage is limited to ten gigabytes).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).

            See also: the `distributedAggregationMemoryEfficient` setting.
          type: integer
          format: int64
        maxBytesBeforeExternalSort:
          description: This setting is equivalent of the `maxBytesBeforeExternalGroupBy`
            setting, except for it is for sort operation (**ORDER BY**), not aggregation.
          type: integer
          format: int64
        groupByTwoLevelThreshold:
          description: |-
            Sets the threshold of the number of keys, after that the two-level aggregation should be used.

            Minimal value: **0**, threshold is not set (default: **10000**).
          type: integer
          format: int64
        groupByTwoLevelThresholdBytes:
          description: |-
            Sets the threshold of the number of bytes, after that the two-level aggregation should be used.

            Minimal value: **0**, threshold is not set (default: **100000000**).
          type: integer
          format: int64
        priority:
          description: |-
            Sets the priority of a query.

            * **0**-priority is not used.
            * **1**-the highest priority.
            * and so on. The higher the number, the lower a query's priority.

            This setting should be set up for each query individually.

            If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.

            Minimal value and default value: **0**, priority is not used.

            The minimum value is 0.
          type: integer
          format: int64
        maxThreads:
          description: |-
            Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).

            This setting applies to threads that perform the same stages of the query processing pipeline in parallel.

            Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_threads).

            Value must be greater than 0.
          type: integer
          format: int64
        maxMemoryUsage:
          description: |-
            Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
            This setting does not take server's free RAM amount or total RAM amount into account.

            This limitation is enforced for any user's single query on a single server.

            Minimal value: **0**, no limitation is set.
            Value that is set in the ClickHouse default config file: **10737418240** (10 GB).

            If you use `maxBytesBeforeExternalGroupBy` or `maxBytesBeforeExternalSort` setting, then it is recommended to set their values twice as low as `maxMemoryUsage` setting value.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).

            The minimum value is 0.
          type: integer
          format: int64
        maxMemoryUsageForUser:
          description: |-
            Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
            This setting does not take server's free RAM amount or total RAM amount into account.

            This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxNetworkBandwidth:
          description: |-
            The maximum speed of data exchange over the network in bytes per second for a query.

            Minimal value and default value: **0**, no limitation is set.
          type: integer
          format: int64
        maxNetworkBandwidthForUser:
          description: |-
            The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.

            Minimal value and default value: **0**, no limitation is set.
          type: integer
          format: int64
        forceIndexByDate:
          description: |-
            If enabled, query is not executed if the ClickHouse can't use index by date.
            This setting has effect only for tables of the MergeTree family.

            Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-force_index_by_date).
          type: boolean
          format: boolean
        forcePrimaryKey:
          description: |-
            If enabled, query is not executed if the ClickHouse can't use index by primary key.
            This setting has effect only for tables of the MergeTree family.

            Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#force-primary-key).
          type: boolean
          format: boolean
        maxRowsToRead:
          description: |-
            Limits the maximum number of rows that can be read from a table when running a query.

            Minimal value and default value: **0**, no limitation is set.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-rows-to-read).

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesToRead:
          description: |-
            Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        readOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_readOverflowMode'
        maxRowsToGroupBy:
          description: |-
            Limits the maximum number of unique keys received from aggregation function.
            This setting helps to reduce RAM consumption while doing aggregation.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        groupByOverflowMode:
          $ref: '#/components/schemas/UserSettingsGroupByOverflowMode_in_UserSettings_groupByOverflowMode'
        maxRowsToSort:
          description: |-
            Limits the maximum number of rows that can be read from a table for sorting.
            This setting helps to reduce RAM consumption.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesToSort:
          description: |-
            Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
            This setting helps to reduce RAM consumption.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        sortOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_sortOverflowMode'
        maxResultRows:
          description: |-
            Limits the number of rows in the result.
            This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxResultBytes:
          description: |-
            Limits the number of bytes in the result.
            This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        resultOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_resultOverflowMode'
        maxRowsInDistinct:
          description: |-
            Limits the maximum number of different rows when using **DISTINCT**.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesInDistinct:
          description: |-
            Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.

            The minimum value is 0.
          type: integer
          format: int64
        distinctOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_distinctOverflowMode'
        maxRowsToTransfer:
          description: |-
            Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesToTransfer:
          description: |-
            Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
            table when using **GLOBAL IN**.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        transferOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_transferOverflowMode'
        maxExecutionTime:
          description: |-
            Limits the maximum query execution time in milliseconds.
            At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        timeoutOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_timeoutOverflowMode'
        maxRowsInSet:
          description: |-
            Limit on the number of rows in the set resulting from the execution of the IN section.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesInSet:
          description: |-
            Limit on the number of bytes in the set resulting from the execution of the IN section.

            The minimum value is 0.
          type: integer
          format: int64
        setOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_setOverflowMode'
        maxRowsInJoin:
          description: |-
            Limit on maximum size of the hash table for JOIN, in rows.

            The minimum value is 0.
          type: integer
          format: int64
        maxBytesInJoin:
          description: |-
            Limit on maximum size of the hash table for JOIN, in bytes.

            The minimum value is 0.
          type: integer
          format: int64
        joinOverflowMode:
          $ref: '#/components/schemas/UserSettingsOverflowMode_in_UserSettings_joinOverflowMode'
        maxColumnsToRead:
          description: |-
            Limits the maximum number of columns that can be read from a table in a single query.
            If the query requires to read more columns to complete, then it will be aborted.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxTemporaryColumns:
          description: |-
            Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxTemporaryNonConstColumns:
          description: |-
            Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.

            Minimal value and default value: **0**, no limitation is set.

            The minimum value is 0.
          type: integer
          format: int64
        maxQuerySize:
          description: |-
            Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.

            Value must be greater than **0** (default: **262144**).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-max_query_size).

            Value must be greater than 0.
          type: integer
          format: int64
        maxAstDepth:
          description: |-
            Limits the maximum depth of query syntax tree.

            Executing a big and complex query may result in building a syntax tree of enormous depth.
            By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.

            For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
            A user can be forced to construct more optimized queries, if this setting is used.

            Value must be greater than **0** (default: **1000**).
            If a too small value is set, it may render ClickHouse unable to execute even simple queries.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-depth).

            Value must be greater than 0.
          type: integer
          format: int64
        maxAstElements:
          description: |-
            Limits the maximum size of query syntax tree in number of nodes.

            Executing a big and complex query may result in building a syntax tree of enormous size.
            By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.

            Value must be greater than **0** (default: **50000**).
            If a too small value is set, it may render ClickHouse unable to execute even simple queries.

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/query-complexity/#max-ast-elements).

            Value must be greater than 0.
          type: integer
          format: int64
        maxExpandedAstElements:
          description: |-
            Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.

            Executing a big and complex query may result in building a syntax tree of enormous size.
            By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.

            Value must be greater than **0** (default: **500000**).
            If a too small value is set, it may render ClickHouse unable to execute even simple queries.

            Value must be greater than 0.
          type: integer
          format: int64
        minExecutionSpeed:
          description: |-
            Minimal execution speed in rows per second.

            The minimum value is 0.
          type: integer
          format: int64
        minExecutionSpeedBytes:
          description: |-
            Minimal execution speed in bytes per second.

            The minimum value is 0.
          type: integer
          format: int64
        countDistinctImplementation:
          $ref: '#/components/schemas/UserSettingsCountDistinctImplementation_in_UserSettings_countDistinctImplementation'
        inputFormatValuesInterpretExpressions:
          description: |-
            Enables or disables SQL parser if the fast stream parser cannot parse the data.

            Enable this setting, if the data that you want to insert into a table contains SQL expressions.

            For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
            With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.

            This setting has effect only if you use [Values](https://clickhouse.com/docs/en/interfaces/formats/#data-format-values) format when inserting data.

            Default value: **true** (SQL parser is enabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
          type: boolean
          format: boolean
        inputFormatDefaultsForOmittedFields:
          description: |-
            Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.

            Default value: **true** (replacing is enabled).
          type: boolean
          format: boolean
        outputFormatJsonQuote_64BitIntegers:
          description: |-
            Enables quoting of 64-bit integers in JSON output format.

            If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
            Otherwise, such integers will not be quoted.

            Default value: **false** (quoting 64-bit integers is disabled).
          type: boolean
          format: boolean
        outputFormatJsonQuoteDenormals:
          description: |-
            Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.

            Default value: **false** (special values do not present in output).
          type: boolean
          format: boolean
        lowCardinalityAllowInNativeFormat:
          description: |-
            Determines whether to use LowCardinality type in Native format.

            * **true** (default)-yes, use.
            * **false**-convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.

            LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
            If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.

            If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
            Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.

            Official ClickHouse client works with LowCardinality columns out-of-the-box.

            Default value: **true** (LowCardinality columns are used in Native format).
          type: boolean
          format: boolean
        emptyResultForAggregationByEmptySet:
          description: |-
            Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).

            * **true**-ClickHouse will return an empty result for such queries.
            * **false** (default)-ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
          type: boolean
          format: boolean
        joinedSubqueryRequiresAlias:
          type: boolean
          format: boolean
        joinUseNulls:
          type: boolean
          format: boolean
        transformNullIn:
          type: boolean
          format: boolean
        httpConnectionTimeout:
          description: |-
            HTTP connection timeout, in milliseconds.

            Value must be greater than **0** (default: **1000**, 1 second).
          type: integer
          format: int64
        httpReceiveTimeout:
          description: |-
            HTTP receive timeout, in milliseconds.

            Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
          type: integer
          format: int64
        httpSendTimeout:
          description: |-
            HTTP send timeout, in milliseconds.

            Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
          type: integer
          format: int64
        enableHttpCompression:
          description: |-
            Enables or disables data compression in HTTP responses.

            By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
            Use this setting to command ClickHouse to compress the result when sending it via HTTP.

            Enable this setting and add the **Accept-Encoding: <compression method>** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.

            ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.

            Default value: **false** (compression is disabled).

            See in-depth description in [ClickHouse documentation](https://clickhouse.com/docs/en/interfaces/http/).
          type: boolean
          format: boolean
        sendProgressInHttpHeaders:
          description: |-
            Enables progress notifications using **X-ClickHouse-Progress** HTTP header.

            Default value: **false** (notifications disabled).
          type: boolean
          format: boolean
        httpHeadersProgressInterval:
          description: |-
            Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.

            Value must be greater than **0** (default: **100**).
          type: integer
          format: int64
        addHttpCorsHeader:
          description: |-
            Adds CORS header in HTTP responses.

            Default value: **false** (header is not added).
          type: boolean
          format: boolean
        quotaMode:
          $ref: '#/components/schemas/UserSettingsQuotaMode_in_UserSettings_quotaMode'
    WeeklyMaintenanceWindowWeekDay_in_WeeklyMaintenanceWindow_day:
      description: Day of the week (in `DDD` format).
      type: string
      enum:
      - MON
      - TUE
      - WED
      - THU
      - FRI
      - SAT
      - SUN
tags:
- name: Backup
  description: A set of methods for managing ClickHouse Backup resources.
- name: Cluster
  description: A set of methods for managing ClickHouse clusters.
- name: Database
  description: |-
    A set of methods for managing ClickHouse Database resources.
    NOTE: these methods are available only if database management through SQL is disabled.
- name: FormatSchema
- name: MlModel
  description: A set of methods for managing machine learning models.
- name: ResourcePreset
  description: A set of methods for managing ResourcePreset resources.
- name: User
  description: |-
    A set of methods for managing ClickHouse User resources.
    NOTE: these methods are available only if user management through SQL is disabled.
- name: Versions
  description: A set of methods for managing ClickHouse versions.
